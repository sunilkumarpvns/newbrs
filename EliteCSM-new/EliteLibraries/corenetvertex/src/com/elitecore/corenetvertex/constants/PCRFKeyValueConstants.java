package com.elitecore.corenetvertex.constants;

import java.util.*;


public enum PCRFKeyValueConstants {
 	
	REQUEST_TYPE_INITIAL_REQUEST(PCRFKeyConstants.REQUEST_TYPE, "INITIAL-REQUEST", "INITIAL-REQUEST"),
	REQUEST_TYPE_UPDATE_REQUEST(PCRFKeyConstants.REQUEST_TYPE, "UPDATE-REQUEST", "UPDATE-REQUEST"), 
	REQUEST_TYPE_TERMINATION_REQUEST(PCRFKeyConstants.REQUEST_TYPE, "TERMINATION-REQUEST", "TERMINATION-REQUEST"), 
	REQUEST_TYPE_EVENT_REQUEST(PCRFKeyConstants.REQUEST_TYPE, "EVENT-REQUEST", "EVENT-REQUEST"),
	REQUEST_TYPE_INITIAL_BEARER(PCRFKeyConstants.REQUEST_TYPE, "INITIAL", "INITIAL"),
	REQUEST_TYPE_UPDATE_BEARER(PCRFKeyConstants.REQUEST_TYPE, "UPDATE", "UPDATE"), 
	REQUEST_TYPE_TERMINATION_BEARER(PCRFKeyConstants.REQUEST_TYPE, "TERMINATION", "TERMINATION"), 

	REQUESTED_ACTION_DIRECT_DEBITING(PCRFKeyConstants.REQUESTED_ACTION, "DIRECT-DEBITING", "DIRECT-DEBITING"),
	REQUESTED_ACTION_REFUND_ACCOUNT(PCRFKeyConstants.REQUESTED_ACTION, "REFUND-ACCOUNT", "REFUND-ACCOUNT"),
	REQUESTED_ACTION_CHECK_BALANCE(PCRFKeyConstants.REQUESTED_ACTION, "CHECK-BALANCE", "CHECK-BALANCE"),
 	REQUESTED_ACTION_PRICE_ENQUIRY(PCRFKeyConstants.REQUESTED_ACTION, "PRICE-ENQUIRY", "PRICE-ENQUIRY"),

 	USAGE_REPORTING_TYPE_CUMULATIVE(PCRFKeyConstants.USAGE_REPORTING_TYPE, "CUMULATIVE", "CUMULATIVE"),
 	USAGE_REPORTING_TYPE_NON_CUMULATIVE(PCRFKeyConstants.USAGE_REPORTING_TYPE, "NON-CUMULATIVE", "NON-CUMULATIVE"),

 	MEDIA_TYPE_AUDIO(PCRFKeyConstants.CS_MEDIA_TYPE, "AUDIO", "AUDIO"),
 	MEDIA_TYPE_VIDEO(PCRFKeyConstants.CS_MEDIA_TYPE, "VIDEO", "VIDEO"),
 	MEDIA_TYPE_DATA(PCRFKeyConstants.CS_MEDIA_TYPE, "DATA", "DATA"),
 	MEDIA_TYPE_APPLICATION(PCRFKeyConstants.CS_MEDIA_TYPE, "APPLICATION", "APPLICATION"),
 	MEDIA_TYPE_CONTROL(PCRFKeyConstants.CS_MEDIA_TYPE, "CONTROL", "CONTROL"),
 	MEDIA_TYPE_TEXT(PCRFKeyConstants.CS_MEDIA_TYPE, "TEXT", "TEXT"),
 	MEDIA_TYPE_MESSAGE(PCRFKeyConstants.CS_MEDIA_TYPE, "MESSAGE", "MESSAGE"),
 	MEDIA_TYPE_OTHER(PCRFKeyConstants.CS_MEDIA_TYPE, "OTHER", "OTHER"),

 	PCCRULE_STATUS_ACTIVE(PCRFKeyConstants.PCC_RULE_STATUS, "Active", "Active"),
 	PCCRULE_STATUS_INACTIVE(PCRFKeyConstants.PCC_RULE_STATUS, "Inactive", "Inactive"),
 	PCCRULE_STATUS_TEMPORARILY_INACTIVE(PCRFKeyConstants.PCC_RULE_STATUS, "TemporarilyInactive", "TemporarilyInactive"),
 	
 	FLOW_STATUS_ENABLE_UPLINK(PCRFKeyConstants.CS_FLOW_STATUS, "ENABLE_UPLINK", "ENABLE_UPLINK"),
 	FLOW_STATUS_ENABLE_DOWNLINK(PCRFKeyConstants.CS_FLOW_STATUS, "ENABLE_DOWNLINK", "ENABLE_DOWNLINK"),
 	FLOW_STATUS_ENABLED(PCRFKeyConstants.CS_FLOW_STATUS, "ENABLED", "ENABLED"),
 	FLOW_STATUS_DISABLED(PCRFKeyConstants.CS_FLOW_STATUS, "DISABLED", "DISABLED"),
 	FLOW_STATUS_REMOVED(PCRFKeyConstants.CS_FLOW_STATUS, "REMOVED", "REMOVED"),
 	
 	FLOW_USAGE_NO_INFORMATION(PCRFKeyConstants.FLOW_USAGE, "NO_INFORMATION", "NO_INFORMATION"),
 	FLOW_USAGE_RTCP(PCRFKeyConstants.FLOW_USAGE, "RTCP", "RTCP"),
 	FLOW_USAGE_AF_SIGNALLING(PCRFKeyConstants.FLOW_USAGE, "AF_SIGNALLING", "AF_SIGNALLING"),
 	
 	//ACCESS-NETWORK
 	ACCESS_NETWORK_3GPP_GPRS(PCRFKeyConstants.CS_ACCESS_NETWORK, "3GPP_GPRS", "3GPP_GPRS"),
 	ACCESS_NETWORK_DOCSIS(PCRFKeyConstants.CS_ACCESS_NETWORK, "DOCSIS", "DOCSIS"),
 	ACCESS_NETWORK_XDSL(PCRFKeyConstants.CS_ACCESS_NETWORK, "XDSL", "XDSL"),
 	ACCESS_NETWORK_WIMAX(PCRFKeyConstants.CS_ACCESS_NETWORK, "WIMAX", "WIMAX"),
 	ACCESS_NETWORK_3GPP2(PCRFKeyConstants.CS_ACCESS_NETWORK, "3GPP2", "3GPP2"),
 	ACCESS_NETWORK_3GPP_EPS(PCRFKeyConstants.CS_ACCESS_NETWORK, "3GPP_EPS", "3GPP_EPS"),
 	ACCESS_NETWORK_NON_3GPP_EPS(PCRFKeyConstants.CS_ACCESS_NETWORK, "NON_3GPP_EPS", "NON_3GPP_EPS"),
 	ACCESS_NETWORK_WLAN(PCRFKeyConstants.CS_ACCESS_NETWORK, "WLAN", "WLAN"),
 	ACCESS_NETWORK_VIRTUAL(PCRFKeyConstants.CS_ACCESS_NETWORK, "VIRTUAL", "VIRTUAL"),
 	ACCESS_NETWORK_UTRAN(PCRFKeyConstants.CS_ACCESS_NETWORK, "UTRAN", "UTRAN"),
 	ACCESS_NETWORK_GERAN(PCRFKeyConstants.CS_ACCESS_NETWORK, "GERAN", "GERAN"),
 	ACCESS_NETWORK_GAN(PCRFKeyConstants.CS_ACCESS_NETWORK, "GAN", "GAN"),
 	ACCESS_NETWORK_HSPA_EVO(PCRFKeyConstants.CS_ACCESS_NETWORK, "HSPA_EVO", "HSPA_EVO"),
 	ACCESS_NETWORK_EUTRAN(PCRFKeyConstants.CS_ACCESS_NETWORK, "EUTRAN", "EUTRAN"),
 	ACCESS_NETWORK_CDMA2000_1X(PCRFKeyConstants.CS_ACCESS_NETWORK, "CDMA2000_1X", "CDMA2000_1X"),
 	ACCESS_NETWORK_HRPD(PCRFKeyConstants.CS_ACCESS_NETWORK, "HRPD", "HRPD"),
 	ACCESS_NETWORK_UMB(PCRFKeyConstants.CS_ACCESS_NETWORK, "UMB", "UMB"),
 	ACCESS_NETWORK_EHRPD(PCRFKeyConstants.CS_ACCESS_NETWORK, "EHRPD", "EHRPD"),
 	
 	// Session_Release_Cause in Gx
 	SRC_UNSPECIFIED_REASON(PCRFKeyConstants.SESSION_RELEASE_CAUSE, "0", "0"),
 	SRC_UE_SUBSCRIPTION_REASON(PCRFKeyConstants.SESSION_RELEASE_CAUSE, "1", "1"),
 	SRC_INSUFFICIENT_SERVER_RESOURCES(PCRFKeyConstants.SESSION_RELEASE_CAUSE, "2", "2"),

 	// Abort_Cause in Rx
 	AC_BEARER_RELEASED(PCRFKeyConstants.ABORT_CAUSE, "0", "0"),
 	AC_INSUFFICIENT_SERVER_RESOURCES(PCRFKeyConstants.ABORT_CAUSE, "1", "1"),
 	AC_INSUFFICIENT_BEARER_RESOURCES(PCRFKeyConstants.ABORT_CAUSE, "2", "2"),
 	
 	DEFAULT_SESSION_RULE_TRUE(PCRFKeyConstants.DEFAULT_QOS_PROFILE, "true", "true"),
 	DEFAULT_SESSION_RULE_FALSE(PCRFKeyConstants.DEFAULT_QOS_PROFILE, "false", "false"),
 	
 	REVALIDATION_MODE_CLIENT_INITIATED(PCRFKeyConstants.REVALIDATION_MODE, "ClientInitiated","Client Initiated"),
 	REVALIDATION_MODE_SERVER_INITIATED(PCRFKeyConstants.REVALIDATION_MODE, "ServerInitiated","Server Initiated"),
 	
 	// result code keys
 	// While adding any result code here, also do entry for the same in ResultCodeMapping.java
 	RESULT_CODE_UNKNOWN_USER(PCRFKeyConstants.RESULT_CODE, "UNKNOWN_USER", "UNKNOWN_USER"),
 	RESULT_CODE_SUBSCRIBER_UNAVAILABLE(PCRFKeyConstants.RESULT_CODE, "SUBSCRIBER_UNAVAILABLE", "SUBSCRIBER_UNAVAILABLE"),
 	RESULT_CODE_UNKNOWN_SESSION_ID(PCRFKeyConstants.RESULT_CODE, "UNKNOWN_SESSION_ID", "UNKNOWN_SESSION_ID"),
 	RESULT_CODE_SUCCESS(PCRFKeyConstants.RESULT_CODE, "SUCCESS", "SUCCESS"),
 	RESULT_CODE_CREDIT_LIMIT_REACH(PCRFKeyConstants.RESULT_CODE, "CREDIT_LIMIT_REACH", "CREDIT_LIMIT_REACH"),
 	RESULT_CODE_AUTHORIZATION_REJECTED(PCRFKeyConstants.RESULT_CODE, "AUTHORIZATION_REJECTED", "AUTHORIZATION_REJECTED"),
 	RESULT_CODE_RESPONSE_DROPPED(PCRFKeyConstants.RESULT_CODE, "RESPONSE_DROPPED", "RESPONSE_DROPPED"),
 	RESULT_CODE_SUBSCRIBER_PROFILE_EXPIRED(PCRFKeyConstants.RESULT_CODE, "SUBSCRIBER_PROFILE_EXPIRED", "SUBSCRIBER_PROFILE_EXPIRED"),
 	RESULT_CODE_SUBSCRIBER_PROFILE_INACTIVE(PCRFKeyConstants.RESULT_CODE, "SUBSCRIBER_ACCOUNT_IN_ACTIVE", "SUBSCRIBER_ACCOUNT_IN_ACTIVE"),
 	RESULT_CODE_INTERNAL_ERROR(PCRFKeyConstants.RESULT_CODE, "INTERNAL_ERROR", "INTERNAL_ERROR"),
 	RESULT_CODE_MAIN_SESSION_NOT_AVAILABLE(PCRFKeyConstants.RESULT_CODE, "MAIN_SESSION_NOT_AVAILABLE", "MAIN_SESSION_NOT_AVAILABLE"),
 	RESULT_CODE_AUTHENTICATION_FAILED(PCRFKeyConstants.RESULT_CODE, "AUTHENTICATION_FAILED", "AUTHENTICATION_FAILED"),
	RESULT_CODE_INVALID_PASSWORD(PCRFKeyConstants.RESULT_CODE, "INVALID_PASSWORD", "INVALID_PASSWORD"),
	RESULT_CODE_END_USER_SERVICE_DENIED(PCRFKeyConstants.RESULT_CODE, "DIAMETER_END_USER_SERVICE_DENIED", "DIAMETER_END_USER_SERVICE_DENIED"),
 	
 	LOCATION_TYPE_CGI(PCRFKeyConstants.LOCATION_TYPE,"0", "0"),
 	LOCATION_TYPE_SAI(PCRFKeyConstants.LOCATION_TYPE,"1", "1"),
 	LOCATION_TYPE_RAI(PCRFKeyConstants.LOCATION_TYPE,"2", "2"),
	
	SY_COMMUNICATION_FAIL(PCRFKeyConstants.SY_COMMUNICATION,"FAIL", "FAIL"),
	SY_COMMUNICATION_POLICY_COUNTER_NOT_AVAILABLE(PCRFKeyConstants.SY_COMMUNICATION,"POLICY_COUNTER_NOT_AVAILABLE","POLICY_COUNTER_NOT_AVAILABLE"),
	SY_COMMUNICATION_TIMEOUT(PCRFKeyConstants.SY_COMMUNICATION,"TIMEOUT","TIMEOUT"),
	SY_COMMUNICATION_NO_ALIVE_GATEWAY_FOUND(PCRFKeyConstants.SY_COMMUNICATION,"NO_ALIVE_GATEWAY_FOUND","NO_ALIVE_GATEWAY_FOUND"),
	
	FORCEFUL_SESSION_RE_AUTH(PCRFKeyConstants.SESSION_RE_AUTH,"FORCEFUL","FORCEFUL"),
	
	SUBSCRIBER_STATUS_UNKNOWN_SUBSCRIBER(PCRFKeyConstants.SUB_SUBSCRIBER_STATUS, "UNKNOWN_SUBSCRIBER", "UNKNOWN_SUBSCRIBER"),
	SUBSCRIBER_INTERNATIONAL_ROAMING_TRUE(PCRFKeyConstants.SUB_INTERNATIONAL_ROAMING, "true", "true"),
	SUBSCRIBER_INTERNATIONAL_ROAMING_FALSE(PCRFKeyConstants.SUB_INTERNATIONAL_ROAMING, "false", "false"),
	
	QOS_UPGRADE_NOT_SUPPORTED(PCRFKeyConstants.QOS_UPGRADE, "0", "0"),
	QOS_UPGRADE_SUPPORTED(PCRFKeyConstants.QOS_UPGRADE, "1", "1"),
	
	IMS_EMERGENCY_SESSION_TRUE(PCRFKeyConstants.IMS_EMERGENCY_SESSION, "true", "true"),
	IMS_EMERGENCY_SESSION_FALSE(PCRFKeyConstants.IMS_EMERGENCY_SESSION, "false", "false"),
	
	NETWORK_REQUEST_SUPPORTED(PCRFKeyConstants.NETWORK_REQUEST_SUPPORT,"NETWORK_REQUEST_SUPPORTED","NETWORK_REQUEST_SUPPORTED"),
	NETWORK_REQUEST_NOT_SUPPORTED(PCRFKeyConstants.NETWORK_REQUEST_SUPPORT,"NETWORK_REQUEST_NOT_SUPPORTED","NETWORK_REQUEST_NOT_SUPPORTED"),
	SIP_FORKING_SEVERAL_DIALOGUES(PCRFKeyConstants.SIP_FORKING_INDICATION, "SEVERAL_DIALOGUE","SEVERAL_DIALOGUE"),
	SIP_FORKING_SINGLE_DIALOGUES(PCRFKeyConstants.SIP_FORKING_INDICATION, "SINGLE_DIALOGUE", "SINGLE_DIALOGUE"),
	
	/*
	 * Reference: 3GPP AVP 1047 and 1048
	 */
	REQ_PREEMPTION_CAPABILITY_ENABLE(PCRFKeyConstants.REQ_PREEMPTION_CAPABILITY, "0", "0"),
	REQ_PREEMPTION_CAPABILITY_DISABLE(PCRFKeyConstants.REQ_PREEMPTION_CAPABILITY,"1", "1"),
	
	REQ_PREEMPTION_VULNERABILITY_ENABLE(PCRFKeyConstants.REQ_PREEMPTION_VULNERABILITY, "0", "0"),
	REQ_PREEMPTION_VULNERABILITY_DISABLE(PCRFKeyConstants.REQ_PREEMPTION_VULNERABILITY, "1", "1"),
	

	/* 
	 * Reference: 3GPP TS 29.214 AVP 527
	 */
	SERVICE_INFO_STATUS_PRELIMINARY_SERVICE_INFORMATION(PCRFKeyConstants.SERVICE_INFO_STATUS, "PRELIMINARY SERVICE INFORMATION", "PRELIMINARY SERVICE INFORMATION"),
	SERVICE_INFO_STATUS_FINAL_SERVICE_INFORMATION(PCRFKeyConstants.SERVICE_INFO_STATUS, "FINAL SERVICE INFORMATION", "FINAL SERVICE INFORMATION"),

	PCC_LEVEL_MONITORING_SUPPORTED(PCRFKeyConstants.PCC_LEVEL_MONITORING, "SUPPORTED", "SUPPORTED"),
	PCC_LEVEL_MONITORING_NOT_SUPPORTED(PCRFKeyConstants.PCC_LEVEL_MONITORING, "NOT_SUPPORTED", "NOT_SUPPORTED"),

	/*
	 *Re-Auth Reason Cause
	*/
	RE_AUTH_CAUSE_SNR(PCRFKeyConstants.RE_AUTH_CAUSE, "SNR", "SNR"),
	RE_AUTH_CAUSE_GY_RESRVATION_FAIL(PCRFKeyConstants.RE_AUTH_CAUSE, "GY_RESERVATION_FAIL", "GY RESERVATION FAIL"),
	RE_AUTH_CAUSE_GY_FINAL_USAGE_REPORTED(PCRFKeyConstants.RE_AUTH_CAUSE, "GY_FINAL_USAGE_REPORTED", "GY FINAL USAGE REPORTED"),
	RE_AUTH_CAUSE_GY_RESERVATION_CHANGE(PCRFKeyConstants.RE_AUTH_CAUSE, "GY_RESERVATION_CHANGE", "GY RESERVATION CHANGE"),

	MULTIPLE_SERVICE_INDICATOR_MULTIPLE_SERVICES_NOT_SUPPORTED(PCRFKeyConstants.MULTIPLE_SERVICE_INDICATOR, "MULTIPLE_SERVICES_NOT_SUPPORTED", "MULTIPLE_SERVICES_NOT_SUPPORTED"),
	MULTIPLE_SERVICE_INDICATOR_MULTIPLE_SERVICES_SUPPORTED(PCRFKeyConstants.MULTIPLE_SERVICE_INDICATOR, "MULTIPLE_SERVICES_SUPPORTED", "MULTIPLE_SERVICES_SUPPORTED"),
	
	REPORTING_REASON_THRESHOLD(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_THRESHOLD", "REPORTING_REASON_THRESHOLD"),
	REPORTING_REASON_QHT(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_QHT", "REPORTING_REASON_QHT"),
	REPORTING_REASON_FINAL(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_FINAL", "REPORTING_REASON_FINAL"),
	REPORTING_REASON_QUOTA_EXHAUSTED(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_QUOTA_EXHAUSTED", "REPORTING_REASON_QUOTA_EXHAUSTED"),
	REPORTING_REASON_VALIDITY_TIME(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_VALIDITY_TIME", "REPORTING_REASON_VALIDITY_TIME"),
	REPORTING_REASON_OTHER_QUOTA_TYPE(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_OTHER_QUOTA_TYPE", "REPORTING_REASON_OTHER_QUOTA_TYPE"),
	REPORTING_REASON_RATING_CONDITION_CHANGE(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_RATING_CONDITION_CHANGE", "REPORTING_REASON_RATING_CONDITION_CHANGE"),
	REPORTING_REASON_FORCED_REAUTHORISATION(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_FORCED_REAUTHORISATION", "REPORTING_REASON_FORCED_REAUTHORISATION"),
	REPORTING_REASON_POOL_EXHAUSTED(PCRFKeyConstants.REPORTING_REASON, "REPORTING_REASON_POOL_EXHAUSTED", "REPORTING_REASON_POOL_EXHAUSTED"),

	RESERVATION_REQUIRED_FALSE(PCRFKeyConstants.RESERVATION_REQUIRED, "FALSE", "RESERVATION_REQUIRED_FALSE"),
    RESERVATION_REQUIRED_TRUE(PCRFKeyConstants.RESERVATION_REQUIRED, "TRUE", "RESERVATION_REQUIRED_TRUE"),
	CALL_DIRECTION_INCOMING(PCRFKeyConstants.CS_CALL_DIRECTION, "INCOMING", "CALL_DIRECTION_INCOMING"),

	CALLTYPE_ONNET(PCRFKeyConstants.CS_CALLTYPE, "ON_NET", "ON_NET"),
	CALLTYPE_OFFNET(PCRFKeyConstants.CS_CALLTYPE, "OFF_NET", "OFF_NET"),
	CALLTYPE_INTERNATIONAL(PCRFKeyConstants.CS_CALLTYPE, "INTERNATIONAL", "INTERNATIONAL"),
	CALLTYPE_INTERNATIONAL_ROAMING(PCRFKeyConstants.CS_CALLTYPE, "INTERNATIONAL_ROAMING", "INTERNATIONAL_ROAMING"),

	DATA_SERVICE_ID(PCRFKeyConstants.CS_SERVICE, "DATA", "DATA"),
	VOICE_SERVICE_ID(PCRFKeyConstants.CS_SERVICE, "VOICE", "VOICE"),

	TARIFF_TYPE_NORMAL(PCRFKeyConstants.TARIFF_TYPE, "NORMAL", "NORMAL"),
	TARIFF_TYPE_FNF(PCRFKeyConstants.TARIFF_TYPE, "FNF", "FNF");


    private final PCRFKeyConstants key;
 	public final String val;
 	public final String displayValue;

	private static Map<PCRFKeyConstants, List<PCRFKeyValueConstants>> valueMap;
	private static Map<PCRFKeyConstants, Map<String, PCRFKeyValueConstants>> pcrfKeyValues;

	PCRFKeyValueConstants(PCRFKeyConstants key, String val, String displayValue) {
		this.key = key;
		this.val = val;
		this.displayValue = displayValue;
	}


 	
 	static {
		valueMap = new EnumMap<>(PCRFKeyConstants.class);
		pcrfKeyValues = new EnumMap<>(PCRFKeyConstants.class);
		for(PCRFKeyValueConstants keyVal : PCRFKeyValueConstants.values()) {
			List<PCRFKeyValueConstants> vals = valueMap.computeIfAbsent(keyVal.key, pcrfKeyConstants -> new ArrayList<>());
			vals.add(keyVal);

			Map<String, PCRFKeyValueConstants> keyValueMap = pcrfKeyValues.computeIfAbsent(keyVal.key, pcrfKeyConstants -> new HashMap<>());
			keyValueMap.put(keyVal.val, keyVal);
		}
		
		sortAccessNetworks();
	}

	private static void sortAccessNetworks() {
		Collections.sort(valueMap.get(PCRFKeyConstants.CS_ACCESS_NETWORK), new AccessNetworkComaparator());
	}
	
	public static List<PCRFKeyValueConstants> values(PCRFKeyConstants key) {
		return valueMap.get(key);
	}
	
	public static PCRFKeyValueConstants fromString(PCRFKeyConstants pcrfKey, String val) {
		Map<String, PCRFKeyValueConstants> tempMap = pcrfKeyValues.get(pcrfKey);
		return tempMap == null ? null : tempMap.get(val);
	}

	private static class AccessNetworkComaparator implements Comparator<PCRFKeyValueConstants> {

		@Override
		public int compare(PCRFKeyValueConstants pcrfKeyValueConstants1, PCRFKeyValueConstants pcrfKeyValueConstants2) {
			return pcrfKeyValueConstants1.val.compareTo(pcrfKeyValueConstants2.val);
		}
		
	}
}