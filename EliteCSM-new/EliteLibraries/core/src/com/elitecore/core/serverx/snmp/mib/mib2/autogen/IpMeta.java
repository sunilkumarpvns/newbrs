package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;

/**
 * The class is used for representing SNMP metadata for the "Ip" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.4.
 */
public class IpMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "Ip".
     */
    public IpMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(19);
            registerObject(18);
            registerObject(17);
            registerObject(16);
            registerObject(15);
            registerObject(14);
            registerObject(13);
            registerObject(12);
            registerObject(11);
            registerObject(10);
            registerObject(9);
            registerObject(8);
            registerObject(7);
            registerObject(6);
            registerObject(5);
            registerObject(4);
            registerObject(3);
            registerObject(2);
            registerObject(23);
            registerObject(1);
            registerObject(22);
            registerObject(21);
            registerObject(20);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 19:
                return new SnmpCounter(node.getIpFragCreates());

            case 18:
                return new SnmpCounter(node.getIpFragFails());

            case 17:
                return new SnmpCounter(node.getIpFragOKs());

            case 16:
                return new SnmpCounter(node.getIpReasmFails());

            case 15:
                return new SnmpCounter(node.getIpReasmOKs());

            case 14:
                return new SnmpCounter(node.getIpReasmReqds());

            case 13:
                return new SnmpInt(node.getIpReasmTimeout());

            case 12:
                return new SnmpCounter(node.getIpOutNoRoutes());

            case 11:
                return new SnmpCounter(node.getIpOutDiscards());

            case 10:
                return new SnmpCounter(node.getIpOutRequests());

            case 9:
                return new SnmpCounter(node.getIpInDelivers());

            case 8:
                return new SnmpCounter(node.getIpInDiscards());

            case 7:
                return new SnmpCounter(node.getIpInUnknownProtos());

            case 6:
                return new SnmpCounter(node.getIpForwDatagrams());

            case 5:
                return new SnmpCounter(node.getIpInAddrErrors());

            case 4:
                return new SnmpCounter(node.getIpInHdrErrors());

            case 3:
                return new SnmpCounter(node.getIpInReceives());

            case 2:
                return new SnmpInt(node.getIpDefaultTTL());

            case 23:
                return new SnmpCounter(node.getIpRoutingDiscards());

            case 1:
                return new SnmpInt(node.getIpForwarding());

            case 22: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 21: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 20: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                if (x instanceof SnmpInt) {
                    node.setIpDefaultTTL(((SnmpInt)x).toInteger());
                    return new SnmpInt(node.getIpDefaultTTL());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setIpForwarding( new EnumIpForwarding (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getIpForwarding());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 22: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 21: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 20: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                if (x instanceof SnmpInt) {
                    node.checkIpDefaultTTL(((SnmpInt)x).toInteger());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                if (x instanceof SnmpInt) {
                    try  {
                        node.checkIpForwarding( new EnumIpForwarding (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 22: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 21: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 20: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(IpMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 6:
            case 5:
            case 4:
            case 3:
            case 2:
            case 23:
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 6:
            case 5:
            case 4:
            case 3:
            case 2:
            case 23:
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 19:
                return "IpFragCreates";

            case 18:
                return "IpFragFails";

            case 17:
                return "IpFragOKs";

            case 16:
                return "IpReasmFails";

            case 15:
                return "IpReasmOKs";

            case 14:
                return "IpReasmReqds";

            case 13:
                return "IpReasmTimeout";

            case 12:
                return "IpOutNoRoutes";

            case 11:
                return "IpOutDiscards";

            case 10:
                return "IpOutRequests";

            case 9:
                return "IpInDelivers";

            case 8:
                return "IpInDiscards";

            case 7:
                return "IpInUnknownProtos";

            case 6:
                return "IpForwDatagrams";

            case 5:
                return "IpInAddrErrors";

            case 4:
                return "IpInHdrErrors";

            case 3:
                return "IpInReceives";

            case 2:
                return "IpDefaultTTL";

            case 23:
                return "IpRoutingDiscards";

            case 1:
                return "IpForwarding";

            case 22: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 21: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 20: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            case 22:
                return true;
            case 21:
                return true;
            case 20:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {

        switch((int)arc) {
            case 22:
                return tableIpNetToMediaTable;
            case 21:
                return tableIpRouteTable;
            case 20:
                return tableIpAddrTable;
        default:
            break;
        }
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
        tableIpNetToMediaTable = createIpNetToMediaTableMetaNode("IpNetToMediaTable", "Ip", mib, server);
        if ( tableIpNetToMediaTable != null)  {
            tableIpNetToMediaTable.registerEntryNode(mib,server);
            mib.registerTableMeta("IpNetToMediaTable", tableIpNetToMediaTable);
        }

        tableIpRouteTable = createIpRouteTableMetaNode("IpRouteTable", "Ip", mib, server);
        if ( tableIpRouteTable != null)  {
            tableIpRouteTable.registerEntryNode(mib,server);
            mib.registerTableMeta("IpRouteTable", tableIpRouteTable);
        }

        tableIpAddrTable = createIpAddrTableMetaNode("IpAddrTable", "Ip", mib, server);
        if ( tableIpAddrTable != null)  {
            tableIpAddrTable.registerEntryNode(mib,server);
            mib.registerTableMeta("IpAddrTable", tableIpAddrTable);
        }

    }


    /**
     * Factory method for "IpNetToMediaTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("IpNetToMediaTable")
     * @param groupName Name of the group to which this table belong ("Ip")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "IpNetToMediaTable" table (IpNetToMediaTableMeta)
     * 
     **/
    protected IpNetToMediaTableMeta createIpNetToMediaTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new IpNetToMediaTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "IpRouteTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("IpRouteTable")
     * @param groupName Name of the group to which this table belong ("Ip")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "IpRouteTable" table (IpRouteTableMeta)
     * 
     **/
    protected IpRouteTableMeta createIpRouteTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new IpRouteTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "IpAddrTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("IpAddrTable")
     * @param groupName Name of the group to which this table belong ("Ip")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "IpAddrTable" table (IpAddrTableMeta)
     * 
     **/
    protected IpAddrTableMeta createIpAddrTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new IpAddrTableMeta(mib, objectserver);
    }

    protected IpMBean node;
    protected SnmpStandardObjectServer objectserver = null;
    protected IpNetToMediaTableMeta tableIpNetToMediaTable = null;
    protected IpRouteTableMeta tableIpRouteTable = null;
    protected IpAddrTableMeta tableIpAddrTable = null;
}
