package com.elitecore.core.serverx.snmp.mib.jvm.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling JVM-MANAGEMENT-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "JvmMemPoolEntry" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.
 */
public class JvmMemPoolEntry implements JvmMemPoolEntryMBean, Serializable {

    /**
     * Variable for storing the value of "JvmMemPoolCollectMaxSize".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.33".
     *
     * "
     * The value of the maximum amount of memory at the most recent time
     * that the Java virtual machine has expended effort in recycling
     * unused objects in this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getCollectionUsage().getMax()
     * "
     *
     */
    protected Long JvmMemPoolCollectMaxSize = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolCollectCommitted".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.32".
     *
     * "
     * The amount of committed memory at the most recent time that the
     * Java virtual machine has expended effort in recycling unused objects
     * in this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getCollectionUsage().
     * getCommitted()
     * "
     *
     */
    protected Long JvmMemPoolCollectCommitted = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolCollectUsed".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.31".
     *
     * "
     * The amount of used memory at the most recent time that the
     * Java virtual machine has expended effort in recycling unused objects
     * in this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getCollectionUsage().getUsed()
     * "
     *
     */
    protected Long JvmMemPoolCollectUsed = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolCollectThreshdSupport".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.133".
     *
     * "Tells whether this memory pool supports collection usage threshold.
     * 
     * See java.lang.management.MemoryPoolMXBean.
     * isCollectionUsageThresholdSupported()
     * "
     *
     */
    protected EnumJvmMemPoolCollectThreshdSupport JvmMemPoolCollectThreshdSupport = new EnumJvmMemPoolCollectThreshdSupport();

    /**
     * Variable for storing the value of "JvmMemPoolCollectThreshdCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.132".
     *
     * "The number of times that the memory usage has crossed
     * the collection usage threshold, as detected by the Java virtual
     * machine.
     * 
     * If memory usage threshold is not supported, then this object, if
     * implemented, will always be equals to 0.
     * 
     * See also jvmMemPoolCollectThreshdSupport.
     * 
     * See java.lang.management.MemoryPoolMXBean.
     * getCollectionUsageThresholdCount(),
     * java.lang.management.MemoryPoolMXBean.
     * isCollectionUsageThresholdSupported()
     * "
     *
     */
    protected Long JvmMemPoolCollectThreshdCount = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolCollectThreshold".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.131".
     *
     * "The threshold value for the collection usage of this memory pool,
     * in bytes. A zero value (0) indicates that no threshold value is
     * configured.
     * When the amount of used memory crosses over this threshold
     * value the JVM will trigger a collection memory threshold exceeded
     * notification, and the jvmMemPoolCollectThreshdCount increases.
     * 
     * If collection usage threshold is not supported, then this object, if
     * implemented, will always be equals to 0. In that case, attempting
     * to set this object will trigger an inconsistentValue error.
     * 
     * See also jvmMemPoolCollectThreshdSupport.
     * 
     * See java.lang.management.MemoryPoolMXBean.
     * getCollectionUsageThreshold(),
     * java.lang.management.MemoryPoolMXBean.
     * setCollectionUsageThreshold(long),
     * java.lang.management.MemoryPoolMXBean.
     * isCollectionUsageThresholdSupported(),
     * java.lang.management.MemoryPoolMXBean.
     * getCollectionUsageThresholdCount()
     * "
     *
     */
    protected Long JvmMemPoolCollectThreshold = new Long(0L);

    /**
     * Variable for storing the value of "JvmMemPoolMaxSize".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.13".
     *
     * "
     * Maximal size of this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsage().getMax()
     * "
     *
     */
    protected Long JvmMemPoolMaxSize = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolCommitted".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.12".
     *
     * "
     * Amount of committed memory in this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsage().getCommitted()
     * "
     *
     */
    protected Long JvmMemPoolCommitted = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolUsed".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.11".
     *
     * "
     * Amount of used memory in this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsage().getUsed()
     * "
     *
     */
    protected Long JvmMemPoolUsed = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolInitSize".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.10".
     *
     * "
     * Initial size of this memory pool.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsage().getInit()
     * "
     *
     */
    protected Long JvmMemPoolInitSize = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolThreshdSupport".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.112".
     *
     * "Tells whether this memory pool supports usage threshold.
     * 
     * See java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported()
     * "
     *
     */
    protected EnumJvmMemPoolThreshdSupport JvmMemPoolThreshdSupport = new EnumJvmMemPoolThreshdSupport();

    /**
     * Variable for storing the value of "JvmMemPoolThreshdCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.111".
     *
     * "The number of times that the memory usage has crossed
     * the usage threshold, as detected by the Java virtual machine.
     * 
     * If memory usage threshold is not supported, then this object, if
     * implemented, will always be equals to 0.
     * 
     * See also jvmMemPoolThresholdSupport.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsageThresholdCount(),
     * java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported()
     * "
     *
     */
    protected Long JvmMemPoolThreshdCount = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolThreshold".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.110".
     *
     * "The threshold value for the memory usage of this memory pool,
     * in bytes. A zero value (0) indicates that no threshold value is
     * configured.
     * When the amount of used memory crosses over this threshold
     * value the JVM will trigger a usage memory threshold exceeded
     * notification, and the jvmMemPoolThreshdCount increases.
     * 
     * If memory usage threshold is not supported, then this object, if
     * implemented, will always be equals to 0. In that case, attempting
     * to set this object will trigger an inconsistentValue error.
     * 
     * See also jvmMemPoolThreshdSupport.
     * 
     * See java.lang.management.MemoryPoolMXBean.getUsageThreshold(),
     * java.lang.management.MemoryPoolMXBean.setUsageThreshold(long),
     * java.lang.management.MemoryPoolMXBean.getUsageThresholdCount(),
     * java.lang.management.MemoryPoolMXBean.isUsageThresholdSupported()
     * "
     *
     */
    protected Long JvmMemPoolThreshold = new Long(0L);

    /**
     * Variable for storing the value of "JvmMemPoolPeakReset".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.5".
     *
     * "
     * This object indicates the last time - in milliseconds - at which
     * the peak memory usage statistic of this memory pool was reset
     * to the current memory usage. This corresponds to a time stamp
     * as returned by java.lang.System.currentTimeMillis();
     * 
     * Setting this object to a time earlier than its current time value
     * has no effect. Setting this object to a time later than its current
     * time value causes the peak memory usage statistic of this memory
     * pool to be reset to the current memory usage. The new value of this
     * object will be the time at which the reset operation is triggered.
     * 
     * There could be a delay between the time at which the reset operation
     * is triggered and the time at which the actual resetting happens, so
     * this value is only indicative.
     * 
     * See java.lang.management.MemoryPoolMXBean.resetPeakUsage()
     * "
     *
     */
    protected Long JvmMemPoolPeakReset = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolState".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.4".
     *
     * "
     * Indicates whether this memory pool is valid in the Java
     * virtual machine. A memory pool becomes invalid once the
     * Java virtual machine removes it from the memory system.
     * 
     * See java.lang.management.MemoryPoolMXBean.isValid()
     * "
     *
     */
    protected EnumJvmMemPoolState JvmMemPoolState = new EnumJvmMemPoolState();

    /**
     * Variable for storing the value of "JvmMemPoolType".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.3".
     *
     * "The type of memory managed in this pool. This pool may be used for
     * heap memory or non-heap memory.
     * 
     * See java.lang.management.MemoryPoolMXBean.getMemoryType()
     * "
     *
     */
    protected EnumJvmMemPoolType JvmMemPoolType = new EnumJvmMemPoolType();

    /**
     * Variable for storing the value of "JvmMemPoolName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.2".
     *
     * "The name of this memory pool, as returned by
     * MemoryPoolMXBean.getName().
     * 
     * See java.lang.management.MemoryPoolMXBean.getName()
     * "
     *
     */
    protected Byte[] JvmMemPoolName = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "JvmMemPoolPeakMaxSize".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.23".
     *
     * "
     * Maximal size of this memory pool when the peak usage
     * was reached.
     * 
     * See java.lang.management.MemoryPoolMXBean.getPeakUsage().getMax()
     * "
     *
     */
    protected Long JvmMemPoolPeakMaxSize = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolIndex".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.1".
     *
     * "An index value opaquely computed by the agent which uniquely
     * identifies a row in the jvmMemPoolTable.
     * 
     * The jvmMemPoolIndex index is opaquely computed by the agent,
     * from e.g the hash code of the MemoryPool (or MemoryPool name).
     * The agent is responsible for allocating a free index when it
     * needs one (e.g. if two objects have the same hash, then it may
     * increment one of the values until the conflict is resolved).
     * As a result a manager must not depend on the value of that
     * index across, e.g. reboot of the agent, as this value is not
     * guaranteed to stay identical after the agent restarts.
     * "
     *
     */
    protected Integer JvmMemPoolIndex = new Integer(1);

    /**
     * Variable for storing the value of "JvmMemPoolPeakCommitted".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.22".
     *
     * "
     * Amount of committed memory in this memory pool when the peak usage
     * was reached.
     * 
     * See java.lang.management.MemoryPoolMXBean.getPeakUsage().getCommitted()
     * "
     *
     */
    protected Long JvmMemPoolPeakCommitted = new Long(1);

    /**
     * Variable for storing the value of "JvmMemPoolPeakUsed".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.21".
     *
     * "
     * Amount of used memory in this memory pool when the peak usage
     * was reached.
     * 
     * See java.lang.management.MemoryPoolMXBean.getPeakUsage().getUsed()
     * "
     *
     */
    protected Long JvmMemPoolPeakUsed = new Long(1);


    /**
     * Constructor for the "JvmMemPoolEntry" group.
     */
    public JvmMemPoolEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "JvmMemPoolCollectMaxSize" variable.
     */
    public Long getJvmMemPoolCollectMaxSize() throws SnmpStatusException {
        return JvmMemPoolCollectMaxSize;
    }

    /**
     * Getter for the "JvmMemPoolCollectCommitted" variable.
     */
    public Long getJvmMemPoolCollectCommitted() throws SnmpStatusException {
        return JvmMemPoolCollectCommitted;
    }

    /**
     * Getter for the "JvmMemPoolCollectUsed" variable.
     */
    public Long getJvmMemPoolCollectUsed() throws SnmpStatusException {
        return JvmMemPoolCollectUsed;
    }

    /**
     * Getter for the "JvmMemPoolCollectThreshdSupport" variable.
     */
    public EnumJvmMemPoolCollectThreshdSupport getJvmMemPoolCollectThreshdSupport() throws SnmpStatusException {
        return JvmMemPoolCollectThreshdSupport;
    }

    /**
     * Getter for the "JvmMemPoolCollectThreshdCount" variable.
     */
    public Long getJvmMemPoolCollectThreshdCount() throws SnmpStatusException {
        return JvmMemPoolCollectThreshdCount;
    }

    /**
     * Getter for the "JvmMemPoolCollectThreshold" variable.
     */
    public Long getJvmMemPoolCollectThreshold() throws SnmpStatusException {
        return JvmMemPoolCollectThreshold;
    }

    /**
     * Setter for the "JvmMemPoolCollectThreshold" variable.
     */
    public void setJvmMemPoolCollectThreshold(Long x) throws SnmpStatusException {
        JvmMemPoolCollectThreshold = x;
    }

    /**
     * Checker for the "JvmMemPoolCollectThreshold" variable.
     */
    public void checkJvmMemPoolCollectThreshold(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "JvmMemPoolMaxSize" variable.
     */
    public Long getJvmMemPoolMaxSize() throws SnmpStatusException {
        return JvmMemPoolMaxSize;
    }

    /**
     * Getter for the "JvmMemPoolCommitted" variable.
     */
    public Long getJvmMemPoolCommitted() throws SnmpStatusException {
        return JvmMemPoolCommitted;
    }

    /**
     * Getter for the "JvmMemPoolUsed" variable.
     */
    public Long getJvmMemPoolUsed() throws SnmpStatusException {
        return JvmMemPoolUsed;
    }

    /**
     * Getter for the "JvmMemPoolInitSize" variable.
     */
    public Long getJvmMemPoolInitSize() throws SnmpStatusException {
        return JvmMemPoolInitSize;
    }

    /**
     * Getter for the "JvmMemPoolThreshdSupport" variable.
     */
    public EnumJvmMemPoolThreshdSupport getJvmMemPoolThreshdSupport() throws SnmpStatusException {
        return JvmMemPoolThreshdSupport;
    }

    /**
     * Getter for the "JvmMemPoolThreshdCount" variable.
     */
    public Long getJvmMemPoolThreshdCount() throws SnmpStatusException {
        return JvmMemPoolThreshdCount;
    }

    /**
     * Getter for the "JvmMemPoolThreshold" variable.
     */
    public Long getJvmMemPoolThreshold() throws SnmpStatusException {
        return JvmMemPoolThreshold;
    }

    /**
     * Setter for the "JvmMemPoolThreshold" variable.
     */
    public void setJvmMemPoolThreshold(Long x) throws SnmpStatusException {
        JvmMemPoolThreshold = x;
    }

    /**
     * Checker for the "JvmMemPoolThreshold" variable.
     */
    public void checkJvmMemPoolThreshold(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "JvmMemPoolPeakReset" variable.
     */
    public Long getJvmMemPoolPeakReset() throws SnmpStatusException {
        return JvmMemPoolPeakReset;
    }

    /**
     * Setter for the "JvmMemPoolPeakReset" variable.
     */
    public void setJvmMemPoolPeakReset(Long x) throws SnmpStatusException {
        JvmMemPoolPeakReset = x;
    }

    /**
     * Checker for the "JvmMemPoolPeakReset" variable.
     */
    public void checkJvmMemPoolPeakReset(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "JvmMemPoolState" variable.
     */
    public EnumJvmMemPoolState getJvmMemPoolState() throws SnmpStatusException {
        return JvmMemPoolState;
    }

    /**
     * Getter for the "JvmMemPoolType" variable.
     */
    public EnumJvmMemPoolType getJvmMemPoolType() throws SnmpStatusException {
        return JvmMemPoolType;
    }

    /**
     * Getter for the "JvmMemPoolName" variable.
     */
    public Byte[] getJvmMemPoolName() throws SnmpStatusException {
        return JvmMemPoolName;
    }

    /**
     * Getter for the "JvmMemPoolPeakMaxSize" variable.
     */
    public Long getJvmMemPoolPeakMaxSize() throws SnmpStatusException {
        return JvmMemPoolPeakMaxSize;
    }

    /**
     * Getter for the "JvmMemPoolIndex" variable.
     */
    public Integer getJvmMemPoolIndex() throws SnmpStatusException {
        return JvmMemPoolIndex;
    }

    /**
     * Getter for the "JvmMemPoolPeakCommitted" variable.
     */
    public Long getJvmMemPoolPeakCommitted() throws SnmpStatusException {
        return JvmMemPoolPeakCommitted;
    }

    /**
     * Getter for the "JvmMemPoolPeakUsed" variable.
     */
    public Long getJvmMemPoolPeakUsed() throws SnmpStatusException {
        return JvmMemPoolPeakUsed;
    }

}
