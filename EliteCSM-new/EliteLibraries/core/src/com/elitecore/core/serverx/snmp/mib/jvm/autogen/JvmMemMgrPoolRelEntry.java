package com.elitecore.core.serverx.snmp.mib.jvm.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling JVM-MANAGEMENT-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "JvmMemMgrPoolRelEntry" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.42.2.145.3.163.1.1.2.120.1.
 */
public class JvmMemMgrPoolRelEntry implements JvmMemMgrPoolRelEntryMBean, Serializable {

    /**
     * Variable for storing the value of "JvmMemMgrRelPoolName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.120.1.3".
     *
     * "The name of the memory pool.
     * 
     * See java.manangement.MemoryPoolMXBean.getName();
     * "
     *
     */
    protected Byte[] JvmMemMgrRelPoolName = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "JvmMemMgrRelManagerName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.120.1.2".
     *
     * "The name of the memory manager.
     * 
     * See java.manangement.MemoryManagerMXBean.getName();
     * "
     *
     */
    protected Byte[] JvmMemMgrRelManagerName = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "JvmMemManagerIndex".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.100.1.1".
     *
     * "An index opaquely computed by the agent and which uniquely
     * identifies a Memory Manager.
     * 
     * The jvmMemManagerIndex index is opaquely computed by the agent,
     * from e.g the hash code of the MemoryManager (or MemoryManager name).
     * The agent is responsible for allocating a free index when it needs
     * one (e.g. if two objects have the same hash, then it may increment
     * one of the values until the conflict is resolved). As a result a
     * manager must not depend on the value of that index across,
     * e.g. reboot of the agent, as this value is not guaranteed to
     * stay identical after the agent restarts.
     * "
     *
     */
    protected Integer JvmMemManagerIndex = new Integer(1);

    /**
     * Variable for storing the value of "JvmMemPoolIndex".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.110.1.1".
     *
     * "An index value opaquely computed by the agent which uniquely
     * identifies a row in the jvmMemPoolTable.
     * 
     * The jvmMemPoolIndex index is opaquely computed by the agent,
     * from e.g the hash code of the MemoryPool (or MemoryPool name).
     * The agent is responsible for allocating a free index when it
     * needs one (e.g. if two objects have the same hash, then it may
     * increment one of the values until the conflict is resolved).
     * As a result a manager must not depend on the value of that
     * index across, e.g. reboot of the agent, as this value is not
     * guaranteed to stay identical after the agent restarts.
     * "
     *
     */
    protected Integer JvmMemPoolIndex = new Integer(1);


    /**
     * Constructor for the "JvmMemMgrPoolRelEntry" group.
     */
    public JvmMemMgrPoolRelEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "JvmMemMgrRelPoolName" variable.
     */
    public Byte[] getJvmMemMgrRelPoolName() throws SnmpStatusException {
        return JvmMemMgrRelPoolName;
    }

    /**
     * Getter for the "JvmMemMgrRelManagerName" variable.
     */
    public Byte[] getJvmMemMgrRelManagerName() throws SnmpStatusException {
        return JvmMemMgrRelManagerName;
    }

    /**
     * Getter for the "JvmMemManagerIndex" variable.
     */
    public Integer getJvmMemManagerIndex() throws SnmpStatusException {
        return JvmMemManagerIndex;
    }

    /**
     * Getter for the "JvmMemPoolIndex" variable.
     */
    public Integer getJvmMemPoolIndex() throws SnmpStatusException {
        return JvmMemPoolIndex;
    }

}
