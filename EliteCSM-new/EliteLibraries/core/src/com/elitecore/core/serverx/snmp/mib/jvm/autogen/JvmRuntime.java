package com.elitecore.core.serverx.snmp.mib.jvm.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling JVM-MANAGEMENT-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "JvmRuntime" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.42.2.145.3.163.1.1.4.
 */
public class JvmRuntime implements JvmRuntimeMBean, Serializable {

    /**
     * Variable for storing the value of "JvmRTLibraryPathTable".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.23".
     *
     * "The  library path.
     * 
     * Note that the SNMP agent may have to truncate the librarypath
     * elements contained in the string returned by the underlying API
     * if it does not fit in the JvmPathElementTC (1023 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getLibraryPath()
     * "
     *
     */
    protected TableJvmRTLibraryPathTable JvmRTLibraryPathTable;

    /**
     * Variable for storing the value of "JvmRTClassPathTable".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.22".
     *
     * "The  class path that is used by the system class loader
     * to search for a class file.
     * 
     * Note that the SNMP agent may have to truncate the classpath
     * elements contained in the string returned by the underlying API
     * if it does not fit in the JvmPathElementTC (1023 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getClassPath()
     * "
     *
     */
    protected TableJvmRTClassPathTable JvmRTClassPathTable;

    /**
     * Variable for storing the value of "JvmRTBootClassPathTable".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.21".
     *
     * "The boot class path that is used by the bootstrap class loader
     * to search for a class file for loading.
     * 
     * Note that the SNMP agent may have to truncate the bootclasspath
     * elements contained in the string returned by the underlying API
     * if it does not fit in the JvmPathElementTC (1023 bytes max).
     * 
     * This table is not implemented (or empty) if jvmRTBootClassPathSupport
     * is unsupported(1).
     * 
     * See java.lang.management.RuntimeMXBean.getBootClassPath()
     * java.lang.management.RuntimeMXBean.isBootClassPathSupported()
     * "
     *
     */
    protected TableJvmRTBootClassPathTable JvmRTBootClassPathTable;

    /**
     * Variable for storing the value of "JvmRTBootClassPathSupport".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.9".
     *
     * "Indicates whether the Java virtual machine supports the
     * boot class path mechanism used by the bootstrap class loader
     * to search for class files.
     * 
     * See java.lang.management.RuntimeMXBean.isBootClassPathSupported()
     * "
     *
     */
    protected EnumJvmRTBootClassPathSupport JvmRTBootClassPathSupport = new EnumJvmRTBootClassPathSupport();

    /**
     * Variable for storing the value of "JvmRTInputArgsTable".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.20".
     *
     * "The Input Argument Table lists the input arguments passed
     * to the Java Virtual Machine.
     * 
     * The jvmRTInputArgsIndex is the index of the argument in
     * the array returned by RuntimeMXBean.getInputArguments().
     * 
     * See java.lang.management.RuntimeMXBean.getInputArguments()
     * "
     *
     */
    protected TableJvmRTInputArgsTable JvmRTInputArgsTable;

    /**
     * Variable for storing the value of "JvmRTManagementSpecVersion".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.8".
     *
     * "The version of the management specification for the Java virtual
     * machine implementation.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getManagementSpecVersion()
     * "
     *
     */
    protected String JvmRTManagementSpecVersion = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTSpecVersion".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.7".
     *
     * "The Java virtual machine specification version.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getSpecVersion()
     * "
     *
     */
    protected String JvmRTSpecVersion = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTSpecVendor".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.6".
     *
     * "The Java virtual machine specification vendor.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getSpecVendor()
     * "
     *
     */
    protected String JvmRTSpecVendor = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTSpecName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.5".
     *
     * "The Java virtual machine specification name.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getSpecName()
     * "
     *
     */
    protected String JvmRTSpecName = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTVMVersion".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.4".
     *
     * "The Java virtual machine implementation version.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getVmVersion()
     * "
     *
     */
    protected String JvmRTVMVersion = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTVMVendor".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.3".
     *
     * "The Java virtual machine implementation vendor.
     * 
     * Note that the SNMP agent may have to truncate the string returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getVmVendor()
     * "
     *
     */
    protected String JvmRTVMVendor = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTStartTimeMs".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.12".
     *
     * "The approximate time when the Java virtual machine started, in
     * milliseconds. This is a time stamp as returned by
     * System.currentTimeMillis(). This time will not change unless
     * the Java Virtual Machine is restarted.
     * 
     * See also jvmRTUptimeMs.
     * 
     * See java.lang.management.RuntimeMXBean.getStartTime()
     * "
     *
     */
    protected Long JvmRTStartTimeMs = new Long(1);

    /**
     * Variable for storing the value of "JvmRTUptimeMs".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.11".
     *
     * "Uptime of the Java virtual machine, in milliseconds. This is
     * equivalent to ( System.currentTimeMillis() - jvmStartTimeMs ).
     * 
     * See also jvmRTStartTimeMs.
     * 
     * See java.lang.management.RuntimeMXBean.getUptime()
     * "
     *
     */
    protected Long JvmRTUptimeMs = new Long(1);

    /**
     * Variable for storing the value of "JvmRTVMName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.2".
     *
     * "The Java virtual machine implementation name.
     * 
     * See java.lang.management.RuntimeMXBean.getVmName()
     * "
     *
     */
    protected Byte[] JvmRTVMName = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "JvmRTName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.1".
     *
     * "The name representing the running Java virtual machine.
     * 
     * Note that the SNMP agent may have to truncate the name returned
     * by the underlying API if it does not fit in the DisplayString
     * (255 bytes max).
     * 
     * See java.lang.management.RuntimeMXBean.getName()
     * "
     *
     */
    protected String JvmRTName = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmRTInputArgsCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.4.10".
     *
     * "The number of input arguments passed to the Java Virtual Machine.
     * 
     * See java.lang.management.RuntimeMXBean.getInputArguments()
     * "
     *
     */
    protected Integer JvmRTInputArgsCount = new Integer(1);


    /**
     * Constructor for the "JvmRuntime" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public JvmRuntime(SnmpMib myMib) {
        JvmRTLibraryPathTable = new TableJvmRTLibraryPathTable (myMib);
        JvmRTClassPathTable = new TableJvmRTClassPathTable (myMib);
        JvmRTBootClassPathTable = new TableJvmRTBootClassPathTable (myMib);
        JvmRTInputArgsTable = new TableJvmRTInputArgsTable (myMib);
    }


    /**
     * Constructor for the "JvmRuntime" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public JvmRuntime(SnmpMib myMib, MBeanServer server) {
        JvmRTLibraryPathTable = new TableJvmRTLibraryPathTable (myMib, server);
        JvmRTClassPathTable = new TableJvmRTClassPathTable (myMib, server);
        JvmRTBootClassPathTable = new TableJvmRTBootClassPathTable (myMib, server);
        JvmRTInputArgsTable = new TableJvmRTInputArgsTable (myMib, server);
    }

    /**
     * Access the "JvmRTLibraryPathTable" variable.
     */
    public TableJvmRTLibraryPathTable accessJvmRTLibraryPathTable() throws SnmpStatusException {
        return JvmRTLibraryPathTable;
    }

    /**
     * Access the "JvmRTLibraryPathTable" variable as a bean indexed property.
     */
    public JvmRTLibraryPathEntryMBean[] getJvmRTLibraryPathTable() throws SnmpStatusException {
        return JvmRTLibraryPathTable.getEntries();
    }

    /**
     * Access the "JvmRTClassPathTable" variable.
     */
    public TableJvmRTClassPathTable accessJvmRTClassPathTable() throws SnmpStatusException {
        return JvmRTClassPathTable;
    }

    /**
     * Access the "JvmRTClassPathTable" variable as a bean indexed property.
     */
    public JvmRTClassPathEntryMBean[] getJvmRTClassPathTable() throws SnmpStatusException {
        return JvmRTClassPathTable.getEntries();
    }

    /**
     * Access the "JvmRTBootClassPathTable" variable.
     */
    public TableJvmRTBootClassPathTable accessJvmRTBootClassPathTable() throws SnmpStatusException {
        return JvmRTBootClassPathTable;
    }

    /**
     * Access the "JvmRTBootClassPathTable" variable as a bean indexed property.
     */
    public JvmRTBootClassPathEntryMBean[] getJvmRTBootClassPathTable() throws SnmpStatusException {
        return JvmRTBootClassPathTable.getEntries();
    }

    /**
     * Getter for the "JvmRTBootClassPathSupport" variable.
     */
    public EnumJvmRTBootClassPathSupport getJvmRTBootClassPathSupport() throws SnmpStatusException {
        return JvmRTBootClassPathSupport;
    }

    /**
     * Access the "JvmRTInputArgsTable" variable.
     */
    public TableJvmRTInputArgsTable accessJvmRTInputArgsTable() throws SnmpStatusException {
        return JvmRTInputArgsTable;
    }

    /**
     * Access the "JvmRTInputArgsTable" variable as a bean indexed property.
     */
    public JvmRTInputArgsEntryMBean[] getJvmRTInputArgsTable() throws SnmpStatusException {
        return JvmRTInputArgsTable.getEntries();
    }

    /**
     * Getter for the "JvmRTManagementSpecVersion" variable.
     */
    public String getJvmRTManagementSpecVersion() throws SnmpStatusException {
        return JvmRTManagementSpecVersion;
    }

    /**
     * Getter for the "JvmRTSpecVersion" variable.
     */
    public String getJvmRTSpecVersion() throws SnmpStatusException {
        return JvmRTSpecVersion;
    }

    /**
     * Getter for the "JvmRTSpecVendor" variable.
     */
    public String getJvmRTSpecVendor() throws SnmpStatusException {
        return JvmRTSpecVendor;
    }

    /**
     * Getter for the "JvmRTSpecName" variable.
     */
    public String getJvmRTSpecName() throws SnmpStatusException {
        return JvmRTSpecName;
    }

    /**
     * Getter for the "JvmRTVMVersion" variable.
     */
    public String getJvmRTVMVersion() throws SnmpStatusException {
        return JvmRTVMVersion;
    }

    /**
     * Getter for the "JvmRTVMVendor" variable.
     */
    public String getJvmRTVMVendor() throws SnmpStatusException {
        return JvmRTVMVendor;
    }

    /**
     * Getter for the "JvmRTStartTimeMs" variable.
     */
    public Long getJvmRTStartTimeMs() throws SnmpStatusException {
        return JvmRTStartTimeMs;
    }

    /**
     * Getter for the "JvmRTUptimeMs" variable.
     */
    public Long getJvmRTUptimeMs() throws SnmpStatusException {
        return JvmRTUptimeMs;
    }

    /**
     * Getter for the "JvmRTVMName" variable.
     */
    public Byte[] getJvmRTVMName() throws SnmpStatusException {
        return JvmRTVMName;
    }

    /**
     * Getter for the "JvmRTName" variable.
     */
    public String getJvmRTName() throws SnmpStatusException {
        return JvmRTName;
    }

    /**
     * Getter for the "JvmRTInputArgsCount" variable.
     */
    public Integer getJvmRTInputArgsCount() throws SnmpStatusException {
        return JvmRTInputArgsCount;
    }

}
