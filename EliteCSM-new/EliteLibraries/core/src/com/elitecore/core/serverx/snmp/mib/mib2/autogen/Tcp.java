package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "Tcp" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.6.
 */
public class Tcp implements TcpMBean, Serializable {

    /**
     * Variable for storing the value of "TcpCurrEstab".
     * The variable is identified by: "1.3.6.1.2.1.6.9".
     *
     * "The number of TCP connections for which the
     * current state is either ESTABLISHED or CLOSE-
     * WAIT."
     *
     */
    protected Long TcpCurrEstab = new Long(1);

    /**
     * Variable for storing the value of "TcpEstabResets".
     * The variable is identified by: "1.3.6.1.2.1.6.8".
     *
     * "The number of times TCP connections have made a
     * direct transition to the CLOSED state from either
     * the ESTABLISHED state or the CLOSE-WAIT state."
     *
     */
    protected Long TcpEstabResets = new Long(1);

    /**
     * Variable for storing the value of "TcpAttemptFails".
     * The variable is identified by: "1.3.6.1.2.1.6.7".
     *
     * "The number of times TCP connections have made a
     * direct transition to the CLOSED state from either
     * the SYN-SENT state or the SYN-RCVD state, plus the
     * number of times TCP connections have made a direct
     * transition to the LISTEN state from the SYN-RCVD
     * state."
     *
     */
    protected Long TcpAttemptFails = new Long(1);

    /**
     * Variable for storing the value of "TcpOutRsts".
     * The variable is identified by: "1.3.6.1.2.1.6.15".
     *
     * "The number of TCP segments sent containing the
     * RST flag."
     *
     */
    protected Long TcpOutRsts = new Long(1);

    /**
     * Variable for storing the value of "TcpPassiveOpens".
     * The variable is identified by: "1.3.6.1.2.1.6.6".
     *
     * "The number of times TCP connections have made a
     * direct transition to the SYN-RCVD state from the
     * LISTEN state."
     *
     */
    protected Long TcpPassiveOpens = new Long(1);

    /**
     * Variable for storing the value of "TcpInErrs".
     * The variable is identified by: "1.3.6.1.2.1.6.14".
     *
     * "The total number of segments received in error
     * (e.g., bad TCP checksums)."
     *
     */
    protected Long TcpInErrs = new Long(1);

    /**
     * Variable for storing the value of "TcpActiveOpens".
     * The variable is identified by: "1.3.6.1.2.1.6.5".
     *
     * "The number of times TCP connections have made a
     * direct transition to the SYN-SENT state from the
     * CLOSED state."
     *
     */
    protected Long TcpActiveOpens = new Long(1);

    /**
     * Variable for storing the value of "TcpMaxConn".
     * The variable is identified by: "1.3.6.1.2.1.6.4".
     *
     * "The limit on the total number of TCP connections
     * the entity can support.  In entities where the
     * maximum number of connections is dynamic, this
     * object should contain the value -1."
     *
     */
    protected Integer TcpMaxConn = new Integer(1);

    /**
     * Variable for storing the value of "TcpConnTable".
     * The variable is identified by: "1.3.6.1.2.1.6.13".
     *
     * "A table containing TCP connection-specific
     * information."
     *
     */
    protected TableTcpConnTable TcpConnTable;

    /**
     * Variable for storing the value of "TcpRetransSegs".
     * The variable is identified by: "1.3.6.1.2.1.6.12".
     *
     * "The total number of segments retransmitted - that
     * is, the number of TCP segments transmitted
     * containing one or more previously transmitted
     * octets."
     *
     */
    protected Long TcpRetransSegs = new Long(1);

    /**
     * Variable for storing the value of "TcpRtoMax".
     * The variable is identified by: "1.3.6.1.2.1.6.3".
     *
     * "The maximum value permitted by a TCP
     * implementation for the retransmission timeout,
     * measured in milliseconds.  More refined semantics
     * for objects of this type depend upon the algorithm
     * used to determine the retransmission timeout.  In
     * particular, when the timeout algorithm is rsre(3),
     * an object of this type has the semantics of the
     * UBOUND quantity described in RFC 793."
     *
     */
    protected Integer TcpRtoMax = new Integer(1);

    /**
     * Variable for storing the value of "TcpRtoMin".
     * The variable is identified by: "1.3.6.1.2.1.6.2".
     *
     * "The minimum value permitted by a TCP
     * implementation for the retransmission timeout,
     * measured in milliseconds.  More refined semantics
     * for objects of this type depend upon the algorithm
     * used to determine the retransmission timeout.  In
     * particular, when the timeout algorithm is rsre(3),
     * an object of this type has the semantics of the
     * LBOUND quantity described in RFC 793."
     *
     */
    protected Integer TcpRtoMin = new Integer(1);

    /**
     * Variable for storing the value of "TcpOutSegs".
     * The variable is identified by: "1.3.6.1.2.1.6.11".
     *
     * "The total number of segments sent, including
     * those on current connections but excluding those
     * containing only retransmitted octets."
     *
     */
    protected Long TcpOutSegs = new Long(1);

    /**
     * Variable for storing the value of "TcpInSegs".
     * The variable is identified by: "1.3.6.1.2.1.6.10".
     *
     * "The total number of segments received, including
     * those received in error.  This count includes
     * segments received on currently established
     * connections."
     *
     */
    protected Long TcpInSegs = new Long(1);

    /**
     * Variable for storing the value of "TcpRtoAlgorithm".
     * The variable is identified by: "1.3.6.1.2.1.6.1".
     *
     * "The algorithm used to determine the timeout value
     * used for retransmitting unacknowledged octets."
     *
     */
    protected EnumTcpRtoAlgorithm TcpRtoAlgorithm = new EnumTcpRtoAlgorithm();


    /**
     * Constructor for the "Tcp" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public Tcp(SnmpMib myMib) {
        TcpConnTable = new TableTcpConnTable (myMib);
    }


    /**
     * Constructor for the "Tcp" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public Tcp(SnmpMib myMib, MBeanServer server) {
        TcpConnTable = new TableTcpConnTable (myMib, server);
    }

    /**
     * Getter for the "TcpCurrEstab" variable.
     */
    public Long getTcpCurrEstab() throws SnmpStatusException {
        return TcpCurrEstab;
    }

    /**
     * Getter for the "TcpEstabResets" variable.
     */
    public Long getTcpEstabResets() throws SnmpStatusException {
        return TcpEstabResets;
    }

    /**
     * Getter for the "TcpAttemptFails" variable.
     */
    public Long getTcpAttemptFails() throws SnmpStatusException {
        return TcpAttemptFails;
    }

    /**
     * Getter for the "TcpOutRsts" variable.
     */
    public Long getTcpOutRsts() throws SnmpStatusException {
        return TcpOutRsts;
    }

    /**
     * Getter for the "TcpPassiveOpens" variable.
     */
    public Long getTcpPassiveOpens() throws SnmpStatusException {
        return TcpPassiveOpens;
    }

    /**
     * Getter for the "TcpInErrs" variable.
     */
    public Long getTcpInErrs() throws SnmpStatusException {
        return TcpInErrs;
    }

    /**
     * Getter for the "TcpActiveOpens" variable.
     */
    public Long getTcpActiveOpens() throws SnmpStatusException {
        return TcpActiveOpens;
    }

    /**
     * Getter for the "TcpMaxConn" variable.
     */
    public Integer getTcpMaxConn() throws SnmpStatusException {
        return TcpMaxConn;
    }

    /**
     * Access the "TcpConnTable" variable.
     */
    public TableTcpConnTable accessTcpConnTable() throws SnmpStatusException {
        return TcpConnTable;
    }

    /**
     * Access the "TcpConnTable" variable as a bean indexed property.
     */
    public TcpConnEntryMBean[] getTcpConnTable() throws SnmpStatusException {
        return TcpConnTable.getEntries();
    }

    /**
     * Getter for the "TcpRetransSegs" variable.
     */
    public Long getTcpRetransSegs() throws SnmpStatusException {
        return TcpRetransSegs;
    }

    /**
     * Getter for the "TcpRtoMax" variable.
     */
    public Integer getTcpRtoMax() throws SnmpStatusException {
        return TcpRtoMax;
    }

    /**
     * Getter for the "TcpRtoMin" variable.
     */
    public Integer getTcpRtoMin() throws SnmpStatusException {
        return TcpRtoMin;
    }

    /**
     * Getter for the "TcpOutSegs" variable.
     */
    public Long getTcpOutSegs() throws SnmpStatusException {
        return TcpOutSegs;
    }

    /**
     * Getter for the "TcpInSegs" variable.
     */
    public Long getTcpInSegs() throws SnmpStatusException {
        return TcpInSegs;
    }

    /**
     * Getter for the "TcpRtoAlgorithm" variable.
     */
    public EnumTcpRtoAlgorithm getTcpRtoAlgorithm() throws SnmpStatusException {
        return TcpRtoAlgorithm;
    }

}
