package com.elitecore.core.serverx.snmp.mib.os.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling UCD-SNMP-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.EnumRowStatus;
import com.sun.management.snmp.SnmpDefinitions;

/**
 * The class is used for representing SNMP metadata for the "Ucdavis" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.2021.
 */
public class UcdavisMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "Ucdavis".
     */
    public UcdavisMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(9);
            registerObject(8);
            registerObject(15);
            registerObject(102);
            registerObject(2);
            registerObject(10);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 9: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 8: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 15: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 102: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 2: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 10: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 9: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 8: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 15: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 102: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 2: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 10: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 9: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 8: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 15: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 102: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 2: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 10: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(UcdavisMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 9: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 8: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 15: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 102: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 2: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 10: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            case 9:
                return true;
            case 8:
                return true;
            case 15:
                return true;
            case 102:
                return true;
            case 2:
                return true;
            case 10:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {

        switch((int)arc) {
            case 9:
                return tableDskTable;
            case 8:
                return tableExtTable;
            case 15:
                return tableFileTable;
            case 102:
                return tableMrTable;
            case 2:
                return tablePrTable;
            case 10:
                return tableLaTable;
        default:
            break;
        }
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
        tableDskTable = createDskTableMetaNode("DskTable", "Ucdavis", mib, server);
        if ( tableDskTable != null)  {
            tableDskTable.registerEntryNode(mib,server);
            mib.registerTableMeta("DskTable", tableDskTable);
        }

        tableExtTable = createExtTableMetaNode("ExtTable", "Ucdavis", mib, server);
        if ( tableExtTable != null)  {
            tableExtTable.registerEntryNode(mib,server);
            mib.registerTableMeta("ExtTable", tableExtTable);
        }

        tableFileTable = createFileTableMetaNode("FileTable", "Ucdavis", mib, server);
        if ( tableFileTable != null)  {
            tableFileTable.registerEntryNode(mib,server);
            mib.registerTableMeta("FileTable", tableFileTable);
        }

        tableMrTable = createMrTableMetaNode("MrTable", "Ucdavis", mib, server);
        if ( tableMrTable != null)  {
            tableMrTable.registerEntryNode(mib,server);
            mib.registerTableMeta("MrTable", tableMrTable);
        }

        tablePrTable = createPrTableMetaNode("PrTable", "Ucdavis", mib, server);
        if ( tablePrTable != null)  {
            tablePrTable.registerEntryNode(mib,server);
            mib.registerTableMeta("PrTable", tablePrTable);
        }

        tableLaTable = createLaTableMetaNode("LaTable", "Ucdavis", mib, server);
        if ( tableLaTable != null)  {
            tableLaTable.registerEntryNode(mib,server);
            mib.registerTableMeta("LaTable", tableLaTable);
        }

    }


    /**
     * Factory method for "DskTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("DskTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "DskTable" table (DskTableMeta)
     * 
     **/
    protected DskTableMeta createDskTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new DskTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "ExtTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("ExtTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "ExtTable" table (ExtTableMeta)
     * 
     **/
    protected ExtTableMeta createExtTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new ExtTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "FileTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("FileTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "FileTable" table (FileTableMeta)
     * 
     **/
    protected FileTableMeta createFileTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new FileTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "MrTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("MrTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "MrTable" table (MrTableMeta)
     * 
     **/
    protected MrTableMeta createMrTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new MrTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "PrTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("PrTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "PrTable" table (PrTableMeta)
     * 
     **/
    protected PrTableMeta createPrTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new PrTableMeta(mib, objectserver);
    }


    /**
     * Factory method for "LaTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("LaTable")
     * @param groupName Name of the group to which this table belong ("Ucdavis")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "LaTable" table (LaTableMeta)
     * 
     **/
    protected LaTableMeta createLaTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new LaTableMeta(mib, objectserver);
    }

    protected UcdavisMBean node;
    protected SnmpStandardObjectServer objectserver = null;
    protected DskTableMeta tableDskTable = null;
    protected ExtTableMeta tableExtTable = null;
    protected FileTableMeta tableFileTable = null;
    protected MrTableMeta tableMrTable = null;
    protected PrTableMeta tablePrTable = null;
    protected LaTableMeta tableLaTable = null;
}
