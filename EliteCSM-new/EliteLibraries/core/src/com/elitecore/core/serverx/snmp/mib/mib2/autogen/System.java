package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "System" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.1.
 */
public class System implements SystemMBean, Serializable {

    /**
     * Variable for storing the value of "SysLocation".
     * The variable is identified by: "1.3.6.1.2.1.1.6".
     *
     * "The physical location of this node (e.g.,
     * `telephone closet, 3rd floor')."
     *
     */
    protected String SysLocation = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SysName".
     * The variable is identified by: "1.3.6.1.2.1.1.5".
     *
     * "An administratively-assigned name for this
     * managed node.  By convention, this is the node's
     * fully-qualified domain name."
     *
     */
    protected String SysName = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SysContact".
     * The variable is identified by: "1.3.6.1.2.1.1.4".
     *
     * "The textual identification of the contact person
     * for this managed node, together with information
     * on how to contact this person."
     *
     */
    protected String SysContact = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SysUpTime".
     * The variable is identified by: "1.3.6.1.2.1.1.3".
     *
     * "The time (in hundredths of a second) since the
     * network management portion of the system was last
     * re-initialized."
     *
     */
    protected Long SysUpTime = new Long(1);

    /**
     * Variable for storing the value of "SysObjectID".
     * The variable is identified by: "1.3.6.1.2.1.1.2".
     *
     * "The vendor's authoritative identification of the
     * network management subsystem contained in the
     * entity.  This value is allocated within the SMI
     * enterprises subtree (1.3.6.1.4.1) and provides an
     * easy and unambiguous means for determining `what
     * kind of box' is being managed.  For example, if
     * vendor `Flintstones, Inc.' was assigned the
     * subtree 1.3.6.1.4.1.4242, it could assign the
     * identifier 1.3.6.1.4.1.4242.1.1 to its `Fred
     * Router'."
     *
     */
    protected String SysObjectID = new String("1.3.6.1.4.1.42");

    /**
     * Variable for storing the value of "SysDescr".
     * The variable is identified by: "1.3.6.1.2.1.1.1".
     *
     * "A textual description of the entity.  This value
     * should include the full name and version
     * identification of the system's hardware type,
     * software operating-system, and networking
     * software.  It is mandatory that this only contain
     * printable ASCII characters."
     *
     */
    protected String SysDescr = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "SysServices".
     * The variable is identified by: "1.3.6.1.2.1.1.7".
     *
     * "A value which indicates the set of services that
     * this entity primarily offers.
     * 
     * The value is a sum.  This sum initially takes the
     * value zero, Then, for each layer, L, in the range
     * 1 through 7, that this node performs transactions
     * for, 2 raised to (L - 1) is added to the sum.  For
     * example, a node which performs primarily routing
     * functions would have a value of 4 (2^(3-1)).  In
     * contrast, a node which is a host offering
     * application services would have a value of 72
     * (2^(4-1) + 2^(7-1)).  Note that in the context of
     * the Internet suite of protocols, values should be
     * calculated accordingly:
     * 
     * layer  functionality
     * 1  physical (e.g., repeaters)
     * 2  datalink/subnetwork (e.g., bridges)
     * 3  internet (e.g., IP gateways)
     * 4  end-to-end  (e.g., IP hosts)
     * 7  applications (e.g., mail relays)
     * 
     * For systems including OSI protocols, layers 5 and
     * 6 may also be counted."
     *
     */
    protected Integer SysServices = new Integer(1);


    /**
     * Constructor for the "System" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public System(SnmpMib myMib) {
    }


    /**
     * Constructor for the "System" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public System(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "SysLocation" variable.
     */
    public String getSysLocation() throws SnmpStatusException {
        return SysLocation;
    }

    /**
     * Setter for the "SysLocation" variable.
     */
    public void setSysLocation(String x) throws SnmpStatusException {
        SysLocation = x;
    }

    /**
     * Checker for the "SysLocation" variable.
     */
    public void checkSysLocation(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "SysName" variable.
     */
    public String getSysName() throws SnmpStatusException {
        return SysName;
    }

    /**
     * Setter for the "SysName" variable.
     */
    public void setSysName(String x) throws SnmpStatusException {
        SysName = x;
    }

    /**
     * Checker for the "SysName" variable.
     */
    public void checkSysName(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "SysContact" variable.
     */
    public String getSysContact() throws SnmpStatusException {
        return SysContact;
    }

    /**
     * Setter for the "SysContact" variable.
     */
    public void setSysContact(String x) throws SnmpStatusException {
        SysContact = x;
    }

    /**
     * Checker for the "SysContact" variable.
     */
    public void checkSysContact(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "SysUpTime" variable.
     */
    public Long getSysUpTime() throws SnmpStatusException {
        return SysUpTime;
    }

    /**
     * Getter for the "SysObjectID" variable.
     */
    public String getSysObjectID() throws SnmpStatusException {
        return SysObjectID;
    }

    /**
     * Getter for the "SysDescr" variable.
     */
    public String getSysDescr() throws SnmpStatusException {
        return SysDescr;
    }

    /**
     * Getter for the "SysServices" variable.
     */
    public Integer getSysServices() throws SnmpStatusException {
        return SysServices;
    }

}
