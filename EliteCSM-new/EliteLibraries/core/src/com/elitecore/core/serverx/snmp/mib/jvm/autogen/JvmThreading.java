package com.elitecore.core.serverx.snmp.mib.jvm.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling JVM-MANAGEMENT-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "JvmThreading" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.42.2.145.3.163.1.1.3.
 */
public class JvmThreading implements JvmThreadingMBean, Serializable {

    /**
     * Variable for storing the value of "JvmThreadCpuTimeMonitoring".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.6".
     *
     * "The state of the Thread CPU Time Monitoring feature.
     * This feature can be:
     * 
     * unsupported: The JVM does not support Thread CPU Time Monitoring.
     * enabled    : The JVM supports Thread CPU Time Monitoring, and it
     * is enabled.
     * disabled   : The JVM supports Thread CPU Time Monitoring, and it
     * is disabled.
     * 
     * Only enabled(3) and disabled(4) may be supplied as values to a
     * SET request. unsupported(1) can only be set internally by the
     * agent.
     * 
     * When the feature is unsupported(1), any attempt to change
     * that value will fail: trying to set this object to
     * enabled(3) or disabled(4) will result in an `inconsistentValue'
     * error. Trying to set it to any other value will result in an
     * `wrongValue' error.
     * 
     * See java.lang.management.ThreadMXBean.
     * isThreadCpuTimeSupported(),
     * java.lang.management.ThreadMXBean.
     * isThreadCpuTimeEnabled(),
     * java.lang.management.ThreadMXBean.
     * setThreadCpuTimeEnabled()
     * "
     *
     */
    protected EnumJvmThreadCpuTimeMonitoring JvmThreadCpuTimeMonitoring = new EnumJvmThreadCpuTimeMonitoring();

    /**
     * Variable for storing the value of "JvmThreadContentionMonitoring".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.5".
     *
     * "The state of the Thread Contention Monitoring feature.
     * This feature can be:
     * 
     * unsupported: The JVM does not support Thread Contention Monitoring.
     * enabled    : The JVM supports Thread Contention Monitoring, and it
     * is enabled.
     * disabled   : The JVM supports Thread Contention Monitoring, and it
     * is disabled.
     * 
     * Only enabled(3) and disabled(4) may be supplied as values to a
     * SET request. unsupported(1) can only be set internally by the
     * agent.
     * 
     * When the feature is unsupported(1), any attempt to change
     * that value will fail: trying to set this object to
     * enabled(3) or disabled(4) will result in an `inconsistentValue'
     * error. Trying to set it to any other value will result in an
     * `wrongValue' error.
     * 
     * See java.lang.management.ThreadMXBean.
     * isThreadContentionMonitoringSupported(),
     * java.lang.management.ThreadMXBean.
     * isThreadContentionMonitoringEnabled(),
     * java.lang.management.ThreadMXBean.
     * setThreadContentionMonitoringEnabled()
     * "
     *
     */
    protected EnumJvmThreadContentionMonitoring JvmThreadContentionMonitoring = new EnumJvmThreadContentionMonitoring();

    /**
     * Variable for storing the value of "JvmThreadTotalStartedCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.4".
     *
     * "The total number of threads created and started since the Java
     * Virtual Machine started.
     * 
     * See java.lang.management.ThreadMXBean.getTotalStartedThreadCount()
     * "
     *
     */
    protected Long JvmThreadTotalStartedCount = new Long(1);

    /**
     * Variable for storing the value of "JvmThreadPeakCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.3".
     *
     * "The peak thread count since the execution of the application.
     * 
     * See java.lang.management.ThreadMXBean.getPeakThreadCount()
     * "
     *
     */
    protected Long JvmThreadPeakCount = new Long(1);

    /**
     * Variable for storing the value of "JvmThreadDaemonCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.2".
     *
     * "The current number of daemon threads.
     * 
     * See java.lang.management.ThreadMXBean.getDaemonThreadCount()
     * "
     *
     */
    protected Long JvmThreadDaemonCount = new Long(1);

    /**
     * Variable for storing the value of "JvmThreadCount".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.1".
     *
     * "The current number of live threads.
     * 
     * See java.lang.management.ThreadMXBean.getThreadCount()
     * "
     *
     */
    protected Long JvmThreadCount = new Long(1);

    /**
     * Variable for storing the value of "JvmThreadInstanceTable".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.10".
     *
     * "The Thread Instance Table is built from all the methods of
     * ThreadMXBean that take a ThreadID as parameter.
     * 
     * See java.lang.management.ThreadMXBean.getAllThreadIds()
     * "
     *
     */
    protected TableJvmThreadInstanceTable JvmThreadInstanceTable;

    /**
     * Variable for storing the value of "JvmThreadPeakCountReset".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.3.7".
     *
     * "
     * This object indicates the last time - in milliseconds - at which
     * the peak thread count was reset to the current thread count.
     * This corresponds to a time stamp as returned by
     * java.lang.System.currentTimeMillis().
     * 
     * Setting this object to a time earlier than its current time value
     * has no effect. Setting this object to a time later than its current
     * time value causes the peak thread count statistic to be reset to
     * the current thread count. The new value of this object will be
     * the time at which the reset operation is triggered.
     * 
     * There could be a delay between the time at which the reset operation
     * is triggered and the time at which the actual resetting happens, so
     * this value is only indicative.
     * 
     * See java.lang.management.ThreadMXBean.resetPeakThreadCount()
     * "
     *
     */
    protected Long JvmThreadPeakCountReset = new Long(1);


    /**
     * Constructor for the "JvmThreading" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public JvmThreading(SnmpMib myMib) {
        JvmThreadInstanceTable = new TableJvmThreadInstanceTable (myMib);
    }


    /**
     * Constructor for the "JvmThreading" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public JvmThreading(SnmpMib myMib, MBeanServer server) {
        JvmThreadInstanceTable = new TableJvmThreadInstanceTable (myMib, server);
    }

    /**
     * Getter for the "JvmThreadCpuTimeMonitoring" variable.
     */
    public EnumJvmThreadCpuTimeMonitoring getJvmThreadCpuTimeMonitoring() throws SnmpStatusException {
        return JvmThreadCpuTimeMonitoring;
    }

    /**
     * Setter for the "JvmThreadCpuTimeMonitoring" variable.
     */
    public void setJvmThreadCpuTimeMonitoring(EnumJvmThreadCpuTimeMonitoring x) throws SnmpStatusException {
        JvmThreadCpuTimeMonitoring = x;
    }

    /**
     * Checker for the "JvmThreadCpuTimeMonitoring" variable.
     */
    public void checkJvmThreadCpuTimeMonitoring(EnumJvmThreadCpuTimeMonitoring x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "JvmThreadContentionMonitoring" variable.
     */
    public EnumJvmThreadContentionMonitoring getJvmThreadContentionMonitoring() throws SnmpStatusException {
        return JvmThreadContentionMonitoring;
    }

    /**
     * Setter for the "JvmThreadContentionMonitoring" variable.
     */
    public void setJvmThreadContentionMonitoring(EnumJvmThreadContentionMonitoring x) throws SnmpStatusException {
        JvmThreadContentionMonitoring = x;
    }

    /**
     * Checker for the "JvmThreadContentionMonitoring" variable.
     */
    public void checkJvmThreadContentionMonitoring(EnumJvmThreadContentionMonitoring x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "JvmThreadTotalStartedCount" variable.
     */
    public Long getJvmThreadTotalStartedCount() throws SnmpStatusException {
        return JvmThreadTotalStartedCount;
    }

    /**
     * Getter for the "JvmThreadPeakCount" variable.
     */
    public Long getJvmThreadPeakCount() throws SnmpStatusException {
        return JvmThreadPeakCount;
    }

    /**
     * Getter for the "JvmThreadDaemonCount" variable.
     */
    public Long getJvmThreadDaemonCount() throws SnmpStatusException {
        return JvmThreadDaemonCount;
    }

    /**
     * Getter for the "JvmThreadCount" variable.
     */
    public Long getJvmThreadCount() throws SnmpStatusException {
        return JvmThreadCount;
    }

    /**
     * Access the "JvmThreadInstanceTable" variable.
     */
    public TableJvmThreadInstanceTable accessJvmThreadInstanceTable() throws SnmpStatusException {
        return JvmThreadInstanceTable;
    }

    /**
     * Access the "JvmThreadInstanceTable" variable as a bean indexed property.
     */
    public JvmThreadInstanceEntryMBean[] getJvmThreadInstanceTable() throws SnmpStatusException {
        return JvmThreadInstanceTable.getEntries();
    }

    /**
     * Getter for the "JvmThreadPeakCountReset" variable.
     */
    public Long getJvmThreadPeakCountReset() throws SnmpStatusException {
        return JvmThreadPeakCountReset;
    }

    /**
     * Setter for the "JvmThreadPeakCountReset" variable.
     */
    public void setJvmThreadPeakCountReset(Long x) throws SnmpStatusException {
        JvmThreadPeakCountReset = x;
    }

    /**
     * Checker for the "JvmThreadPeakCountReset" variable.
     */
    public void checkJvmThreadPeakCountReset(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

}
