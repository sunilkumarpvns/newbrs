package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB in standard metadata mode.
//


// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

/**
 * This interface is used for representing the remote management interface for the "Ip" MBean.
 */
public interface IpMBean {

    /**
     * Getter for the "IpFragCreates" variable.
     */
    public Long getIpFragCreates() throws SnmpStatusException;

    /**
     * Getter for the "IpFragFails" variable.
     */
    public Long getIpFragFails() throws SnmpStatusException;

    /**
     * Getter for the "IpFragOKs" variable.
     */
    public Long getIpFragOKs() throws SnmpStatusException;

    /**
     * Getter for the "IpReasmFails" variable.
     */
    public Long getIpReasmFails() throws SnmpStatusException;

    /**
     * Getter for the "IpReasmOKs" variable.
     */
    public Long getIpReasmOKs() throws SnmpStatusException;

    /**
     * Getter for the "IpReasmReqds" variable.
     */
    public Long getIpReasmReqds() throws SnmpStatusException;

    /**
     * Getter for the "IpReasmTimeout" variable.
     */
    public Integer getIpReasmTimeout() throws SnmpStatusException;

    /**
     * Getter for the "IpOutNoRoutes" variable.
     */
    public Long getIpOutNoRoutes() throws SnmpStatusException;

    /**
     * Getter for the "IpOutDiscards" variable.
     */
    public Long getIpOutDiscards() throws SnmpStatusException;

    /**
     * Getter for the "IpOutRequests" variable.
     */
    public Long getIpOutRequests() throws SnmpStatusException;

    /**
     * Getter for the "IpInDelivers" variable.
     */
    public Long getIpInDelivers() throws SnmpStatusException;

    /**
     * Getter for the "IpInDiscards" variable.
     */
    public Long getIpInDiscards() throws SnmpStatusException;

    /**
     * Getter for the "IpInUnknownProtos" variable.
     */
    public Long getIpInUnknownProtos() throws SnmpStatusException;

    /**
     * Getter for the "IpForwDatagrams" variable.
     */
    public Long getIpForwDatagrams() throws SnmpStatusException;

    /**
     * Getter for the "IpInAddrErrors" variable.
     */
    public Long getIpInAddrErrors() throws SnmpStatusException;

    /**
     * Getter for the "IpInHdrErrors" variable.
     */
    public Long getIpInHdrErrors() throws SnmpStatusException;

    /**
     * Getter for the "IpInReceives" variable.
     */
    public Long getIpInReceives() throws SnmpStatusException;

    /**
     * Getter for the "IpDefaultTTL" variable.
     */
    public Integer getIpDefaultTTL() throws SnmpStatusException;

    /**
     * Setter for the "IpDefaultTTL" variable.
     */
    public void setIpDefaultTTL(Integer x) throws SnmpStatusException;

    /**
     * Checker for the "IpDefaultTTL" variable.
     */
    public void checkIpDefaultTTL(Integer x) throws SnmpStatusException;

    /**
     * Getter for the "IpRoutingDiscards" variable.
     */
    public Long getIpRoutingDiscards() throws SnmpStatusException;

    /**
     * Getter for the "IpForwarding" variable.
     */
    public EnumIpForwarding getIpForwarding() throws SnmpStatusException;

    /**
     * Setter for the "IpForwarding" variable.
     */
    public void setIpForwarding(EnumIpForwarding x) throws SnmpStatusException;

    /**
     * Checker for the "IpForwarding" variable.
     */
    public void checkIpForwarding(EnumIpForwarding x) throws SnmpStatusException;

    /**
     * Access the "IpNetToMediaTable" variable.
     */
    public TableIpNetToMediaTable accessIpNetToMediaTable() throws SnmpStatusException;

    /**
     * Access the "IpRouteTable" variable.
     */
    public TableIpRouteTable accessIpRouteTable() throws SnmpStatusException;

    /**
     * Access the "IpAddrTable" variable.
     */
    public TableIpAddrTable accessIpAddrTable() throws SnmpStatusException;

}
