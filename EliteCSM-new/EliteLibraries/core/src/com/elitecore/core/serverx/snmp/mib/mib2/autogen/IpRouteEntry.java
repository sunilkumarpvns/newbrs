package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "IpRouteEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.4.21.1.
 */
public class IpRouteEntry implements IpRouteEntryMBean, Serializable {

    /**
     * Variable for storing the value of "IpRouteProto".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.9".
     *
     * "The routing mechanism via which this route was
     * learned.  Inclusion of values for gateway routing
     * protocols is not intended to imply that hosts
     * should support those protocols."
     *
     */
    protected EnumIpRouteProto IpRouteProto = new EnumIpRouteProto();

    /**
     * Variable for storing the value of "IpRouteType".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.8".
     *
     * "The type of route.  Note that the values
     * direct(3) and indirect(4) refer to the notion of
     * direct and indirect routing in the IP
     * architecture.
     * 
     * Setting this object to the value invalid(2) has
     * the effect of invalidating the corresponding entry
     * in the ipRouteTable object.  That is, it
     * effectively dissasociates the destination
     * identified with said entry from the route
     * identified with said entry.  It is an
     * implementation-specific matter as to whether the
     * agent removes an invalidated entry from the table.
     * Accordingly, management stations must be prepared
     * to receive tabular information from agents that
     * corresponds to entries not currently in use.
     * Proper interpretation of such entries requires
     * examination of the relevant ipRouteType object."
     *
     */
    protected EnumIpRouteType IpRouteType = new EnumIpRouteType();

    /**
     * Variable for storing the value of "IpRouteNextHop".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.7".
     *
     * "The IP address of the next hop of this route.
     * (In the case of a route bound to an interface
     * which is realized via a broadcast media, the value
     * of this field is the agent's IP address on that
     * interface.)"
     *
     */
    protected String IpRouteNextHop = new String("192.9.9.100");

    /**
     * Variable for storing the value of "IpRouteMetric4".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.6".
     *
     * "An alternate routing metric for this route.  The
     * semantics of this metric are determined by the
     * routing-protocol specified in the route's
     * ipRouteProto value.  If this metric is not used,
     * its value should be set to -1."
     *
     */
    protected Integer IpRouteMetric4 = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteMetric3".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.5".
     *
     * "An alternate routing metric for this route.  The
     * semantics of this metric are determined by the
     * routing-protocol specified in the route's
     * ipRouteProto value.  If this metric is not used,
     * its value should be set to -1."
     *
     */
    protected Integer IpRouteMetric3 = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteMetric2".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.4".
     *
     * "An alternate routing metric for this route.  The
     * semantics of this metric are determined by the
     * routing-protocol specified in the route's
     * ipRouteProto value.  If this metric is not used,
     * its value should be set to -1."
     *
     */
    protected Integer IpRouteMetric2 = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteInfo".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.13".
     *
     * "A reference to MIB definitions specific to the
     * particular routing protocol which is responsible
     * for this route, as determined by the value
     * specified in the route's ipRouteProto value.  If
     * this information is not present, its value should
     * be set to the OBJECT IDENTIFIER { 0 0 }, which is
     * a syntatically valid object identifier, and any
     * conformant implementation of ASN.1 and BER must be
     * able to generate and recognize this value."
     *
     */
    protected String IpRouteInfo = new String("1.3.6.1.4.1.42");

    /**
     * Variable for storing the value of "IpRouteMetric1".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.3".
     *
     * "The primary routing metric for this route.  The
     * semantics of this metric are determined by the
     * routing-protocol specified in the route's
     * ipRouteProto value.  If this metric is not used,
     * its value should be set to -1."
     *
     */
    protected Integer IpRouteMetric1 = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteMetric5".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.12".
     *
     * "An alternate routing metric for this route.  The
     * semantics of this metric are determined by the
     * routing-protocol specified in the route's
     * ipRouteProto value.  If this metric is not used,
     * its value should be set to -1."
     *
     */
    protected Integer IpRouteMetric5 = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteIfIndex".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.2".
     *
     * "The index value which uniquely identifies the
     * local interface through which the next hop of this
     * route should be reached.  The interface identified
     * by a particular value of this index is the same
     * interface as identified by the same value of
     * ifIndex."
     *
     */
    protected Integer IpRouteIfIndex = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteMask".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.11".
     *
     * "Indicate the mask to be logical-ANDed with the
     * destination address before being compared to the
     * value in the ipRouteDest field.  For those systems
     * that do not support arbitrary subnet masks, an
     * agent constructs the value of the ipRouteMask by
     * determining whether the value of the correspondent
     * ipRouteDest field belong to a class-A, B, or C
     * network, and then using one of:
     * 
     * mask           network
     * 255.0.0.0      class-A
     * 255.255.0.0    class-B
     * 255.255.255.0  class-C
     * If the value of the ipRouteDest is 0.0.0.0 (a
     * default route), then the mask value is also
     * 0.0.0.0.  It should be noted that all IP routing
     * subsystems implicitly use this mechanism."
     *
     */
    protected String IpRouteMask = new String("192.9.9.100");

    /**
     * Variable for storing the value of "IpRouteAge".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.10".
     *
     * "The number of seconds since this route was last
     * updated or otherwise determined to be correct.
     * Note that no semantics of `too old' can be implied
     * except through knowledge of the routing protocol
     * by which the route was learned."
     *
     */
    protected Integer IpRouteAge = new Integer(1);

    /**
     * Variable for storing the value of "IpRouteDest".
     * The variable is identified by: "1.3.6.1.2.1.4.21.1.1".
     *
     * "The destination IP address of this route.  An
     * entry with a value of 0.0.0.0 is considered a
     * default route.  Multiple routes to a single
     * destination can appear in the table, but access to
     * such multiple entries is dependent on the table-
     * access mechanisms defined by the network
     * management protocol in use."
     *
     */
    protected String IpRouteDest = new String("192.9.9.100");


    /**
     * Constructor for the "IpRouteEntry" group.
     */
    public IpRouteEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "IpRouteProto" variable.
     */
    public EnumIpRouteProto getIpRouteProto() throws SnmpStatusException {
        return IpRouteProto;
    }

    /**
     * Getter for the "IpRouteType" variable.
     */
    public EnumIpRouteType getIpRouteType() throws SnmpStatusException {
        return IpRouteType;
    }

    /**
     * Setter for the "IpRouteType" variable.
     */
    public void setIpRouteType(EnumIpRouteType x) throws SnmpStatusException {
        IpRouteType = x;
    }

    /**
     * Checker for the "IpRouteType" variable.
     */
    public void checkIpRouteType(EnumIpRouteType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteNextHop" variable.
     */
    public String getIpRouteNextHop() throws SnmpStatusException {
        return IpRouteNextHop;
    }

    /**
     * Setter for the "IpRouteNextHop" variable.
     */
    public void setIpRouteNextHop(String x) throws SnmpStatusException {
        IpRouteNextHop = x;
    }

    /**
     * Checker for the "IpRouteNextHop" variable.
     */
    public void checkIpRouteNextHop(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteMetric4" variable.
     */
    public Integer getIpRouteMetric4() throws SnmpStatusException {
        return IpRouteMetric4;
    }

    /**
     * Setter for the "IpRouteMetric4" variable.
     */
    public void setIpRouteMetric4(Integer x) throws SnmpStatusException {
        IpRouteMetric4 = x;
    }

    /**
     * Checker for the "IpRouteMetric4" variable.
     */
    public void checkIpRouteMetric4(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteMetric3" variable.
     */
    public Integer getIpRouteMetric3() throws SnmpStatusException {
        return IpRouteMetric3;
    }

    /**
     * Setter for the "IpRouteMetric3" variable.
     */
    public void setIpRouteMetric3(Integer x) throws SnmpStatusException {
        IpRouteMetric3 = x;
    }

    /**
     * Checker for the "IpRouteMetric3" variable.
     */
    public void checkIpRouteMetric3(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteMetric2" variable.
     */
    public Integer getIpRouteMetric2() throws SnmpStatusException {
        return IpRouteMetric2;
    }

    /**
     * Setter for the "IpRouteMetric2" variable.
     */
    public void setIpRouteMetric2(Integer x) throws SnmpStatusException {
        IpRouteMetric2 = x;
    }

    /**
     * Checker for the "IpRouteMetric2" variable.
     */
    public void checkIpRouteMetric2(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteInfo" variable.
     */
    public String getIpRouteInfo() throws SnmpStatusException {
        return IpRouteInfo;
    }

    /**
     * Getter for the "IpRouteMetric1" variable.
     */
    public Integer getIpRouteMetric1() throws SnmpStatusException {
        return IpRouteMetric1;
    }

    /**
     * Setter for the "IpRouteMetric1" variable.
     */
    public void setIpRouteMetric1(Integer x) throws SnmpStatusException {
        IpRouteMetric1 = x;
    }

    /**
     * Checker for the "IpRouteMetric1" variable.
     */
    public void checkIpRouteMetric1(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteMetric5" variable.
     */
    public Integer getIpRouteMetric5() throws SnmpStatusException {
        return IpRouteMetric5;
    }

    /**
     * Setter for the "IpRouteMetric5" variable.
     */
    public void setIpRouteMetric5(Integer x) throws SnmpStatusException {
        IpRouteMetric5 = x;
    }

    /**
     * Checker for the "IpRouteMetric5" variable.
     */
    public void checkIpRouteMetric5(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteIfIndex" variable.
     */
    public Integer getIpRouteIfIndex() throws SnmpStatusException {
        return IpRouteIfIndex;
    }

    /**
     * Setter for the "IpRouteIfIndex" variable.
     */
    public void setIpRouteIfIndex(Integer x) throws SnmpStatusException {
        IpRouteIfIndex = x;
    }

    /**
     * Checker for the "IpRouteIfIndex" variable.
     */
    public void checkIpRouteIfIndex(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteMask" variable.
     */
    public String getIpRouteMask() throws SnmpStatusException {
        return IpRouteMask;
    }

    /**
     * Setter for the "IpRouteMask" variable.
     */
    public void setIpRouteMask(String x) throws SnmpStatusException {
        IpRouteMask = x;
    }

    /**
     * Checker for the "IpRouteMask" variable.
     */
    public void checkIpRouteMask(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteAge" variable.
     */
    public Integer getIpRouteAge() throws SnmpStatusException {
        return IpRouteAge;
    }

    /**
     * Setter for the "IpRouteAge" variable.
     */
    public void setIpRouteAge(Integer x) throws SnmpStatusException {
        IpRouteAge = x;
    }

    /**
     * Checker for the "IpRouteAge" variable.
     */
    public void checkIpRouteAge(Integer x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "IpRouteDest" variable.
     */
    public String getIpRouteDest() throws SnmpStatusException {
        return IpRouteDest;
    }

    /**
     * Setter for the "IpRouteDest" variable.
     */
    public void setIpRouteDest(String x) throws SnmpStatusException {
        IpRouteDest = x;
    }

    /**
     * Checker for the "IpRouteDest" variable.
     */
    public void checkIpRouteDest(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

}
