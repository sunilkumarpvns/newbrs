package com.elitecore.core.serverx.snmp.mib.mib2.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RFC1213-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;

/**
 * The class is used for representing SNMP metadata for the "Snmp" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.11.
 */
public class SnmpMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "Snmp".
     */
    public SnmpMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(30);
            registerObject(19);
            registerObject(18);
            registerObject(17);
            registerObject(16);
            registerObject(15);
            registerObject(14);
            registerObject(13);
            registerObject(12);
            registerObject(11);
            registerObject(10);
            registerObject(9);
            registerObject(29);
            registerObject(8);
            registerObject(28);
            registerObject(6);
            registerObject(27);
            registerObject(5);
            registerObject(26);
            registerObject(4);
            registerObject(25);
            registerObject(3);
            registerObject(24);
            registerObject(2);
            registerObject(1);
            registerObject(22);
            registerObject(21);
            registerObject(20);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 30:
                return new SnmpInt(node.getSnmpEnableAuthenTraps());

            case 19:
                return new SnmpCounter(node.getSnmpInTraps());

            case 18:
                return new SnmpCounter(node.getSnmpInGetResponses());

            case 17:
                return new SnmpCounter(node.getSnmpInSetRequests());

            case 16:
                return new SnmpCounter(node.getSnmpInGetNexts());

            case 15:
                return new SnmpCounter(node.getSnmpInGetRequests());

            case 14:
                return new SnmpCounter(node.getSnmpInTotalSetVars());

            case 13:
                return new SnmpCounter(node.getSnmpInTotalReqVars());

            case 12:
                return new SnmpCounter(node.getSnmpInGenErrs());

            case 11:
                return new SnmpCounter(node.getSnmpInReadOnlys());

            case 10:
                return new SnmpCounter(node.getSnmpInBadValues());

            case 9:
                return new SnmpCounter(node.getSnmpInNoSuchNames());

            case 29:
                return new SnmpCounter(node.getSnmpOutTraps());

            case 8:
                return new SnmpCounter(node.getSnmpInTooBigs());

            case 28:
                return new SnmpCounter(node.getSnmpOutGetResponses());

            case 6:
                return new SnmpCounter(node.getSnmpInASNParseErrs());

            case 27:
                return new SnmpCounter(node.getSnmpOutSetRequests());

            case 5:
                return new SnmpCounter(node.getSnmpInBadCommunityUses());

            case 26:
                return new SnmpCounter(node.getSnmpOutGetNexts());

            case 4:
                return new SnmpCounter(node.getSnmpInBadCommunityNames());

            case 25:
                return new SnmpCounter(node.getSnmpOutGetRequests());

            case 3:
                return new SnmpCounter(node.getSnmpInBadVersions());

            case 24:
                return new SnmpCounter(node.getSnmpOutGenErrs());

            case 2:
                return new SnmpCounter(node.getSnmpOutPkts());

            case 1:
                return new SnmpCounter(node.getSnmpInPkts());

            case 22:
                return new SnmpCounter(node.getSnmpOutBadValues());

            case 21:
                return new SnmpCounter(node.getSnmpOutNoSuchNames());

            case 20:
                return new SnmpCounter(node.getSnmpOutTooBigs());

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 30:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setSnmpEnableAuthenTraps( new EnumSnmpEnableAuthenTraps (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getSnmpEnableAuthenTraps());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 29:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 28:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 20:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 30:
                if (x instanceof SnmpInt) {
                    try  {
                        node.checkSnmpEnableAuthenTraps( new EnumSnmpEnableAuthenTraps (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 29:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 28:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 20:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(SnmpMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 30:
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 29:
            case 8:
            case 28:
            case 6:
            case 27:
            case 5:
            case 26:
            case 4:
            case 25:
            case 3:
            case 24:
            case 2:
            case 1:
            case 22:
            case 21:
            case 20:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 30:
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 29:
            case 8:
            case 28:
            case 6:
            case 27:
            case 5:
            case 26:
            case 4:
            case 25:
            case 3:
            case 24:
            case 2:
            case 1:
            case 22:
            case 21:
            case 20:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 30:
                return "SnmpEnableAuthenTraps";

            case 19:
                return "SnmpInTraps";

            case 18:
                return "SnmpInGetResponses";

            case 17:
                return "SnmpInSetRequests";

            case 16:
                return "SnmpInGetNexts";

            case 15:
                return "SnmpInGetRequests";

            case 14:
                return "SnmpInTotalSetVars";

            case 13:
                return "SnmpInTotalReqVars";

            case 12:
                return "SnmpInGenErrs";

            case 11:
                return "SnmpInReadOnlys";

            case 10:
                return "SnmpInBadValues";

            case 9:
                return "SnmpInNoSuchNames";

            case 29:
                return "SnmpOutTraps";

            case 8:
                return "SnmpInTooBigs";

            case 28:
                return "SnmpOutGetResponses";

            case 6:
                return "SnmpInASNParseErrs";

            case 27:
                return "SnmpOutSetRequests";

            case 5:
                return "SnmpInBadCommunityUses";

            case 26:
                return "SnmpOutGetNexts";

            case 4:
                return "SnmpInBadCommunityNames";

            case 25:
                return "SnmpOutGetRequests";

            case 3:
                return "SnmpInBadVersions";

            case 24:
                return "SnmpOutGenErrs";

            case 2:
                return "SnmpOutPkts";

            case 1:
                return "SnmpInPkts";

            case 22:
                return "SnmpOutBadValues";

            case 21:
                return "SnmpOutNoSuchNames";

            case 20:
                return "SnmpOutTooBigs";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
    }

    protected SnmpMBean node;
    protected SnmpStandardObjectServer objectserver = null;
}
