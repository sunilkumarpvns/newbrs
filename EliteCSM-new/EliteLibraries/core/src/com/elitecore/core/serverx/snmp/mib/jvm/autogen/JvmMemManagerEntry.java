package com.elitecore.core.serverx.snmp.mib.jvm.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling JVM-MANAGEMENT-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "JvmMemManagerEntry" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.42.2.145.3.163.1.1.2.100.1.
 */
public class JvmMemManagerEntry implements JvmMemManagerEntryMBean, Serializable {

    /**
     * Variable for storing the value of "JvmMemManagerState".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.100.1.3".
     *
     * "
     * Indicates whether this memory manager is valid in the Java
     * virtual machine. A memory manager becomes invalid once the
     * Java virtual machine removes it from the memory system.
     * 
     * See java.lang.management.MemoryManagerMXBean.isValid()
     * "
     *
     */
    protected EnumJvmMemManagerState JvmMemManagerState = new EnumJvmMemManagerState();

    /**
     * Variable for storing the value of "JvmMemManagerName".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.100.1.2".
     *
     * "The name of this memory manager, as returned by
     * MemoryManagerMXBean.getName().
     * 
     * See java.mangement.MemoryManagerMXBean.getName().
     * "
     *
     */
    protected Byte[] JvmMemManagerName = { new Byte("74"), new Byte("68"), new Byte("77"), new Byte("75")};

    /**
     * Variable for storing the value of "JvmMemManagerIndex".
     * The variable is identified by: "1.3.6.1.4.1.42.2.145.3.163.1.1.2.100.1.1".
     *
     * "An index opaquely computed by the agent and which uniquely
     * identifies a Memory Manager.
     * 
     * The jvmMemManagerIndex index is opaquely computed by the agent,
     * from e.g the hash code of the MemoryManager (or MemoryManager name).
     * The agent is responsible for allocating a free index when it needs
     * one (e.g. if two objects have the same hash, then it may increment
     * one of the values until the conflict is resolved). As a result a
     * manager must not depend on the value of that index across,
     * e.g. reboot of the agent, as this value is not guaranteed to
     * stay identical after the agent restarts.
     * "
     *
     */
    protected Integer JvmMemManagerIndex = new Integer(1);


    /**
     * Constructor for the "JvmMemManagerEntry" group.
     */
    public JvmMemManagerEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "JvmMemManagerState" variable.
     */
    public EnumJvmMemManagerState getJvmMemManagerState() throws SnmpStatusException {
        return JvmMemManagerState;
    }

    /**
     * Getter for the "JvmMemManagerName" variable.
     */
    public Byte[] getJvmMemManagerName() throws SnmpStatusException {
        return JvmMemManagerName;
    }

    /**
     * Getter for the "JvmMemManagerIndex" variable.
     */
    public Integer getJvmMemManagerIndex() throws SnmpStatusException {
        return JvmMemManagerIndex;
    }

}
