package com.elitecore.core.serverx.snmp.mib.os.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling UCD-SNMP-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.EnumRowStatus;
import com.sun.management.snmp.SnmpDefinitions;

/**
 * The class is used for representing SNMP metadata for the "SystemStats" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.2021.11.
 */
public class SystemStatsMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "SystemStats".
     */
    public SystemStatsMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(50);
            registerObject(66);
            registerObject(65);
            registerObject(64);
            registerObject(63);
            registerObject(62);
            registerObject(61);
            registerObject(60);
            registerObject(11);
            registerObject(10);
            registerObject(9);
            registerObject(8);
            registerObject(7);
            registerObject(59);
            registerObject(58);
            registerObject(6);
            registerObject(57);
            registerObject(5);
            registerObject(4);
            registerObject(56);
            registerObject(3);
            registerObject(55);
            registerObject(2);
            registerObject(54);
            registerObject(1);
            registerObject(53);
            registerObject(52);
            registerObject(51);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 50:
                return new SnmpCounter(node.getSsCpuRawUser());

            case 66:
                return new SnmpCounter(node.getSsCpuRawGuestNice());

            case 65:
                return new SnmpCounter(node.getSsCpuRawGuest());

            case 64:
                return new SnmpCounter(node.getSsCpuRawSteal());

            case 63:
                return new SnmpCounter(node.getSsRawSwapOut());

            case 62:
                return new SnmpCounter(node.getSsRawSwapIn());

            case 61:
                return new SnmpCounter(node.getSsCpuRawSoftIRQ());

            case 60:
                return new SnmpCounter(node.getSsRawContexts());

            case 11:
                return new SnmpInt(node.getSsCpuIdle());

            case 10:
                return new SnmpInt(node.getSsCpuSystem());

            case 9:
                return new SnmpInt(node.getSsCpuUser());

            case 8:
                return new SnmpInt(node.getSsSysContext());

            case 7:
                return new SnmpInt(node.getSsSysInterrupts());

            case 59:
                return new SnmpCounter(node.getSsRawInterrupts());

            case 58:
                return new SnmpCounter(node.getSsIORawReceived());

            case 6:
                return new SnmpInt(node.getSsIOReceive());

            case 57:
                return new SnmpCounter(node.getSsIORawSent());

            case 5:
                return new SnmpInt(node.getSsIOSent());

            case 4:
                return new SnmpInt(node.getSsSwapOut());

            case 56:
                return new SnmpCounter(node.getSsCpuRawInterrupt());

            case 3:
                return new SnmpInt(node.getSsSwapIn());

            case 55:
                return new SnmpCounter(node.getSsCpuRawKernel());

            case 2:
                return new SnmpString(node.getSsErrorName());

            case 54:
                return new SnmpCounter(node.getSsCpuRawWait());

            case 1:
                return new SnmpInt(node.getSsIndex());

            case 53:
                return new SnmpCounter(node.getSsCpuRawIdle());

            case 52:
                return new SnmpCounter(node.getSsCpuRawSystem());

            case 51:
                return new SnmpCounter(node.getSsCpuRawNice());

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 50:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 66:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 65:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 64:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 63:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 62:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 61:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 60:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 59:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 58:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 57:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 56:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 55:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 54:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 53:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 52:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 51:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 50:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 66:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 65:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 64:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 63:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 62:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 61:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 60:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 59:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 58:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 57:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 56:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 55:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 54:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 53:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 52:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 51:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(SystemStatsMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 50:
            case 66:
            case 65:
            case 64:
            case 63:
            case 62:
            case 61:
            case 60:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 59:
            case 58:
            case 6:
            case 57:
            case 5:
            case 4:
            case 56:
            case 3:
            case 55:
            case 2:
            case 54:
            case 1:
            case 53:
            case 52:
            case 51:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 50:
            case 66:
            case 65:
            case 64:
            case 63:
            case 62:
            case 61:
            case 60:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 59:
            case 58:
            case 6:
            case 57:
            case 5:
            case 4:
            case 56:
            case 3:
            case 55:
            case 2:
            case 54:
            case 1:
            case 53:
            case 52:
            case 51:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 50:
                return "SsCpuRawUser";

            case 66:
                return "SsCpuRawGuestNice";

            case 65:
                return "SsCpuRawGuest";

            case 64:
                return "SsCpuRawSteal";

            case 63:
                return "SsRawSwapOut";

            case 62:
                return "SsRawSwapIn";

            case 61:
                return "SsCpuRawSoftIRQ";

            case 60:
                return "SsRawContexts";

            case 11:
                return "SsCpuIdle";

            case 10:
                return "SsCpuSystem";

            case 9:
                return "SsCpuUser";

            case 8:
                return "SsSysContext";

            case 7:
                return "SsSysInterrupts";

            case 59:
                return "SsRawInterrupts";

            case 58:
                return "SsIORawReceived";

            case 6:
                return "SsIOReceive";

            case 57:
                return "SsIORawSent";

            case 5:
                return "SsIOSent";

            case 4:
                return "SsSwapOut";

            case 56:
                return "SsCpuRawInterrupt";

            case 3:
                return "SsSwapIn";

            case 55:
                return "SsCpuRawKernel";

            case 2:
                return "SsErrorName";

            case 54:
                return "SsCpuRawWait";

            case 1:
                return "SsIndex";

            case 53:
                return "SsCpuRawIdle";

            case 52:
                return "SsCpuRawSystem";

            case 51:
                return "SsCpuRawNice";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
    }

    protected SystemStatsMBean node;
    protected SnmpStandardObjectServer objectserver = null;
}
