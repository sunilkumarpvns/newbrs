package com.elitecore.core.driverx.cdr;

import com.elitecore.core.commons.drivers.DriverInitializationFailedException;
import com.elitecore.core.commons.drivers.DriverProcessFailedException;
import com.elitecore.core.systemx.esix.ESCommunicator;

public interface CDRDriver<T> extends ESCommunicator {
	
	
	public void init() throws DriverInitializationFailedException;
	
	/**
	 * 
	 * @param request
	 * @throws DriverProcessFailedException
	 */
	public void handleRequest(T request) throws DriverProcessFailedException;

	/*
	 * Currently both implementation is preserve, which is UUID and ID.
	 */
	
	/**
	 * <p>This method returns the Driver-Instance-Id which is UUID</p>
	 * 
	 * <b>NOTE:</b> Deprecate <code>{@link #getDriverInstanceId()}</code> with <code>{@link #getDriverInstanceUUID()}</code>
	 * When application supports the UUID base ID generation.
	 * 
	 * @return UUID as a value
	 */
	public String getDriverInstanceUUID();
	
	/**
	 * This method return the Driver-Instance-Id which is generated by sequence
	 * @return driverInstanceId
	 */
	public default String getDriverInstanceId() {
		return getDriverInstanceUUID();
	}
	
	/**
	 * This method return the driverTypeId
	 * @return driverTypeId
	 */
	public int getDriverType();
	
	/**
	 * This method return the name of driver
	 * @return Driver Name 
	 */
	public String getDriverName();
}
