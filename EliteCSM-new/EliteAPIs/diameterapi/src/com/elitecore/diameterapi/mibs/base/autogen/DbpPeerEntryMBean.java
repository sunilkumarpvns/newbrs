package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB in standard metadata mode.
//


// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

/**
 * This interface is used for representing the remote management interface for the "DbpPeerEntry" MBean.
 */
public interface DbpPeerEntryMBean {

    /**
     * Getter for the "DbpPeerRowStatus" variable.
     */
    public EnumDbpPeerRowStatus getDbpPeerRowStatus() throws SnmpStatusException;

    /**
     * Setter for the "DbpPeerRowStatus" variable.
     * NB: There is no check method generated for RowStatus.
     *      Override checkRowStatusChange on SnmpMibTable if needed.
     */
    public void setDbpPeerRowStatus(EnumDbpPeerRowStatus x) throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerStorageType" variable.
     */
    public EnumDbpPeerStorageType getDbpPeerStorageType() throws SnmpStatusException;

    /**
     * Setter for the "DbpPeerStorageType" variable.
     */
    public void setDbpPeerStorageType(EnumDbpPeerStorageType x) throws SnmpStatusException;

    /**
     * Checker for the "DbpPeerStorageType" variable.
     */
    public void checkDbpPeerStorageType(EnumDbpPeerStorageType x) throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerFirmwareRevision" variable.
     */
    public String getDbpPeerFirmwareRevision() throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerSecurity" variable.
     */
    public EnumDbpPeerSecurity getDbpPeerSecurity() throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerTransportProtocol" variable.
     */
    public EnumDbpPeerTransportProtocol getDbpPeerTransportProtocol() throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerPortListen" variable.
     */
    public Long getDbpPeerPortListen() throws SnmpStatusException;

    /**
     * Setter for the "DbpPeerPortListen" variable.
     */
    public void setDbpPeerPortListen(Long x) throws SnmpStatusException;

    /**
     * Checker for the "DbpPeerPortListen" variable.
     */
    public void checkDbpPeerPortListen(Long x) throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerPortConnect" variable.
     */
    public Long getDbpPeerPortConnect() throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerId" variable.
     */
    public String getDbpPeerId() throws SnmpStatusException;

    /**
     * Setter for the "DbpPeerId" variable.
     */
    public void setDbpPeerId(String x) throws SnmpStatusException;

    /**
     * Checker for the "DbpPeerId" variable.
     */
    public void checkDbpPeerId(String x) throws SnmpStatusException;

    /**
     * Getter for the "DbpPeerIndex" variable.
     */
    public Long getDbpPeerIndex() throws SnmpStatusException;

}
