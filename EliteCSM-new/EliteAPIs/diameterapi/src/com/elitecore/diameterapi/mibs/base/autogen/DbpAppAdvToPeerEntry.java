package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DbpAppAdvToPeerEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.1.8.1.
 */
public class DbpAppAdvToPeerEntry implements DbpAppAdvToPeerEntryMBean, Serializable {

	public DbpAppAdvToPeerEntry() {
	}
    /**
     * Variable for storing the value of "DbpAppAdvToPeerRowStatus".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8.1.5".
     *
     * "Status of the entry: creating the entry causes the
     * application to be advertised, destroying the entry
     * ceases advertisement."
     *
     */
    protected EnumDbpAppAdvToPeerRowStatus DbpAppAdvToPeerRowStatus = new EnumDbpAppAdvToPeerRowStatus();

    /**
     * Variable for storing the value of "DbpAppAdvToPeerStorageType".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8.1.4".
     *
     * "The storage type for this conceptual row.
     * None of the objects are writable when the
     * conceptual row is permanent."
     *
     */
    protected EnumDbpAppAdvToPeerStorageType DbpAppAdvToPeerStorageType = new EnumDbpAppAdvToPeerStorageType("nonVolatile");

    /**
     * Variable for storing the value of "DbpAppAdvToPeerServices".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8.1.3".
     *
     * "The type of services supported for each application,
     * accounting, authentication or both."
     *
     */
    protected EnumDbpAppAdvToPeerServices DbpAppAdvToPeerServices = new EnumDbpAppAdvToPeerServices();

    /**
     * Variable for storing the value of "DbpAppAdvToPeerIndex".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8.1.2".
     *
     * "A number uniquely identifying a Diameter
     * application advertised as supported by
     * this host to each peer.  Upon reload,
     * dbpAppAdvToPeerIndex values may be
     * changed"
     *
     */
    protected Long DbpAppAdvToPeerIndex = new Long(1);

    /**
     * Variable for storing the value of "DbpAppAdvToPeerVendorId".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8.1.1".
     *
     * "The IANA Enterprise Code value assigned to
     * the vendor of the Diameter device."
     *
     */
    protected Long DbpAppAdvToPeerVendorId = new Long(1);

    /**
     * Variable for storing the value of "DbpPeerIndex".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.1".
     *
     * "A number uniquely identifying each Diameter peer
     * with which the local peer communicates.
     * Upon reload, dbpPeerIndex values may be changed."
     *
     */
    protected Long DbpPeerIndex = new Long(1);


    /**
     * Constructor for the "DbpAppAdvToPeerEntry" group.
     */
    public DbpAppAdvToPeerEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DbpAppAdvToPeerRowStatus" variable.
     */
    public EnumDbpAppAdvToPeerRowStatus getDbpAppAdvToPeerRowStatus() throws SnmpStatusException {
        return DbpAppAdvToPeerRowStatus;
    }

    /**
     * Setter for the "DbpAppAdvToPeerRowStatus" variable.
     * NB: There is no check method generated for RowStatus.
     *      Override checkRowStatusChange on SnmpMibTable if needed.
     */
    public void setDbpAppAdvToPeerRowStatus(EnumDbpAppAdvToPeerRowStatus x) throws SnmpStatusException {
        DbpAppAdvToPeerRowStatus = x;
    }

    /**
     * Getter for the "DbpAppAdvToPeerStorageType" variable.
     */
    public EnumDbpAppAdvToPeerStorageType getDbpAppAdvToPeerStorageType() throws SnmpStatusException {
        return DbpAppAdvToPeerStorageType;
    }

    /**
     * Setter for the "DbpAppAdvToPeerStorageType" variable.
     */
    public void setDbpAppAdvToPeerStorageType(EnumDbpAppAdvToPeerStorageType x) throws SnmpStatusException {
        DbpAppAdvToPeerStorageType = x;
    }

    /**
     * Checker for the "DbpAppAdvToPeerStorageType" variable.
     */
    public void checkDbpAppAdvToPeerStorageType(EnumDbpAppAdvToPeerStorageType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpAppAdvToPeerServices" variable.
     */
    public EnumDbpAppAdvToPeerServices getDbpAppAdvToPeerServices() throws SnmpStatusException {
        return DbpAppAdvToPeerServices;
    }

    /**
     * Getter for the "DbpAppAdvToPeerIndex" variable.
     */
    public Long getDbpAppAdvToPeerIndex() throws SnmpStatusException {
        return DbpAppAdvToPeerIndex;
    }

    /**
     * Getter for the "DbpAppAdvToPeerVendorId" variable.
     */
    public Long getDbpAppAdvToPeerVendorId() throws SnmpStatusException {
        return DbpAppAdvToPeerVendorId;
    }

    /**
     * Getter for the "DbpPeerIndex" variable.
     */
    public Long getDbpPeerIndex() throws SnmpStatusException {
        return DbpPeerIndex;
    }

}
