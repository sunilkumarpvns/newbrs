package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "DbpPeerCfgs" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.3.
 */
public class DbpPeerCfgs implements DbpPeerCfgsMBean, Serializable {

	public DbpPeerCfgs() {
	}
	
    /**
     * Variable for storing the value of "DbpPeerVendorTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.4".
     *
     * "The table listing the Vendor IDs
     * supported by the peer."
     *
     */
    protected TableDbpPeerVendorTable DbpPeerVendorTable;

    /**
     * Variable for storing the value of "DbpAppAdvFromPeerTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.3".
     *
     * "The table listing the applications advertised by
     * each peer to this host and the types of service
     * supported: accounting, authentication or both."
     *
     */
    protected TableDbpAppAdvFromPeerTable DbpAppAdvFromPeerTable;

    /**
     * Variable for storing the value of "DbpPeerIpAddrTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.2".
     *
     * "The table listing the Diameter
     * peer IP addresses."
     *
     */
    protected TableDbpPeerIpAddrTable DbpPeerIpAddrTable;

    /**
     * Variable for storing the value of "DbpPeerTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1".
     *
     * "The table listing information regarding
     * the discovered or configured Diameter
     * peers."
     *
     */
    protected TableDbpPeerTable DbpPeerTable;


    /**
     * Constructor for the "DbpPeerCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public DbpPeerCfgs(SnmpMib myMib) {
        DbpPeerVendorTable = new TableDbpPeerVendorTable (myMib);
        DbpAppAdvFromPeerTable = new TableDbpAppAdvFromPeerTable (myMib);
        DbpPeerIpAddrTable = new TableDbpPeerIpAddrTable (myMib);
        DbpPeerTable = new TableDbpPeerTable (myMib);
    }


    /**
     * Constructor for the "DbpPeerCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public DbpPeerCfgs(SnmpMib myMib, MBeanServer server) {
        DbpPeerVendorTable = new TableDbpPeerVendorTable (myMib, server);
        DbpAppAdvFromPeerTable = new TableDbpAppAdvFromPeerTable (myMib, server);
        DbpPeerIpAddrTable = new TableDbpPeerIpAddrTable (myMib, server);
        DbpPeerTable = new TableDbpPeerTable (myMib, server);
    }

    /**
     * Access the "DbpPeerVendorTable" variable.
     */
    public TableDbpPeerVendorTable accessDbpPeerVendorTable() throws SnmpStatusException {
        return DbpPeerVendorTable;
    }

    /**
     * Access the "DbpPeerVendorTable" variable as a bean indexed property.
     */
    public DbpPeerVendorEntryMBean[] getDbpPeerVendorTable() throws SnmpStatusException {
        return DbpPeerVendorTable.getEntries();
    }

    /**
     * Access the "DbpAppAdvFromPeerTable" variable.
     */
    public TableDbpAppAdvFromPeerTable accessDbpAppAdvFromPeerTable() throws SnmpStatusException {
        return DbpAppAdvFromPeerTable;
    }

    /**
     * Access the "DbpAppAdvFromPeerTable" variable as a bean indexed property.
     */
    public DbpAppAdvFromPeerEntryMBean[] getDbpAppAdvFromPeerTable() throws SnmpStatusException {
        return DbpAppAdvFromPeerTable.getEntries();
    }

    /**
     * Access the "DbpPeerIpAddrTable" variable.
     */
    public TableDbpPeerIpAddrTable accessDbpPeerIpAddrTable() throws SnmpStatusException {
        return DbpPeerIpAddrTable;
    }

    /**
     * Access the "DbpPeerIpAddrTable" variable as a bean indexed property.
     */
    public DbpPeerIpAddrEntryMBean[] getDbpPeerIpAddrTable() throws SnmpStatusException {
        return DbpPeerIpAddrTable.getEntries();
    }

    /**
     * Access the "DbpPeerTable" variable.
     */
    public TableDbpPeerTable accessDbpPeerTable() throws SnmpStatusException {
        return DbpPeerTable;
    }

    /**
     * Access the "DbpPeerTable" variable as a bean indexed property.
     */
    public DbpPeerEntryMBean[] getDbpPeerTable() throws SnmpStatusException {
        return DbpPeerTable.getEntries();
    }

}
