package com.elitecore.diameterapi.mibs.cc.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-CC-APPLICATION-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "DccaPeerVendorEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.4006.2.1.2.2.1.
 */
public class DccaPeerVendorEntry implements DccaPeerVendorEntryMBean, Serializable {

	public DccaPeerVendorEntry() {
	}
    /**
     * Variable for storing the value of "DccaPeerVendorRowStatus".
     * The variable is identified by: "1.3.6.1.2.1.4006.2.1.2.2.1.4".
     *
     * "The status of this conceptual row.
     * 
     * To create a row in this table, a manager must
     * set this object to either createAndGo(4) or
     * createAndWait(5).
     * 
     * Until instances of all corresponding columns
     * are appropriately configured, the value of the
     * corresponding instance of the
     * dccaPeerVendorRowStatus column is 'notReady'.
     * 
     * In particular, a newly created row cannot be
     * made active until the corresponding
     * dccaPeerVendorId has been set.
     * 
     * dccaPeerVendorId may not be modified while the
     * value of this object is active(1):
     * An attempt to set these objects while the
     * value of dccaPeerVendorRowStatus is active(1)
     * will result in an inconsistentValue error.
     * 
     * Entries in this table with
     * dccaPeerVendorRowStatus equal to
     * active(1) remain in the table until destroyed.
     * 
     * Entries in this table with
     * dccaPeerVendorRowStatus equal to
     * values other than active(1) will be destroyed
     * after timeout (5 minutes).
     * 
     * If the peer vendor id being created via SNMP
     * already exists
     * in another active dccaPeerVendorEntry,
     * then a newly
     * created row cannot be made active until the
     * original row with the peer vendor id value is
     * destroyed.
     * 
     * Upon reload, dccaPeerVendorIndex values may be
     * changed."
     *
     */
    protected EnumDccaPeerVendorRowStatus DccaPeerVendorRowStatus = new EnumDccaPeerVendorRowStatus();

    /**
     * Variable for storing the value of "DccaPeerVendorStorageType".
     * The variable is identified by: "1.3.6.1.2.1.4006.2.1.2.2.1.3".
     *
     * "The storage type for this conceptual row.  An
     * agent implementing the table must allow adding
     * dccaPeerVendorId into the table. None of the
     * columnar objects is writable
     * when the conceptual row is permanent."
     *
     */
    protected EnumDccaPeerVendorStorageType DccaPeerVendorStorageType = new EnumDccaPeerVendorStorageType("nonVolatile");

    /**
     * Variable for storing the value of "DccaPeerVendorId".
     * The variable is identified by: "1.3.6.1.2.1.4006.2.1.2.2.1.2".
     *
     * "The active Vendor IDs used for peer
     * connections."
     *
     */
    protected Long DccaPeerVendorId = new Long(1);

    /**
     * Variable for storing the value of "DccaPeerVendorIndex".
     * The variable is identified by: "1.3.6.1.2.1.4006.2.1.2.2.1.1".
     *
     * "A number uniquely identifying the Vendor
     * ID supported by the peer."
     *
     */
    protected Long DccaPeerVendorIndex = new Long(1);

    /**
     * Variable for storing the value of "DccaPeerIndex".
     * The variable is identified by: "1.3.6.1.2.1.4006.2.1.2.1.1.1".
     *
     * "A number uniquely identifying each Diameter
     * Credit Control peer with which this host
     * communicates."
     *
     */
    protected Long DccaPeerIndex = new Long(1);


    /**
     * Constructor for the "DccaPeerVendorEntry" group.
     */
    public DccaPeerVendorEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DccaPeerVendorRowStatus" variable.
     */
    public EnumDccaPeerVendorRowStatus getDccaPeerVendorRowStatus() throws SnmpStatusException {
        return DccaPeerVendorRowStatus;
    }

    /**
     * Setter for the "DccaPeerVendorRowStatus" variable.
     * NB: There is no check method generated for RowStatus.
     *      Override checkRowStatusChange on SnmpMibTable if needed.
     */
    public void setDccaPeerVendorRowStatus(EnumDccaPeerVendorRowStatus x) throws SnmpStatusException {
        DccaPeerVendorRowStatus = x;
    }

    /**
     * Getter for the "DccaPeerVendorStorageType" variable.
     */
    public EnumDccaPeerVendorStorageType getDccaPeerVendorStorageType() throws SnmpStatusException {
        return DccaPeerVendorStorageType;
    }

    /**
     * Setter for the "DccaPeerVendorStorageType" variable.
     */
    public void setDccaPeerVendorStorageType(EnumDccaPeerVendorStorageType x) throws SnmpStatusException {
        DccaPeerVendorStorageType = x;
    }

    /**
     * Checker for the "DccaPeerVendorStorageType" variable.
     */
    public void checkDccaPeerVendorStorageType(EnumDccaPeerVendorStorageType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DccaPeerVendorId" variable.
     */
    public Long getDccaPeerVendorId() throws SnmpStatusException {
        return DccaPeerVendorId;
    }

    /**
     * Setter for the "DccaPeerVendorId" variable.
     */
    public void setDccaPeerVendorId(Long x) throws SnmpStatusException {
        DccaPeerVendorId = x;
    }

    /**
     * Checker for the "DccaPeerVendorId" variable.
     */
    public void checkDccaPeerVendorId(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DccaPeerVendorIndex" variable.
     */
    public Long getDccaPeerVendorIndex() throws SnmpStatusException {
        return DccaPeerVendorIndex;
    }

    /**
     * Getter for the "DccaPeerIndex" variable.
     */
    public Long getDccaPeerIndex() throws SnmpStatusException {
        return DccaPeerIndex;
    }

}
