package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DbpPeerEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.3.1.1.
 */
public class DbpPeerEntry implements DbpPeerEntryMBean, Serializable {

	public DbpPeerEntry() {
	}
	
    /**
     * Variable for storing the value of "DbpPeerRowStatus".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.9".
     *
     * "Status of the peer entry: creating the entry
     * enables the peer, destroying the entry disables
     * the peer."
     *
     */
    protected EnumDbpPeerRowStatus DbpPeerRowStatus = new EnumDbpPeerRowStatus();

    /**
     * Variable for storing the value of "DbpPeerStorageType".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.8".
     *
     * "The storage type for this conceptual row.
     * Only the dbpPeerPortListen object is writable when
     * the conceptual row is permanent."
     *
     */
    protected EnumDbpPeerStorageType DbpPeerStorageType = new EnumDbpPeerStorageType("nonVolatile");

    /**
     * Variable for storing the value of "DbpPeerFirmwareRevision".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.7".
     *
     * "Firmware revision of peer.
     * If the Entity MIB is supported by
     * the node, then the contents of this object MUST be
     * identical to those of the entPhysicalFirmwareRev
     * object [RFC4133]. If no firmware
     * revision, the revision of the Diameter software
     * module may be reported instead."
     *
     */
    protected String DbpPeerFirmwareRevision = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "DbpPeerSecurity".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.6".
     *
     * "The security the Diameter peer is using.
     * 
     * other(1) - Unknown Security Protocol
     * tls(2)   - Transport Layer Security Protocol
     * ipsec(3) - Internet Protocol Security"
     *
     */
    protected EnumDbpPeerSecurity DbpPeerSecurity = new EnumDbpPeerSecurity("other");

    /**
     * Variable for storing the value of "DbpPeerTransportProtocol".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.5".
     *
     * "The transport protocol (tcp/sctp) the
     * Diameter peer is using."
     *
     */
    protected EnumDbpPeerTransportProtocol DbpPeerTransportProtocol = new EnumDbpPeerTransportProtocol();

    /**
     * Variable for storing the value of "DbpPeerPortListen".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.4".
     *
     * "The port the peer is listening on."
     *
     */
    protected Long DbpPeerPortListen = new Long(1);

    /**
     * Variable for storing the value of "DbpPeerPortConnect".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.3".
     *
     * "The connection port used
     * to connect to the Diameter peer.
     * If there is no active connection, this
     * value will be zero(0)."
     *
     */
    protected Long DbpPeerPortConnect = new Long(1);

    /**
     * Variable for storing the value of "DbpPeerId".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.2".
     *
     * "The local identifier for the Diameter peer.
     * It must be unique and non-empty."
     *
     */
    protected String DbpPeerId = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "DbpPeerIndex".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.1".
     *
     * "A number uniquely identifying each Diameter peer
     * with which the local peer communicates.
     * Upon reload, dbpPeerIndex values may be changed."
     *
     */
    protected Long DbpPeerIndex = new Long(1);


    /**
     * Constructor for the "DbpPeerEntry" group.
     */
    public DbpPeerEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DbpPeerRowStatus" variable.
     */
    public EnumDbpPeerRowStatus getDbpPeerRowStatus() throws SnmpStatusException {
        return DbpPeerRowStatus;
    }

    /**
     * Setter for the "DbpPeerRowStatus" variable.
     * NB: There is no check method generated for RowStatus.
     *      Override checkRowStatusChange on SnmpMibTable if needed.
     */
    public void setDbpPeerRowStatus(EnumDbpPeerRowStatus x) throws SnmpStatusException {
        DbpPeerRowStatus = x;
    }

    /**
     * Getter for the "DbpPeerStorageType" variable.
     */
    public EnumDbpPeerStorageType getDbpPeerStorageType() throws SnmpStatusException {
        return DbpPeerStorageType;
    }

    /**
     * Setter for the "DbpPeerStorageType" variable.
     */
    public void setDbpPeerStorageType(EnumDbpPeerStorageType x) throws SnmpStatusException {
        DbpPeerStorageType = x;
    }

    /**
     * Checker for the "DbpPeerStorageType" variable.
     */
    public void checkDbpPeerStorageType(EnumDbpPeerStorageType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpPeerFirmwareRevision" variable.
     */
    public String getDbpPeerFirmwareRevision() throws SnmpStatusException {
        return DbpPeerFirmwareRevision;
    }

    /**
     * Getter for the "DbpPeerSecurity" variable.
     */
    public EnumDbpPeerSecurity getDbpPeerSecurity() throws SnmpStatusException {
        return DbpPeerSecurity;
    }

    /**
     * Getter for the "DbpPeerTransportProtocol" variable.
     */
    public EnumDbpPeerTransportProtocol getDbpPeerTransportProtocol() throws SnmpStatusException {
        return DbpPeerTransportProtocol;
    }

    /**
     * Getter for the "DbpPeerPortListen" variable.
     */
    public Long getDbpPeerPortListen() throws SnmpStatusException {
        return DbpPeerPortListen;
    }

    /**
     * Setter for the "DbpPeerPortListen" variable.
     */
    public void setDbpPeerPortListen(Long x) throws SnmpStatusException {
        DbpPeerPortListen = x;
    }

    /**
     * Checker for the "DbpPeerPortListen" variable.
     */
    public void checkDbpPeerPortListen(Long x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpPeerPortConnect" variable.
     */
    public Long getDbpPeerPortConnect() throws SnmpStatusException {
        return DbpPeerPortConnect;
    }

    /**
     * Getter for the "DbpPeerId" variable.
     */
    public String getDbpPeerId() throws SnmpStatusException {
        return DbpPeerId;
    }

    /**
     * Setter for the "DbpPeerId" variable.
     */
    public void setDbpPeerId(String x) throws SnmpStatusException {
        DbpPeerId = x;
    }

    /**
     * Checker for the "DbpPeerId" variable.
     */
    public void checkDbpPeerId(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpPeerIndex" variable.
     */
    public Long getDbpPeerIndex() throws SnmpStatusException {
        return DbpPeerIndex;
    }

}
