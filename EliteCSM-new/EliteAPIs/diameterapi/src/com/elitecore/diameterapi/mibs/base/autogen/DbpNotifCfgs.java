package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DbpNotifCfgs" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.7.
 */
public class DbpNotifCfgs implements DbpNotifCfgsMBean, Serializable {

    /**
     * Variable for storing the value of "DbpPeerConnectionUpNotifEnabled".
     * The variable is identified by: "1.3.6.1.2.1.119.1.7.5".
     *
     * "Setting the value of this object to True(1)
     * enables the dbpPeerConnectionUp notification.
     * The value persists across resets."
     *
     */
    protected EnumDbpPeerConnectionUpNotifEnabled DbpPeerConnectionUpNotifEnabled = new EnumDbpPeerConnectionUpNotifEnabled("false");

    /**
     * Variable for storing the value of "DbpPeerConnectionDownNotifEnabled".
     * The variable is identified by: "1.3.6.1.2.1.119.1.7.4".
     *
     * "Setting the value of this object to True(1)
     * enables the dbpPeerConnectionDown notification.
     * The value persists across resets."
     *
     */
    protected EnumDbpPeerConnectionDownNotifEnabled DbpPeerConnectionDownNotifEnabled = new EnumDbpPeerConnectionDownNotifEnabled("false");

    /**
     * Variable for storing the value of "DbpPermanentFailureNotifEnabled".
     * The variable is identified by: "1.3.6.1.2.1.119.1.7.3".
     *
     * "Setting the value of this object to True(1)
     * enables the dbpPermanentFailure notification.
     * The value persists across resets."
     *
     */
    protected EnumDbpPermanentFailureNotifEnabled DbpPermanentFailureNotifEnabled = new EnumDbpPermanentFailureNotifEnabled("false");

    /**
     * Variable for storing the value of "DbpTransientFailureNotifEnabled".
     * The variable is identified by: "1.3.6.1.2.1.119.1.7.2".
     *
     * "Setting the value of this object to True(1)
     * enables the dbpTransientFailure Notification.
     * The value persists across resets."
     *
     */
    protected EnumDbpTransientFailureNotifEnabled DbpTransientFailureNotifEnabled = new EnumDbpTransientFailureNotifEnabled();

    /**
     * Variable for storing the value of "DbpProtocolErrorNotifEnabled".
     * The variable is identified by: "1.3.6.1.2.1.119.1.7.1".
     *
     * "Setting the value of this object to True(1)
     * enables the dbpProtocolErrorNotif notification.
     * The value persists across resets."
     *
     */
    protected EnumDbpProtocolErrorNotifEnabled DbpProtocolErrorNotifEnabled = new EnumDbpProtocolErrorNotifEnabled("false");


    /**
     * Constructor for the "DbpNotifCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public DbpNotifCfgs(SnmpMib myMib) {
    }


    /**
     * Constructor for the "DbpNotifCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public DbpNotifCfgs(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "DbpPeerConnectionUpNotifEnabled" variable.
     */
    public EnumDbpPeerConnectionUpNotifEnabled getDbpPeerConnectionUpNotifEnabled() throws SnmpStatusException {
        return DbpPeerConnectionUpNotifEnabled;
    }

    /**
     * Setter for the "DbpPeerConnectionUpNotifEnabled" variable.
     */
    public void setDbpPeerConnectionUpNotifEnabled(EnumDbpPeerConnectionUpNotifEnabled x) throws SnmpStatusException {
        DbpPeerConnectionUpNotifEnabled = x;
    }

    /**
     * Checker for the "DbpPeerConnectionUpNotifEnabled" variable.
     */
    public void checkDbpPeerConnectionUpNotifEnabled(EnumDbpPeerConnectionUpNotifEnabled x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpPeerConnectionDownNotifEnabled" variable.
     */
    public EnumDbpPeerConnectionDownNotifEnabled getDbpPeerConnectionDownNotifEnabled() throws SnmpStatusException {
        return DbpPeerConnectionDownNotifEnabled;
    }

    /**
     * Setter for the "DbpPeerConnectionDownNotifEnabled" variable.
     */
    public void setDbpPeerConnectionDownNotifEnabled(EnumDbpPeerConnectionDownNotifEnabled x) throws SnmpStatusException {
        DbpPeerConnectionDownNotifEnabled = x;
    }

    /**
     * Checker for the "DbpPeerConnectionDownNotifEnabled" variable.
     */
    public void checkDbpPeerConnectionDownNotifEnabled(EnumDbpPeerConnectionDownNotifEnabled x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpPermanentFailureNotifEnabled" variable.
     */
    public EnumDbpPermanentFailureNotifEnabled getDbpPermanentFailureNotifEnabled() throws SnmpStatusException {
        return DbpPermanentFailureNotifEnabled;
    }

    /**
     * Setter for the "DbpPermanentFailureNotifEnabled" variable.
     */
    public void setDbpPermanentFailureNotifEnabled(EnumDbpPermanentFailureNotifEnabled x) throws SnmpStatusException {
        DbpPermanentFailureNotifEnabled = x;
    }

    /**
     * Checker for the "DbpPermanentFailureNotifEnabled" variable.
     */
    public void checkDbpPermanentFailureNotifEnabled(EnumDbpPermanentFailureNotifEnabled x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpTransientFailureNotifEnabled" variable.
     */
    public EnumDbpTransientFailureNotifEnabled getDbpTransientFailureNotifEnabled() throws SnmpStatusException {
        return DbpTransientFailureNotifEnabled;
    }

    /**
     * Setter for the "DbpTransientFailureNotifEnabled" variable.
     */
    public void setDbpTransientFailureNotifEnabled(EnumDbpTransientFailureNotifEnabled x) throws SnmpStatusException {
        DbpTransientFailureNotifEnabled = x;
    }

    /**
     * Checker for the "DbpTransientFailureNotifEnabled" variable.
     */
    public void checkDbpTransientFailureNotifEnabled(EnumDbpTransientFailureNotifEnabled x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpProtocolErrorNotifEnabled" variable.
     */
    public EnumDbpProtocolErrorNotifEnabled getDbpProtocolErrorNotifEnabled() throws SnmpStatusException {
        return DbpProtocolErrorNotifEnabled;
    }

    /**
     * Setter for the "DbpProtocolErrorNotifEnabled" variable.
     */
    public void setDbpProtocolErrorNotifEnabled(EnumDbpProtocolErrorNotifEnabled x) throws SnmpStatusException {
        DbpProtocolErrorNotifEnabled = x;
    }

    /**
     * Checker for the "DbpProtocolErrorNotifEnabled" variable.
     */
    public void checkDbpProtocolErrorNotifEnabled(EnumDbpProtocolErrorNotifEnabled x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

}
