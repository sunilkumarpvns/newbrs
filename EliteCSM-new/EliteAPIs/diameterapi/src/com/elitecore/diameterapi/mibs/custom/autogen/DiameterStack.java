package com.elitecore.diameterapi.mibs.custom.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-STACK-MIB.
//

// java imports
//
import java.io.Serializable;

import javax.management.MBeanServer;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "DiameterStack" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.21067.5.
 */
public class DiameterStack implements DiameterStackMBean, Serializable {

    /**
     * Variable for storing the value of "StackListeningPort".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.8".
     *
     * " Port of the Diameter Stack "
     *
     */
    protected Integer StackListeningPort = new Integer(1);

    /**
     * Variable for storing the value of "StackIPAddress".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.7".
     *
     * " IP Address of the Diameter Stack "
     *
     */
    protected String StackIPAddress = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "StackConfigReset".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.6".
     *
     * " Represents the state of the Diameter Stack
     * 
     * other(0) - Unknown state
     * initializing(1) - initialization is going oin
     * initialized(2) - initialization process is done
     * running(3) - successfully up and running
     * stopping(4) - shutdown process is going on
     * stopped(5) - shutdown successfully
     * reset(6) - reset the diameter stack
     * 
     * "
     *
     */
    protected EnumStackConfigReset StackConfigReset = new EnumStackConfigReset();

    /**
     * Variable for storing the value of "StackResetTime".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.5".
     *
     * " Diameter Stack ResetTime "
     *
     */
    protected Long StackResetTime = new Long(1);

    /**
     * Variable for storing the value of "StackUpTime".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.4".
     *
     * " Diameter Stack UpTime "
     *
     */
    protected Long StackUpTime = new Long(1);

    /**
     * Variable for storing the value of "StackRealm".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.3".
     *
     * " Realm of the Diameter Stack "
     *
     */
    protected String StackRealm = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "StackURI".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.2".
     *
     * " URI of the Diameter Stack "
     *
     */
    protected String StackURI = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "StackIdentity".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.1".
     *
     * " Identity of the Diameter Stack "
     *
     */
    protected String StackIdentity = new String("JDMK 5.1");

    public DiameterStack() {
    }

    /**
     * Constructor for the "DiameterStack" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public DiameterStack(SnmpMib myMib) {
    }


    /**
     * Constructor for the "DiameterStack" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public DiameterStack(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "StackListeningPort" variable.
     */
    public Integer getStackListeningPort() throws SnmpStatusException {
        return StackListeningPort;
    }

    /**
     * Getter for the "StackIPAddress" variable.
     */
    public String getStackIPAddress() throws SnmpStatusException {
        return StackIPAddress;
    }

    /**
     * Getter for the "StackConfigReset" variable.
     */
    public EnumStackConfigReset getStackConfigReset() throws SnmpStatusException {
        return StackConfigReset;
    }

    /**
     * Setter for the "StackConfigReset" variable.
     */
    public void setStackConfigReset(EnumStackConfigReset x) throws SnmpStatusException {
        StackConfigReset = x;
    }

    /**
     * Checker for the "StackConfigReset" variable.
     */
    public void checkStackConfigReset(EnumStackConfigReset x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "StackResetTime" variable.
     */
    public Long getStackResetTime() throws SnmpStatusException {
        return StackResetTime;
    }

    /**
     * Getter for the "StackUpTime" variable.
     */
    public Long getStackUpTime() throws SnmpStatusException {
        return StackUpTime;
    }

    /**
     * Getter for the "StackRealm" variable.
     */
    public String getStackRealm() throws SnmpStatusException {
        return StackRealm;
    }

    /**
     * Getter for the "StackURI" variable.
     */
    public String getStackURI() throws SnmpStatusException {
        return StackURI;
    }

    /**
     * Getter for the "StackIdentity" variable.
     */
    public String getStackIdentity() throws SnmpStatusException {
        return StackIdentity;
    }

}
