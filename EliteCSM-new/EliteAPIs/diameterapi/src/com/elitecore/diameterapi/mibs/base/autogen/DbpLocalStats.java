package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DbpLocalStats" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.2.
 */
public class DbpLocalStats implements DbpLocalStatsMBean, Serializable {

	public DbpLocalStats() {
	}
	
    /**
     * Variable for storing the value of "DbpLocalConfigReset".
     * The variable is identified by: "1.3.6.1.2.1.119.1.2.5".
     *
     * "Status/action object to reinitialize any persistent
     * local state.  When set to reset(4), any persistent
     * local state (such as a process) is reinitialized as
     * if the software had just been started.  This value will
     * never be returned by a read operation.  When read,
     * one of the following values will be returned:
     * other(1) - peer in some unknown state;
     * initializing(2) - peer (re)initializing;
     * running(3) - peer currently running."
     *
     */
    protected EnumDbpLocalConfigReset DbpLocalConfigReset = new EnumDbpLocalConfigReset("other");

    /**
     * Variable for storing the value of "DbpLocalResetTime".
     * The variable is identified by: "1.3.6.1.2.1.119.1.2.4".
     *
     * "If the peer keeps persistent state (e.g., a process)
     * and supports a 'reset' operation (e.g., can be told to
     * re-read configuration files), this value will be the
     * time elapsed (in hundredths of a second) since the
     * peer was 'reset'.  For software that does not
     * have persistence or does not support a 'reset'
     * operation, this value is undefined."
     *
     */
    protected Long DbpLocalResetTime = new Long(1);

    /**
     * Variable for storing the value of "DbpLocalStatsTotalUpTime".
     * The variable is identified by: "1.3.6.1.2.1.119.1.2.3".
     *
     * "This object represents the total amount of
     * time this Diameter peer has been up from the
     * beginning of time until now.  The value is cumulative
     * and persists over resets."
     *
     */
    protected Long DbpLocalStatsTotalUpTime = new Long(1);

    /**
     * Variable for storing the value of "DbpLocalStatsTotalMessagesOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.2.2".
     *
     * "The total number of Diameter Base Protocol
     * messages transmitted since the last reset."
     *
     */
    protected Long DbpLocalStatsTotalMessagesOut = new Long(1);

    /**
     * Variable for storing the value of "DbpLocalStatsTotalMessagesIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.2.1".
     *
     * "The total number of Diameter Base Protocol
     * messages received since the last reset."
     *
     */
    protected Long DbpLocalStatsTotalMessagesIn = new Long(1);


    /**
     * Constructor for the "DbpLocalStats" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public DbpLocalStats(SnmpMib myMib) {
    }


    /**
     * Constructor for the "DbpLocalStats" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public DbpLocalStats(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "DbpLocalConfigReset" variable.
     */
    public EnumDbpLocalConfigReset getDbpLocalConfigReset() throws SnmpStatusException {
        return DbpLocalConfigReset;
    }

    /**
     * Setter for the "DbpLocalConfigReset" variable.
     */
    public void setDbpLocalConfigReset(EnumDbpLocalConfigReset x) throws SnmpStatusException {
        DbpLocalConfigReset = x;
    }

    /**
     * Checker for the "DbpLocalConfigReset" variable.
     */
    public void checkDbpLocalConfigReset(EnumDbpLocalConfigReset x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpLocalResetTime" variable.
     */
    public Long getDbpLocalResetTime() throws SnmpStatusException {
        return DbpLocalResetTime;
    }

    /**
     * Getter for the "DbpLocalStatsTotalUpTime" variable.
     */
    public Long getDbpLocalStatsTotalUpTime() throws SnmpStatusException {
        return DbpLocalStatsTotalUpTime;
    }

    /**
     * Getter for the "DbpLocalStatsTotalMessagesOut" variable.
     */
    public Long getDbpLocalStatsTotalMessagesOut() throws SnmpStatusException {
        return DbpLocalStatsTotalMessagesOut;
    }

    /**
     * Getter for the "DbpLocalStatsTotalMessagesIn" variable.
     */
    public Long getDbpLocalStatsTotalMessagesIn() throws SnmpStatusException {
        return DbpLocalStatsTotalMessagesIn;
    }

}
