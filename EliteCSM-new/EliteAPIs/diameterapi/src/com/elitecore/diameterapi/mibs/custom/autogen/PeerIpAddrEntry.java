package com.elitecore.diameterapi.mibs.custom.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-STACK-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "PeerIpAddrEntry" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.21067.5.102.2.1.1.
 */
public class PeerIpAddrEntry implements PeerIpAddrEntryMBean, Serializable {

    /**
     * Variable for storing the value of "PeerIpAddrPeerIdentity".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.6".
     *
     * " Identity of the peer "
     *
     */
    protected String PeerIpAddrPeerIdentity = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "ReconnectionCount".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.5".
     *
     * " Number of times the Diameter Peer tries to connect "
     *
     */
    protected Long ReconnectionCount = new Long(1);

    /**
     * Variable for storing the value of "PeerStatus".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.4".
     *
     * " Connection state of the Diameter Peer
     * closed (0)     - Connection closed with this peer.
     * waitConnAck(1) - Waiting for an acknowledgment
     * from this peer.
     * waitICea(2)    - Waiting for a Capabilities-Exchange-Answer
     * from this peer.
     * elect (3)      - When the remote and local peers are both
     * trying to bring up a connection with
     * each other at the same time.  An
     * election process begins which
     * determines which socket remains open.
     * waitReturns (4) - Waiting for election returns.
     * r-open (5)      - Responder transport connection is
     * used for communication.
     * i-open (6)      - Initiator transport connection is
     * used for communication.
     * closing (7)     - Actively closing and doing cleanup.
     * WaitConnAckElect (8)"
     *
     */
    protected EnumPeerStatus PeerStatus = new EnumPeerStatus();

    /**
     * Variable for storing the value of "PeerLocalIpAddress".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.3".
     *
     * " IP Address(es) used for connections "
     *
     */
    protected String PeerLocalIpAddress = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "PeerRemoteIpAddress".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.2".
     *
     * " The type of address stored in dbpPeerIpAddress "
     *
     */
    protected String PeerRemoteIpAddress = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "PeerIpAddressIndex".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.1".
     *
     * " Number uniquely identifying an IP Address
     * supported by this Diameter peer "
     *
     */
    protected Long PeerIpAddressIndex = new Long(1);

    /**
     * Variable for storing the value of "PeerIpAddrCompsIndexValue".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.2.1.1.7".
     *
     * " Represents the value of composite index. Using format peerIndex.peerIpAddressIndex "
     *
     */
    protected String PeerIpAddrCompsIndexValue = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "PeerIndex".
     * The variable is identified by: "1.3.6.1.4.1.21067.5.102.1.1.1".
     *
     * " Number uniquely identifies the Diameter Peer "
     *
     */
    protected Long PeerIndex = new Long(1);


    public PeerIpAddrEntry() {
    }
    /**
     * Constructor for the "PeerIpAddrEntry" group.
     */
    public PeerIpAddrEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "PeerIpAddrPeerIdentity" variable.
     */
    public String getPeerIpAddrPeerIdentity() throws SnmpStatusException {
        return PeerIpAddrPeerIdentity;
    }

    /**
     * Getter for the "ReconnectionCount" variable.
     */
    public Long getReconnectionCount() throws SnmpStatusException {
        return ReconnectionCount;
    }

    /**
     * Getter for the "PeerStatus" variable.
     */
    public EnumPeerStatus getPeerStatus() throws SnmpStatusException {
        return PeerStatus;
    }

    /**
     * Getter for the "PeerLocalIpAddress" variable.
     */
    public String getPeerLocalIpAddress() throws SnmpStatusException {
        return PeerLocalIpAddress;
    }

    /**
     * Getter for the "PeerRemoteIpAddress" variable.
     */
    public String getPeerRemoteIpAddress() throws SnmpStatusException {
        return PeerRemoteIpAddress;
    }

    /**
     * Getter for the "PeerIpAddressIndex" variable.
     */
    public Long getPeerIpAddressIndex() throws SnmpStatusException {
        return PeerIpAddressIndex;
    }

    /**
     * Getter for the "PeerIpAddrCompsIndexValue" variable.
     */
    public String getPeerIpAddrCompsIndexValue() throws SnmpStatusException {
        return PeerIpAddrCompsIndexValue;
    }

    /**
     * Getter for the "PeerIndex" variable.
     */
    public Long getPeerIndex() throws SnmpStatusException {
        return PeerIndex;
    }

}
