package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "DbpLocalCfgs" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.1.
 */
public class DbpLocalCfgs implements DbpLocalCfgsMBean, Serializable {

	public DbpLocalCfgs() {
	}
	
    /**
     * Variable for storing the value of "DbpLocalRealm".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.6".
     *
     * "This object represents the Local Realm Name."
     *
     */
    protected String DbpLocalRealm = new String("");

    /**
     * Variable for storing the value of "DbpLocalOriginHost".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.5".
     *
     * "This object represents the host name of
     * the local peer.
     * The value persists across resets."
     *
     */
    protected String DbpLocalOriginHost = new String("");

    /**
     * Variable for storing the value of "DbpLocalSctpListenPort".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.4".
     *
     * "Diameter SCTP 'listen' port."
     *
     */
    protected Long DbpLocalSctpListenPort = new Long(1);

    /**
     * Variable for storing the value of "DbpLocalTcpListenPort".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.3".
     *
     * "Diameter TCP 'listen' port."
     *
     */
    protected Long DbpLocalTcpListenPort = new Long(1);

    /**
     * Variable for storing the value of "DbpLocalId".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.1".
     *
     * "The implementation-specific identification
     * string for the Diameter software in use on
     * the system; for example: 'diameterd'"
     *
     */
    protected String DbpLocalId = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "DbpAppAdvToPeerTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.8".
     *
     * "The table listing the applications advertised by
     * this host to each peer and the types of service
     * supported: accounting, authentication or both."
     *
     */
    protected TableDbpAppAdvToPeerTable DbpAppAdvToPeerTable;

    /**
     * Variable for storing the value of "DbpLocalApplTable".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.7".
     *
     * "The table listing the Diameter applications
     * supported by this peer."
     *
     */
    protected TableDbpLocalApplTable DbpLocalApplTable;


    /**
     * Constructor for the "DbpLocalCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public DbpLocalCfgs(SnmpMib myMib) {
        DbpAppAdvToPeerTable = new TableDbpAppAdvToPeerTable (myMib);
        DbpLocalApplTable = new TableDbpLocalApplTable (myMib);
    }


    /**
     * Constructor for the "DbpLocalCfgs" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public DbpLocalCfgs(SnmpMib myMib, MBeanServer server) {
        DbpAppAdvToPeerTable = new TableDbpAppAdvToPeerTable (myMib, server);
        DbpLocalApplTable = new TableDbpLocalApplTable (myMib, server);
    }

    /**
     * Getter for the "DbpLocalRealm" variable.
     */
    public String getDbpLocalRealm() throws SnmpStatusException {
        return DbpLocalRealm;
    }

    /**
     * Setter for the "DbpLocalRealm" variable.
     */
    public void setDbpLocalRealm(String x) throws SnmpStatusException {
        DbpLocalRealm = x;
    }

    /**
     * Checker for the "DbpLocalRealm" variable.
     */
    public void checkDbpLocalRealm(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpLocalOriginHost" variable.
     */
    public String getDbpLocalOriginHost() throws SnmpStatusException {
        return DbpLocalOriginHost;
    }

    /**
     * Setter for the "DbpLocalOriginHost" variable.
     */
    public void setDbpLocalOriginHost(String x) throws SnmpStatusException {
        DbpLocalOriginHost = x;
    }

    /**
     * Checker for the "DbpLocalOriginHost" variable.
     */
    public void checkDbpLocalOriginHost(String x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpLocalSctpListenPort" variable.
     */
    public Long getDbpLocalSctpListenPort() throws SnmpStatusException {
        return DbpLocalSctpListenPort;
    }

    /**
     * Getter for the "DbpLocalTcpListenPort" variable.
     */
    public Long getDbpLocalTcpListenPort() throws SnmpStatusException {
        return DbpLocalTcpListenPort;
    }

    /**
     * Getter for the "DbpLocalId" variable.
     */
    public String getDbpLocalId() throws SnmpStatusException {
        return DbpLocalId;
    }

    /**
     * Access the "DbpAppAdvToPeerTable" variable.
     */
    public TableDbpAppAdvToPeerTable accessDbpAppAdvToPeerTable() throws SnmpStatusException {
        return DbpAppAdvToPeerTable;
    }

    /**
     * Access the "DbpAppAdvToPeerTable" variable as a bean indexed property.
     */
    public DbpAppAdvToPeerEntryMBean[] getDbpAppAdvToPeerTable() throws SnmpStatusException {
        return DbpAppAdvToPeerTable.getEntries();
    }

    /**
     * Access the "DbpLocalApplTable" variable.
     */
    public TableDbpLocalApplTable accessDbpLocalApplTable() throws SnmpStatusException {
        return DbpLocalApplTable;
    }

    /**
     * Access the "DbpLocalApplTable" variable as a bean indexed property.
     */
    public DbpLocalApplEntryMBean[] getDbpLocalApplTable() throws SnmpStatusException {
        return DbpLocalApplTable.getEntries();
    }

}
