package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMibNode;
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibEntry;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.EnumRowStatus;
import com.sun.management.snmp.SnmpDefinitions;

/**
 * The class is used for representing SNMP metadata for the "DbpAppAdvToPeerEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.1.8.1.
 */
public class DbpAppAdvToPeerEntryMeta extends SnmpMibEntry
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "DbpAppAdvToPeerEntry".
     */
    public DbpAppAdvToPeerEntryMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        varList = new int[3];
        varList[0] = 5;
        varList[1] = 4;
        varList[2] = 3;
        SnmpMibNode.sort(varList);
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 5:
                return new SnmpInt(node.getDbpAppAdvToPeerRowStatus());

            case 4:
                return new SnmpInt(node.getDbpAppAdvToPeerStorageType());

            case 3:
                return new SnmpInt(node.getDbpAppAdvToPeerServices());

            case 2:
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
            case 1:
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 5:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setDbpAppAdvToPeerRowStatus( new EnumDbpAppAdvToPeerRowStatus (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getDbpAppAdvToPeerRowStatus());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 4:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setDbpAppAdvToPeerStorageType( new EnumDbpAppAdvToPeerStorageType (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getDbpAppAdvToPeerStorageType());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 4:
                if (x instanceof SnmpInt) {
                    try  {
                        node.checkDbpAppAdvToPeerStorageType( new EnumDbpAppAdvToPeerStorageType (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(DbpAppAdvToPeerEntryMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 5:
            case 4:
            case 3:
            case 2:
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 5:
            case 4:
            case 3:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibEntry".
    // See the "SnmpMibEntry" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        switch((int)var) {
            case 2:
                return true;
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 5:
                return "DbpAppAdvToPeerRowStatus";

            case 4:
                return "DbpAppAdvToPeerStorageType";

            case 3:
                return "DbpAppAdvToPeerServices";

            case 2:
                return "DbpAppAdvToPeerIndex";

            case 1:
                return "DbpAppAdvToPeerVendorId";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }


    public  long getRowStatusId()  {
        return 5;
    }


    public  String getRowStatusName()  {
        return new String ("DbpAppAdvToPeerRowStatus");
    }


    protected  int mapRowStatus(SnmpVarBind var, Object userData)
            throws SnmpStatusException {
        final SnmpValue value = var.getSnmpValue();
        if (value == null)
            throw new SnmpStatusException(
                SnmpStatusException.snmpRspInconsistentValue);
        if (!(value instanceof SnmpInt))
            throw new SnmpStatusException(
                SnmpStatusException.snmpRspWrongType);
        final int code = ((SnmpInt)value).intValue();
        if (!(EnumRowStatus.isValidValue(code)))
            throw new SnmpStatusException(
                SnmpStatusException.snmpRspInconsistentValue);
        return  code;
    }


    public  int getRowStatus(Object userData)
            throws SnmpStatusException {
        final  SnmpValue x = get(5, userData);
        final  SnmpVarBind vb = new SnmpVarBind();

        // We know we won't need the OID.
        //
        // vb.oid = new SnmpOid("1.3.6.1.2.1.119.1.1.8.1.5");

        vb.setSnmpValue(x);
        return mapRowStatus(vb, userData);
    }


    public  SnmpValue setRowStatus(int status, Object userData)
            throws SnmpStatusException {
        final  SnmpInt x = new SnmpInt(status);
        return  set(x, 5, userData);
    }


    public  boolean isRowReady(Object userData)
            throws SnmpStatusException {
        
        // A default implementation could be for instance:
        // return 	(getRowStatus(userData) != EnumRowStatus.notReady);
        
        return true;
    }

    protected DbpAppAdvToPeerEntryMBean node;
    protected SnmpStandardObjectServer objectserver = null;
}
