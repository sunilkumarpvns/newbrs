package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "DbpPerPeerInfoEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.4.5.1.1.
 */
public class DbpPerPeerInfoEntry implements DbpPerPeerInfoEntryMBean, Serializable {

	public DbpPerPeerInfoEntry() {
	}
	
    /**
     * Variable for storing the value of "DbpPerPeerStatsRAAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.29".
     *
     * "Number of Re-Auth-Answer messages
     * received."
     *
     */
    protected Long DbpPerPeerStatsRAAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsRARsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.28".
     *
     * "Number of Re-Auth-Request messages
     * sent."
     *
     */
    protected Long DbpPerPeerStatsRARsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsRARsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.27".
     *
     * "Number of Re-Auth-Request messages
     * received."
     *
     */
    protected Long DbpPerPeerStatsRARsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDPAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.26".
     *
     * "Number of Disconnect-Peer-Answer messages
     * sent."
     *
     */
    protected Long DbpPerPeerStatsDPAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDPAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.25".
     *
     * "Number of Disconnect-Peer-Answer messages
     * received."
     *
     */
    protected Long DbpPerPeerStatsDPAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDPRsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.24".
     *
     * "Number of Disconnect-Peer-Request messages
     * sent."
     *
     */
    protected Long DbpPerPeerStatsDPRsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDPRsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.23".
     *
     * "Number of Disconnect-Peer-Request messages
     * received."
     *
     */
    protected Long DbpPerPeerStatsDPRsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDWAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.22".
     *
     * "Number of Device-Watchdog-Answer
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsDWAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDWAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.21".
     *
     * "Number of Device-Watchdog-Answer
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsDWAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDWRsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.20".
     *
     * "Number of Device-Watchdog-Request
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsDWRsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPeerIdentity".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.51".
     *
     * "Represents Diameter Peer Identity."
     *
     */
    protected String DbpPeerIdentity = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "DbpPerPeerStatsTransportDown".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.50".
     *
     * "Number of unexpected transport failures."
     *
     */
    protected Long DbpPerPeerStatsTransportDown = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsASAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.9".
     *
     * "Number of Abort-Session-Answer
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsASAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsASRsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.8".
     *
     * "Number of Abort-Session-Request
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsASRsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDWRsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.19".
     *
     * "Number of Device-Watchdog-Request
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsDWRsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsASRsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.7".
     *
     * "Number of Abort-Session-Request messages
     * received from the peer."
     *
     */
    protected Long DbpPerPeerStatsASRsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsCEAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.18".
     *
     * "Number of Capabilities-Exchange-Answer
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsCEAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsPermanentFailures".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.49".
     *
     * "Number of permanent failures returned to peer.
     * Error Code 5xxx indicate Permanent Failure."
     *
     */
    protected Long DbpPerPeerStatsPermanentFailures = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsTimeoutConnAtmpts".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.6".
     *
     * "If there is no transport connection with a peer,
     * this is the number of times the local peer has attempted
     * to connect to that peer.  This is reset on
     * connection."
     *
     */
    protected Long DbpPerPeerStatsTimeoutConnAtmpts = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsCEAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.17".
     *
     * "Number of Capabilities-Exchange-Answer
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsCEAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsDWCurrentStatus".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.5".
     *
     * "okay    - Indicates the connection is presumed working.
     * suspect - Indicates the connection is possibly
     * congested or down.
     * down    - The peer is no longer reachable, causing
     * the transport connection to be shutdown.
     * reopen  - Three watchdog messages are exchanged with
     * accepted round trip times, and the connection
     * to the peer is considered stabilized."
     *
     */
    protected EnumDbpPerPeerStatsDWCurrentStatus DbpPerPeerStatsDWCurrentStatus = new EnumDbpPerPeerStatsDWCurrentStatus();

    /**
     * Variable for storing the value of "DbpPerPeerStatsCERsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.16".
     *
     * "Number of Capabilities-Exchange-Request
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsCERsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsTransientFailures".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.48".
     *
     * "Transient Failure count.
     * Error Code 4xxx indicate Transient Failure."
     *
     */
    protected Long DbpPerPeerStatsTransientFailures = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerInfoWhoInitDisconnect".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.4".
     *
     * "Did the host or peer initiate the disconnect?
     * 
     * host - If this peer initiated the disconnect.
     * peer - If the peer with which this peer was
     * connected initiated the disconnect."
     *
     */
    protected EnumDbpPerPeerInfoWhoInitDisconnect DbpPerPeerInfoWhoInitDisconnect = new EnumDbpPerPeerInfoWhoInitDisconnect();

    /**
     * Variable for storing the value of "DbpPerPeerStatsCERsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.15".
     *
     * "Number of Capabilities-Exchange-Request
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsCERsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsProtocolErrors".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.47".
     *
     * "Number of protocol errors returned to peer,
     * but not including redirects.
     * Error Code 3xxx indicate Protocol Failure"
     *
     */
    protected Long DbpPerPeerStatsProtocolErrors = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerInfoLastDiscCause".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.3".
     *
     * "The last cause for a peer's disconnection.
     * 
     * rebooting       - A scheduled reboot is imminent.
     * busy            - The peer's internal resources are
     * constrained, and it has determined
     * that the transport connection needs
     * to be shutdown.
     * doNotWantToTalk - The peer has determined that
     * it does not see a need for the
     * transport connection to exist,
     * since it does not expect any
     * messages to be exchanged in
     * the foreseeable future.
     * electionLost    - The peer has determined that it
     * has lost the election process
     * and has therefore disconnected
     * the transport connection."
     *
     */
    protected EnumDbpPerPeerInfoLastDiscCause DbpPerPeerInfoLastDiscCause = new EnumDbpPerPeerInfoLastDiscCause();

    /**
     * Variable for storing the value of "DbpPerPeerStatsACAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.14".
     *
     * "Number of Accounting-Answer messages
     * sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsACAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsUnknownTypes".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.46".
     *
     * "The number of Diameter messages of unknown type
     * which were received."
     *
     */
    protected Long DbpPerPeerStatsUnknownTypes = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerInfoStateDuration".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.2".
     *
     * "The elapsed time (in hundredths of a second)
     * since the last state change."
     *
     */
    protected Long DbpPerPeerInfoStateDuration = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsACAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.13".
     *
     * "Number of Accounting-Answer messages
     * received from the peer."
     *
     */
    protected Long DbpPerPeerStatsACAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsEToEDupMessages".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.45".
     *
     * "Duplicate answer messages that are to be locally
     * consumed.  Does not include duplicate Accounting
     * Requests received."
     *
     */
    protected Long DbpPerPeerStatsEToEDupMessages = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerInfoState".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.1".
     *
     * "Connection state in the Peer State Machine of
     * the peer with which this Diameter peer is
     * communicating.
     * 
     * closed      - Connection closed with this peer.
     * waitConnAck - Waiting for an acknowledgment
     * from this peer.
     * waitICea    - Waiting for a Capabilities-Exchange-Answer
     * from this peer.
     * elect       - When the remote and local peers are both
     * trying to bring up a connection with
     * each other at the same time.  An
     * election process begins which
     * determines which socket remains open.
     * waitReturns - Waiting for election returns.
     * r-open      - Responder transport connection is
     * used for communication.
     * i-open      - Initiator transport connection is
     * used for communication.
     * closing     - Actively closing and doing cleanup."
     *
     */
    protected EnumDbpPerPeerInfoState DbpPerPeerInfoState = new EnumDbpPerPeerInfoState();

    /**
     * Variable for storing the value of "DbpPerPeerStatsACRsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.12".
     *
     * "Number of Accounting-Request messages
     * sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsACRsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsHByHDropMessages".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.44".
     *
     * "An answer message that is received with an unknown
     * Hop-by-Hop Identifier.  Does not include Accounting
     * Requests dropped."
     *
     */
    protected Long DbpPerPeerStatsHByHDropMessages = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsACRsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.11".
     *
     * "Number of Accounting-Request messages
     * received from the peer."
     *
     */
    protected Long DbpPerPeerStatsACRsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsAccReqstsDropped".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.43".
     *
     * "The number of Accounting-Requests to this server
     * that have been dropped."
     *
     */
    protected Long DbpPerPeerStatsAccReqstsDropped = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsASAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.10".
     *
     * "Number of Abort-Session-Answer
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsASAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsAccPendReqstsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.42".
     *
     * "The number of Diameter Accounting-Request messages
     * sent to this peer that have not yet timed out or
     * received a response. This variable is incremented when an
     * Accounting-Request is received by this server and decremented
     * due to the transmission of an Accounting-Response, a timeout
     * or a retransmission."
     *
     */
    protected Long DbpPerPeerStatsAccPendReqstsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsTotalRetrans".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.41".
     *
     * "The number of Diameter messages retransmitted
     * to this Diameter peer, not to include Diameter
     * Accounting-Request messages retransmitted."
     *
     */
    protected Long DbpPerPeerStatsTotalRetrans = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsAccRetrans".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.40".
     *
     * "The number of Diameter Accounting-Request messages
     * retransmitted to this Diameter peer."
     *
     */
    protected Long DbpPerPeerStatsAccRetrans = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsAccsNotRecorded".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.39".
     *
     * "The number of Diameter Accounting-Request messages
     * which were received and responded to but not
     * recorded."
     *
     */
    protected Long DbpPerPeerStatsAccsNotRecorded = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsMalformedReqsts".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.38".
     *
     * "The number of malformed Diameter
     * messages received."
     *
     */
    protected Long DbpPerPeerStatsMalformedReqsts = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsAccDupRequests".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.37".
     *
     * "The number of duplicate Diameter Accounting-Request
     * messages received."
     *
     */
    protected Long DbpPerPeerStatsAccDupRequests = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsRedirectEvents".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.36".
     *
     * "Redirect Event count, which is the number
     * of redirects sent from a peer."
     *
     */
    protected Long DbpPerPeerStatsRedirectEvents = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerInfoDWReqTimer".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.35".
     *
     * "Device-Watchdog Request Timer, which
     * is the interval between messages sent to
     * peers."
     *
     */
    protected Long DbpPerPeerInfoDWReqTimer = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsSTAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.34".
     *
     * "Number of Session-Termination-Answer
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsSTAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsSTAsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.33".
     *
     * "Number of Session-Termination-Answer
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsSTAsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsSTRsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.32".
     *
     * "Number of Session-Termination-Request
     * messages sent to the peer."
     *
     */
    protected Long DbpPerPeerStatsSTRsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsSTRsIn".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.31".
     *
     * "Number of Session-Termination-Request
     * messages received from the peer."
     *
     */
    protected Long DbpPerPeerStatsSTRsIn = new Long(1);

    /**
     * Variable for storing the value of "DbpPerPeerStatsRAAsOut".
     * The variable is identified by: "1.3.6.1.2.1.119.1.4.5.1.1.30".
     *
     * "Number of Re-Auth-Answer messages
     * sent."
     *
     */
    protected Long DbpPerPeerStatsRAAsOut = new Long(1);

    /**
     * Variable for storing the value of "DbpPeerIndex".
     * The variable is identified by: "1.3.6.1.2.1.119.1.3.1.1.1".
     *
     * "A number uniquely identifying each Diameter peer
     * with which the local peer communicates.
     * Upon reload, dbpPeerIndex values may be changed."
     *
     */
    protected Long DbpPeerIndex = new Long(1);


    /**
     * Constructor for the "DbpPerPeerInfoEntry" group.
     */
    public DbpPerPeerInfoEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DbpPerPeerStatsRAAsIn" variable.
     */
    public Long getDbpPerPeerStatsRAAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsRAAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsRARsOut" variable.
     */
    public Long getDbpPerPeerStatsRARsOut() throws SnmpStatusException {
        return DbpPerPeerStatsRARsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsRARsIn" variable.
     */
    public Long getDbpPerPeerStatsRARsIn() throws SnmpStatusException {
        return DbpPerPeerStatsRARsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsDPAsOut" variable.
     */
    public Long getDbpPerPeerStatsDPAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsDPAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsDPAsIn" variable.
     */
    public Long getDbpPerPeerStatsDPAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsDPAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsDPRsOut" variable.
     */
    public Long getDbpPerPeerStatsDPRsOut() throws SnmpStatusException {
        return DbpPerPeerStatsDPRsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsDPRsIn" variable.
     */
    public Long getDbpPerPeerStatsDPRsIn() throws SnmpStatusException {
        return DbpPerPeerStatsDPRsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsDWAsOut" variable.
     */
    public Long getDbpPerPeerStatsDWAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsDWAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsDWAsIn" variable.
     */
    public Long getDbpPerPeerStatsDWAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsDWAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsDWRsOut" variable.
     */
    public Long getDbpPerPeerStatsDWRsOut() throws SnmpStatusException {
        return DbpPerPeerStatsDWRsOut;
    }

    /**
     * Getter for the "DbpPeerIdentity" variable.
     */
    public String getDbpPeerIdentity() throws SnmpStatusException {
        return DbpPeerIdentity;
    }

    /**
     * Getter for the "DbpPerPeerStatsTransportDown" variable.
     */
    public Long getDbpPerPeerStatsTransportDown() throws SnmpStatusException {
        return DbpPerPeerStatsTransportDown;
    }

    /**
     * Getter for the "DbpPerPeerStatsASAsIn" variable.
     */
    public Long getDbpPerPeerStatsASAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsASAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsASRsOut" variable.
     */
    public Long getDbpPerPeerStatsASRsOut() throws SnmpStatusException {
        return DbpPerPeerStatsASRsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsDWRsIn" variable.
     */
    public Long getDbpPerPeerStatsDWRsIn() throws SnmpStatusException {
        return DbpPerPeerStatsDWRsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsASRsIn" variable.
     */
    public Long getDbpPerPeerStatsASRsIn() throws SnmpStatusException {
        return DbpPerPeerStatsASRsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsCEAsOut" variable.
     */
    public Long getDbpPerPeerStatsCEAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsCEAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsPermanentFailures" variable.
     */
    public Long getDbpPerPeerStatsPermanentFailures() throws SnmpStatusException {
        return DbpPerPeerStatsPermanentFailures;
    }

    /**
     * Getter for the "DbpPerPeerStatsTimeoutConnAtmpts" variable.
     */
    public Long getDbpPerPeerStatsTimeoutConnAtmpts() throws SnmpStatusException {
        return DbpPerPeerStatsTimeoutConnAtmpts;
    }

    /**
     * Getter for the "DbpPerPeerStatsCEAsIn" variable.
     */
    public Long getDbpPerPeerStatsCEAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsCEAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsDWCurrentStatus" variable.
     */
    public EnumDbpPerPeerStatsDWCurrentStatus getDbpPerPeerStatsDWCurrentStatus() throws SnmpStatusException {
        return DbpPerPeerStatsDWCurrentStatus;
    }

    /**
     * Getter for the "DbpPerPeerStatsCERsOut" variable.
     */
    public Long getDbpPerPeerStatsCERsOut() throws SnmpStatusException {
        return DbpPerPeerStatsCERsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsTransientFailures" variable.
     */
    public Long getDbpPerPeerStatsTransientFailures() throws SnmpStatusException {
        return DbpPerPeerStatsTransientFailures;
    }

    /**
     * Getter for the "DbpPerPeerInfoWhoInitDisconnect" variable.
     */
    public EnumDbpPerPeerInfoWhoInitDisconnect getDbpPerPeerInfoWhoInitDisconnect() throws SnmpStatusException {
        return DbpPerPeerInfoWhoInitDisconnect;
    }

    /**
     * Getter for the "DbpPerPeerStatsCERsIn" variable.
     */
    public Long getDbpPerPeerStatsCERsIn() throws SnmpStatusException {
        return DbpPerPeerStatsCERsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsProtocolErrors" variable.
     */
    public Long getDbpPerPeerStatsProtocolErrors() throws SnmpStatusException {
        return DbpPerPeerStatsProtocolErrors;
    }

    /**
     * Getter for the "DbpPerPeerInfoLastDiscCause" variable.
     */
    public EnumDbpPerPeerInfoLastDiscCause getDbpPerPeerInfoLastDiscCause() throws SnmpStatusException {
        return DbpPerPeerInfoLastDiscCause;
    }

    /**
     * Getter for the "DbpPerPeerStatsACAsOut" variable.
     */
    public Long getDbpPerPeerStatsACAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsACAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsUnknownTypes" variable.
     */
    public Long getDbpPerPeerStatsUnknownTypes() throws SnmpStatusException {
        return DbpPerPeerStatsUnknownTypes;
    }

    /**
     * Getter for the "DbpPerPeerInfoStateDuration" variable.
     */
    public Long getDbpPerPeerInfoStateDuration() throws SnmpStatusException {
        return DbpPerPeerInfoStateDuration;
    }

    /**
     * Getter for the "DbpPerPeerStatsACAsIn" variable.
     */
    public Long getDbpPerPeerStatsACAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsACAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsEToEDupMessages" variable.
     */
    public Long getDbpPerPeerStatsEToEDupMessages() throws SnmpStatusException {
        return DbpPerPeerStatsEToEDupMessages;
    }

    /**
     * Getter for the "DbpPerPeerInfoState" variable.
     */
    public EnumDbpPerPeerInfoState getDbpPerPeerInfoState() throws SnmpStatusException {
        return DbpPerPeerInfoState;
    }

    /**
     * Getter for the "DbpPerPeerStatsACRsOut" variable.
     */
    public Long getDbpPerPeerStatsACRsOut() throws SnmpStatusException {
        return DbpPerPeerStatsACRsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsHByHDropMessages" variable.
     */
    public Long getDbpPerPeerStatsHByHDropMessages() throws SnmpStatusException {
        return DbpPerPeerStatsHByHDropMessages;
    }

    /**
     * Getter for the "DbpPerPeerStatsACRsIn" variable.
     */
    public Long getDbpPerPeerStatsACRsIn() throws SnmpStatusException {
        return DbpPerPeerStatsACRsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsAccReqstsDropped" variable.
     */
    public Long getDbpPerPeerStatsAccReqstsDropped() throws SnmpStatusException {
        return DbpPerPeerStatsAccReqstsDropped;
    }

    /**
     * Getter for the "DbpPerPeerStatsASAsOut" variable.
     */
    public Long getDbpPerPeerStatsASAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsASAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsAccPendReqstsOut" variable.
     */
    public Long getDbpPerPeerStatsAccPendReqstsOut() throws SnmpStatusException {
        return DbpPerPeerStatsAccPendReqstsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsTotalRetrans" variable.
     */
    public Long getDbpPerPeerStatsTotalRetrans() throws SnmpStatusException {
        return DbpPerPeerStatsTotalRetrans;
    }

    /**
     * Getter for the "DbpPerPeerStatsAccRetrans" variable.
     */
    public Long getDbpPerPeerStatsAccRetrans() throws SnmpStatusException {
        return DbpPerPeerStatsAccRetrans;
    }

    /**
     * Getter for the "DbpPerPeerStatsAccsNotRecorded" variable.
     */
    public Long getDbpPerPeerStatsAccsNotRecorded() throws SnmpStatusException {
        return DbpPerPeerStatsAccsNotRecorded;
    }

    /**
     * Getter for the "DbpPerPeerStatsMalformedReqsts" variable.
     */
    public Long getDbpPerPeerStatsMalformedReqsts() throws SnmpStatusException {
        return DbpPerPeerStatsMalformedReqsts;
    }

    /**
     * Getter for the "DbpPerPeerStatsAccDupRequests" variable.
     */
    public Long getDbpPerPeerStatsAccDupRequests() throws SnmpStatusException {
        return DbpPerPeerStatsAccDupRequests;
    }

    /**
     * Getter for the "DbpPerPeerStatsRedirectEvents" variable.
     */
    public Long getDbpPerPeerStatsRedirectEvents() throws SnmpStatusException {
        return DbpPerPeerStatsRedirectEvents;
    }

    /**
     * Getter for the "DbpPerPeerInfoDWReqTimer" variable.
     */
    public Long getDbpPerPeerInfoDWReqTimer() throws SnmpStatusException {
        return DbpPerPeerInfoDWReqTimer;
    }

    /**
     * Getter for the "DbpPerPeerStatsSTAsOut" variable.
     */
    public Long getDbpPerPeerStatsSTAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsSTAsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsSTAsIn" variable.
     */
    public Long getDbpPerPeerStatsSTAsIn() throws SnmpStatusException {
        return DbpPerPeerStatsSTAsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsSTRsOut" variable.
     */
    public Long getDbpPerPeerStatsSTRsOut() throws SnmpStatusException {
        return DbpPerPeerStatsSTRsOut;
    }

    /**
     * Getter for the "DbpPerPeerStatsSTRsIn" variable.
     */
    public Long getDbpPerPeerStatsSTRsIn() throws SnmpStatusException {
        return DbpPerPeerStatsSTRsIn;
    }

    /**
     * Getter for the "DbpPerPeerStatsRAAsOut" variable.
     */
    public Long getDbpPerPeerStatsRAAsOut() throws SnmpStatusException {
        return DbpPerPeerStatsRAAsOut;
    }

    /**
     * Getter for the "DbpPeerIndex" variable.
     */
    public Long getDbpPeerIndex() throws SnmpStatusException {
        return DbpPeerIndex;
    }

}
