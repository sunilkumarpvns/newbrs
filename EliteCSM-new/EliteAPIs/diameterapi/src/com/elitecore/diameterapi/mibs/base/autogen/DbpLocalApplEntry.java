package com.elitecore.diameterapi.mibs.base.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling DIAMETER-BASE-PROTOCOL-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "DbpLocalApplEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.119.1.1.7.1.
 */
public class DbpLocalApplEntry implements DbpLocalApplEntryMBean, Serializable {

	public DbpLocalApplEntry() {
	}
    /**
     * Variable for storing the value of "DbpLocalApplRowStatus".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.7.1.3".
     *
     * "The status of this conceptual row.
     * 
     * To create a row in this table, a manager must
     * set this object to either createAndGo(4) or
     * createAndWait(5).
     * 
     * Until instances of all corresponding columns are
     * appropriately configured, the value of the
     * corresponding instance of the dbpLocalApplRowStatus
     * column is 'notReady'.
     * 
     * In particular, a newly created row cannot be made
     * active until the corresponding dbpLocalApplIndex
     * has been set.
     * 
     * dbpLocalApplIndex may not be modified while
     * the value of this object is active(1): An attempt
     * to set these objects while the value of
     * dbpLocalApplRowStatus is active(1) will result in
     * an inconsistentValue error.
     * 
     * Entries in this table with dbpLocalApplRowStatus equal
     * to active(1) remain in the table until destroyed.
     * 
     * Entries in this table with dbpLocalApplRowStatus equal
     * to values other than active(1) will be destroyed after
     * timeout (5 minutes)."
     *
     */
    protected EnumDbpLocalApplRowStatus DbpLocalApplRowStatus = new EnumDbpLocalApplRowStatus();

    /**
     * Variable for storing the value of "DbpLocalApplStorageType".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.7.1.2".
     *
     * "The storage type for this conceptual row. None of
     * the columnar objects is writable when the conceptual
     * row is permanent."
     *
     */
    protected EnumDbpLocalApplStorageType DbpLocalApplStorageType = new EnumDbpLocalApplStorageType("nonVolatile");

    /**
     * Variable for storing the value of "DbpLocalApplIndex".
     * The variable is identified by: "1.3.6.1.2.1.119.1.1.7.1.1".
     *
     * "A number uniquely identifying a
     * supported Diameter application. Upon reload,
     * dbpLocalApplIndex values may be changed."
     *
     */
    protected Long DbpLocalApplIndex = new Long(1);


    /**
     * Constructor for the "DbpLocalApplEntry" group.
     */
    public DbpLocalApplEntry(SnmpMib myMib) {
    }

    /**
     * Getter for the "DbpLocalApplRowStatus" variable.
     */
    public EnumDbpLocalApplRowStatus getDbpLocalApplRowStatus() throws SnmpStatusException {
        return DbpLocalApplRowStatus;
    }

    /**
     * Setter for the "DbpLocalApplRowStatus" variable.
     * NB: There is no check method generated for RowStatus.
     *      Override checkRowStatusChange on SnmpMibTable if needed.
     */
    public void setDbpLocalApplRowStatus(EnumDbpLocalApplRowStatus x) throws SnmpStatusException {
        DbpLocalApplRowStatus = x;
    }

    /**
     * Getter for the "DbpLocalApplStorageType" variable.
     */
    public EnumDbpLocalApplStorageType getDbpLocalApplStorageType() throws SnmpStatusException {
        return DbpLocalApplStorageType;
    }

    /**
     * Setter for the "DbpLocalApplStorageType" variable.
     */
    public void setDbpLocalApplStorageType(EnumDbpLocalApplStorageType x) throws SnmpStatusException {
        DbpLocalApplStorageType = x;
    }

    /**
     * Checker for the "DbpLocalApplStorageType" variable.
     */
    public void checkDbpLocalApplStorageType(EnumDbpLocalApplStorageType x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "DbpLocalApplIndex" variable.
     */
    public Long getDbpLocalApplIndex() throws SnmpStatusException {
        return DbpLocalApplIndex;
    }

}
