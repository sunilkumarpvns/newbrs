/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.elitecore.elitecodegen.controller.actions;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.LookupDispatchAction;

import com.elitecore.elitecodegen.base.EliteCodeGenConstant;
import com.elitecore.elitecodegen.base.TableDataBean;
import com.elitecore.elitecodegen.controller.form.GenrateDataClassForm;

/**
 * MyEclipse Struts Creation date: 07-21-2007 XDoclet definition:
 * 
 * @struts.action path="/dispatchGenrateAction" name="dispatchGenrateAction" input="/jsp/viewTableList.jsp" scope="request" validate="true"
 * @struts.action-forward name="genrateDataClass" path="/genrateDataClass.do"
 * @struts.action-forward name="viewTable" path="/jsp/viewTable.jsp"
 */
public class DispatchGenrateAction extends LookupDispatchAction {
    
    /*
     * Generated Methods
     */
    private static Logger log              = Logger.getLogger(DispatchGenrateAction.class);
    
    private static String genrateDataclass = "genrateDataClass";
    
    private static String viewTableDetail  = "viewTableDetail";
    
    @Override
    protected Map getKeyMethodMap() {
        Map map = new HashMap();
        map.put("button.data", "data");
        map.put("button.next", "packageGen");
        map.put("button.test", "goNext");
        
        DispatchGenrateAction.log.info("Map is populated");
        return map;
    }
    
    /**
     * Method execute
     * 
     * @param mapping
     * @param form
     * @param request
     * @param response
     * @return ActionForward
     */
    public ActionForward data( ActionMapping mapping ,
                               ActionForm form ,
                               HttpServletRequest request ,
                               HttpServletResponse response ) {
        DispatchGenrateAction.log.info("data called");
        
        GenrateDataClassForm dataclassform = (GenrateDataClassForm) form;
        
        String[] tableName = dataclassform.getStrTableName();
        
        if (tableName == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.notable.selected"));
            saveErrors(request, errors);
            return mapping.findForward("failure");
        } else {
            Map dataClassMap = new HashMap<Integer, TableDataBean>();
            
            for ( int i = 0; i < tableName.length; i++ )
                dataClassMap.put(new Integer(i), new TableDataBean(tableName[i]));
            request.getSession(false).setAttribute(EliteCodeGenConstant.DataClassMap, dataClassMap);
        }
        return mapping.findForward(DispatchGenrateAction.genrateDataclass);
    }
    
    public ActionForward goNext( ActionMapping mapping ,
                                 ActionForm form ,
                                 HttpServletRequest request ,
                                 HttpServletResponse response ) {
        
        GenrateDataClassForm dataclassform = (GenrateDataClassForm) form;
        String[] tableName = dataclassform.getStrTableName();
        
        TableDataBean tableDataBean = new TableDataBean();
        if (tableName == null) {
            ActionErrors errors = new ActionErrors();
            errors.add(ActionErrors.GLOBAL_ERROR, new ActionError("error.notable.selected"));
            saveErrors(request, errors);
           return mapping.findForward("failure");
        }
         tableDataBean.setStrTableName(tableName[0]);
         request.getSession(false).setAttribute(EliteCodeGenConstant.TableDataBean,tableDataBean);
       
        return mapping.findForward(DispatchGenrateAction.viewTableDetail);
    }
    
}