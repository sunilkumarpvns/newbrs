package com.elitecore.aaa.rm.service.chargingservice.snmp.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling CHARGING-SERVICE-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.EnumRowStatus;
import com.sun.management.snmp.SnmpDefinitions;

/**
 * The class is used for representing SNMP metadata for the "ChargingServMIBObjects" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.21067.1.8.1.
 */
public class ChargingServMIBObjectsMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "ChargingServMIBObjects".
     */
    public ChargingServMIBObjectsMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(101);
            registerObject(19);
            registerObject(18);
            registerObject(17);
            registerObject(16);
            registerObject(15);
            registerObject(14);
            registerObject(13);
            registerObject(12);
            registerObject(11);
            registerObject(10);
            registerObject(9);
            registerObject(8);
            registerObject(7);
            registerObject(6);
            registerObject(5);
            registerObject(4);
            registerObject(3);
            registerObject(2);
            registerObject(1);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 101: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 19:
                return new SnmpCounter(node.getChargingServTotalAcctUpdateRequest());

            case 18:
                return new SnmpCounter(node.getChargingServTotalAcctStopRequest());

            case 17:
                return new SnmpCounter(node.getChargingServTotalAcctStartRequest());

            case 16:
                return new SnmpCounter(node.getChargingServTotalAcctResponse());

            case 15:
                return new SnmpCounter(node.getChargingServTotalAcctRequest());

            case 14:
                return new SnmpCounter(node.getChargingServTotalAccessReject());

            case 13:
                return new SnmpCounter(node.getChargingServTotalAccessAccept());

            case 12:
                return new SnmpCounter(node.getChargingServTotalAccessRequest());

            case 11:
                return new SnmpCounter(node.getChargingServTotalUnknownTypes());

            case 10:
                return new SnmpCounter(node.getChargingServTotalPacketsDropped());

            case 9:
                return new SnmpCounter(node.getChargingServTotalBadAuthenticators());

            case 8:
                return new SnmpCounter(node.getChargingServTotalMalformedRequests());

            case 7:
                return new SnmpCounter(node.getChargingServTotalDupRequests());

            case 6:
                return new SnmpCounter(node.getChargingServTotalInvalidRequests());

            case 5:
                return new SnmpCounter(node.getChargingServTotalResponses());

            case 4:
                return new SnmpCounter(node.getChargingServTotalRequests());

            case 3:
                return new SnmpTimeticks(node.getChargingServResetTime());

            case 2:
                return new SnmpInt(node.getChargingServiceReset());

            case 1:
                return new SnmpTimeticks(node.getChargingServUpTime());

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 101: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setChargingServiceReset( new EnumChargingServiceReset (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getChargingServiceReset());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 101: {
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
                }

            case 19:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 18:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 17:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 16:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 15:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 14:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 13:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 12:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 11:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                if (x instanceof SnmpInt) {
                    try  {
                        node.checkChargingServiceReset( new EnumChargingServiceReset (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(ChargingServMIBObjectsMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 6:
            case 5:
            case 4:
            case 3:
            case 2:
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 19:
            case 18:
            case 17:
            case 16:
            case 15:
            case 14:
            case 13:
            case 12:
            case 11:
            case 10:
            case 9:
            case 8:
            case 7:
            case 6:
            case 5:
            case 4:
            case 3:
            case 2:
            case 1:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 101: {
                throw new SnmpStatusException(SnmpStatusException.noSuchInstance);
                }

            case 19:
                return "ChargingServTotalAcctUpdateRequest";

            case 18:
                return "ChargingServTotalAcctStopRequest";

            case 17:
                return "ChargingServTotalAcctStartRequest";

            case 16:
                return "ChargingServTotalAcctResponse";

            case 15:
                return "ChargingServTotalAcctRequest";

            case 14:
                return "ChargingServTotalAccessReject";

            case 13:
                return "ChargingServTotalAccessAccept";

            case 12:
                return "ChargingServTotalAccessRequest";

            case 11:
                return "ChargingServTotalUnknownTypes";

            case 10:
                return "ChargingServTotalPacketsDropped";

            case 9:
                return "ChargingServTotalBadAuthenticators";

            case 8:
                return "ChargingServTotalMalformedRequests";

            case 7:
                return "ChargingServTotalDupRequests";

            case 6:
                return "ChargingServTotalInvalidRequests";

            case 5:
                return "ChargingServTotalResponses";

            case 4:
                return "ChargingServTotalRequests";

            case 3:
                return "ChargingServResetTime";

            case 2:
                return "ChargingServiceReset";

            case 1:
                return "ChargingServUpTime";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            case 101:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {

        switch((int)arc) {
            case 101:
                return tableChargingClientStatsTable;
        default:
            break;
        }
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
        tableChargingClientStatsTable = createChargingClientStatsTableMetaNode("ChargingClientStatsTable", "ChargingServMIBObjects", mib, server);
        if ( tableChargingClientStatsTable != null)  {
            tableChargingClientStatsTable.registerEntryNode(mib,server);
            mib.registerTableMeta("ChargingClientStatsTable", tableChargingClientStatsTable);
        }

    }


    /**
     * Factory method for "ChargingClientStatsTable" table metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param tableName Name of the table object ("ChargingClientStatsTable")
     * @param groupName Name of the group to which this table belong ("ChargingServMIBObjects")
     * @param mib The SnmpMib object in which this table is registered
     * @param server MBeanServer for this table entries (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "ChargingClientStatsTable" table (ChargingClientStatsTableMeta)
     * 
     **/
    protected ChargingClientStatsTableMeta createChargingClientStatsTableMetaNode(String tableName, String groupName, SnmpMib mib, MBeanServer server)  {
        return new ChargingClientStatsTableMeta(mib, objectserver);
    }

    protected ChargingServMIBObjectsMBean node;
    protected SnmpStandardObjectServer objectserver = null;
    protected ChargingClientStatsTableMeta tableChargingClientStatsTable = null;
}
