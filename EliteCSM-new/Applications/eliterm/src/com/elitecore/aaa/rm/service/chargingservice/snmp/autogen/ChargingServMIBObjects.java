package com.elitecore.aaa.rm.service.chargingservice.snmp.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling CHARGING-SERVICE-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "ChargingServMIBObjects" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.21067.1.8.1.
 */
public class ChargingServMIBObjects implements ChargingServMIBObjectsMBean, Serializable {

    /**
     * Variable for storing the value of "ChargingClientStatsTable".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.101".
     *
     * "Table defines number of configured Client for the RM server"
     *
     */
    protected TableChargingClientStatsTable ChargingClientStatsTable;

    /**
     * Variable for storing the value of "ChargingServTotalAcctUpdateRequest".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.19".
     *
     * "Total no. of Accouting update request received by Charging Service"
     *
     */
    protected Long ChargingServTotalAcctUpdateRequest = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAcctStopRequest".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.18".
     *
     * "Total no. of Accouting stop request received by Charging Service"
     *
     */
    protected Long ChargingServTotalAcctStopRequest = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAcctStartRequest".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.17".
     *
     * "Total no. of Accouting start request received by Charging Service"
     *
     */
    protected Long ChargingServTotalAcctStartRequest = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAcctResponse".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.16".
     *
     * "Total no. of Accouting response given by Charging Service"
     *
     */
    protected Long ChargingServTotalAcctResponse = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAcctRequest".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.15".
     *
     * "Total no. of Accouting request received by Charging Service"
     *
     */
    protected Long ChargingServTotalAcctRequest = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAccessReject".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.14".
     *
     * "Total no. of Access Reject given by Charging Service"
     *
     */
    protected Long ChargingServTotalAccessReject = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAccessAccept".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.13".
     *
     * "Total no. of Access Accept given by Charging Service"
     *
     */
    protected Long ChargingServTotalAccessAccept = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalAccessRequest".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.12".
     *
     * "Total no. of Access Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalAccessRequest = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalUnknownTypes".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.11".
     *
     * "Total no. of Unknown Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalUnknownTypes = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalPacketsDropped".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.10".
     *
     * "Total no. of packet Dropped by Charging Service"
     *
     */
    protected Long ChargingServTotalPacketsDropped = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalBadAuthenticators".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.9".
     *
     * "Total no. of packets containing invalid authenticators or Signature."
     *
     */
    protected Long ChargingServTotalBadAuthenticators = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalMalformedRequests".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.8".
     *
     * "Total no. of Malform Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalMalformedRequests = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalDupRequests".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.7".
     *
     * "Total no. of Duplicate Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalDupRequests = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalInvalidRequests".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.6".
     *
     * "Total no. of Invalid Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalInvalidRequests = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalResponses".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.5".
     *
     * "Total no. of response given by Charging Service"
     *
     */
    protected Long ChargingServTotalResponses = new Long(1);

    /**
     * Variable for storing the value of "ChargingServTotalRequests".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.4".
     *
     * "Total no. of Request received by Charging Service"
     *
     */
    protected Long ChargingServTotalRequests = new Long(1);

    /**
     * Variable for storing the value of "ChargingServResetTime".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.3".
     *
     * "Charging Service Reset time"
     *
     */
    protected Long ChargingServResetTime = new Long(1);

    /**
     * Variable for storing the value of "ChargingServiceReset".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.2".
     *
     * "When set to reset(2), IP-Pool service statistics is reinitialized.
     * When read, one of the following values will be returned:
     * other(1) - service in some unknown state;
     * initializing(3) - service initializing;
     * running(4) - service currently running"
     *
     */
    protected EnumChargingServiceReset ChargingServiceReset = new EnumChargingServiceReset();

    /**
     * Variable for storing the value of "ChargingServUpTime".
     * The variable is identified by: "1.3.6.1.4.1.21067.1.8.1.1".
     *
     * "Charging Service Up time"
     *
     */
    protected Long ChargingServUpTime = new Long(1);

    public ChargingServMIBObjects() {
    	// TODO Auto-generated constructor stub
    }
    /**
     * Constructor for the "ChargingServMIBObjects" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public ChargingServMIBObjects(SnmpMib myMib) {
        ChargingClientStatsTable = new TableChargingClientStatsTable (myMib);
    }


    /**
     * Constructor for the "ChargingServMIBObjects" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public ChargingServMIBObjects(SnmpMib myMib, MBeanServer server) {
        ChargingClientStatsTable = new TableChargingClientStatsTable (myMib, server);
    }

    /**
     * Access the "ChargingClientStatsTable" variable.
     */
    public TableChargingClientStatsTable accessChargingClientStatsTable() throws SnmpStatusException {
        return ChargingClientStatsTable;
    }

    /**
     * Access the "ChargingClientStatsTable" variable as a bean indexed property.
     */
    public ChargingClientEntryMBean[] getChargingClientStatsTable() throws SnmpStatusException {
        return ChargingClientStatsTable.getEntries();
    }

    /**
     * Getter for the "ChargingServTotalAcctUpdateRequest" variable.
     */
    public Long getChargingServTotalAcctUpdateRequest() throws SnmpStatusException {
        return ChargingServTotalAcctUpdateRequest;
    }

    /**
     * Getter for the "ChargingServTotalAcctStopRequest" variable.
     */
    public Long getChargingServTotalAcctStopRequest() throws SnmpStatusException {
        return ChargingServTotalAcctStopRequest;
    }

    /**
     * Getter for the "ChargingServTotalAcctStartRequest" variable.
     */
    public Long getChargingServTotalAcctStartRequest() throws SnmpStatusException {
        return ChargingServTotalAcctStartRequest;
    }

    /**
     * Getter for the "ChargingServTotalAcctResponse" variable.
     */
    public Long getChargingServTotalAcctResponse() throws SnmpStatusException {
        return ChargingServTotalAcctResponse;
    }

    /**
     * Getter for the "ChargingServTotalAcctRequest" variable.
     */
    public Long getChargingServTotalAcctRequest() throws SnmpStatusException {
        return ChargingServTotalAcctRequest;
    }

    /**
     * Getter for the "ChargingServTotalAccessReject" variable.
     */
    public Long getChargingServTotalAccessReject() throws SnmpStatusException {
        return ChargingServTotalAccessReject;
    }

    /**
     * Getter for the "ChargingServTotalAccessAccept" variable.
     */
    public Long getChargingServTotalAccessAccept() throws SnmpStatusException {
        return ChargingServTotalAccessAccept;
    }

    /**
     * Getter for the "ChargingServTotalAccessRequest" variable.
     */
    public Long getChargingServTotalAccessRequest() throws SnmpStatusException {
        return ChargingServTotalAccessRequest;
    }

    /**
     * Getter for the "ChargingServTotalUnknownTypes" variable.
     */
    public Long getChargingServTotalUnknownTypes() throws SnmpStatusException {
        return ChargingServTotalUnknownTypes;
    }

    /**
     * Getter for the "ChargingServTotalPacketsDropped" variable.
     */
    public Long getChargingServTotalPacketsDropped() throws SnmpStatusException {
        return ChargingServTotalPacketsDropped;
    }

    /**
     * Getter for the "ChargingServTotalBadAuthenticators" variable.
     */
    public Long getChargingServTotalBadAuthenticators() throws SnmpStatusException {
        return ChargingServTotalBadAuthenticators;
    }

    /**
     * Getter for the "ChargingServTotalMalformedRequests" variable.
     */
    public Long getChargingServTotalMalformedRequests() throws SnmpStatusException {
        return ChargingServTotalMalformedRequests;
    }

    /**
     * Getter for the "ChargingServTotalDupRequests" variable.
     */
    public Long getChargingServTotalDupRequests() throws SnmpStatusException {
        return ChargingServTotalDupRequests;
    }

    /**
     * Getter for the "ChargingServTotalInvalidRequests" variable.
     */
    public Long getChargingServTotalInvalidRequests() throws SnmpStatusException {
        return ChargingServTotalInvalidRequests;
    }

    /**
     * Getter for the "ChargingServTotalResponses" variable.
     */
    public Long getChargingServTotalResponses() throws SnmpStatusException {
        return ChargingServTotalResponses;
    }

    /**
     * Getter for the "ChargingServTotalRequests" variable.
     */
    public Long getChargingServTotalRequests() throws SnmpStatusException {
        return ChargingServTotalRequests;
    }

    /**
     * Getter for the "ChargingServResetTime" variable.
     */
    public Long getChargingServResetTime() throws SnmpStatusException {
        return ChargingServResetTime;
    }

    /**
     * Getter for the "ChargingServiceReset" variable.
     */
    public EnumChargingServiceReset getChargingServiceReset() throws SnmpStatusException {
        return ChargingServiceReset;
    }

    /**
     * Setter for the "ChargingServiceReset" variable.
     */
    public void setChargingServiceReset(EnumChargingServiceReset x) throws SnmpStatusException {
        ChargingServiceReset = x;
    }

    /**
     * Checker for the "ChargingServiceReset" variable.
     */
    public void checkChargingServiceReset(EnumChargingServiceReset x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "ChargingServUpTime" variable.
     */
    public Long getChargingServUpTime() throws SnmpStatusException {
        return ChargingServUpTime;
    }

}
