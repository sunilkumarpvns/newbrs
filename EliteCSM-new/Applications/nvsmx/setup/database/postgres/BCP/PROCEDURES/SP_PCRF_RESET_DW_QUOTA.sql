-- Generated by Ora2Pg, the Oracle database Schema converter, version 18.1
-- Copyright 2000-2017 Gilles DAROLD. All rights reserved.
-- DATASOURCE:

SET client_encoding TO 'UTF8';

\set ON_ERROR_STOP ON



CREATE OR REPLACE FUNCTION sp_pcrf_reset_dw_quota()
    RETURNS void
    LANGUAGE 'plpgsql'
AS $BODY$
DECLARE

  v_dcnt 	NUMERIC;
  v_wcnt 	NUMERIC;
  CNT       	bigint := 0;
  SUC       	bigint := 0;
  STIME     	bigint;-- := DBMS_UTILITY.GET_TIME;
  ETIME     	bigint;
  TME_TAKEN 	bigint;
  INST      	bigint :=1;-- := DBMS_UTILITY.CURRENT_INSTANCE;
  USAGE_CNT     bigint :=0;
  HISTORY_CNT   bigint :=0;
  V_CNT       bigint := 0;
  REC_DW RECORD;

BEGIN
  /* JIRA : NETVERTEX-2098 */
  --SELECT PKG_PCRF_SCHEDULER_KPI.FUNC_CHECK_PARTITION('TBLM_USAGE') INTO USAGE_CNT;
  --SELECT PKG_PCRF_SCHEDULER_KPI.FUNC_CHECK_PARTITION('TBLM_USAGE_HISTORY') INTO HISTORY_CNT;
  SELECT EXTRACT(EPOCH FROM current_time)*100 into STIME;
  FOR REC_DW IN (SELECT DW.ID ,
    DW.SUBSCRIBER_ID,
    DW.PACKAGE_ID,
    DW.SUBSCRIPTION_ID,
    DW.QUOTA_PROFILE_ID,
    DW.SERVICE_ID,
    DW.DAILY_TOTAL ,
    DW.DAILY_UPLOAD ,
    DW.DAILY_DOWNLOAD ,
    DW.DAILY_TIME ,
    DW.WEEKLY_TOTAL ,
    DW.WEEKLY_UPLOAD ,
    DW.WEEKLY_DOWNLOAD ,
    DW.WEEKLY_TIME ,
    DW.BILLING_CYCLE_TOTAL ,
    DW.BILLING_CYCLE_UPLOAD ,
    DW.BILLING_CYCLE_DOWNLOAD ,
    DW.BILLING_CYCLE_TIME ,
    DW.CUSTOM_TOTAL ,
    DW.CUSTOM_UPLOAD ,
    DW.CUSTOM_DOWNLOAD ,
    DW.CUSTOM_TIME ,
    DW.DAILY_RESET_TIME ,
    DW.WEEKLY_RESET_TIME,
    DW.CUSTOM_RESET_TIME,
    DW.BILLING_CYCLE_RESET_TIME,
    DW.LAST_UPDATE_TIME
  FROM TBLT_USAGE DW
  )
  LOOP
    CNT := CNT + 1;
    IF REC_DW.DAILY_RESET_TIME <= clock_timestamp() AND REC_DW.WEEKLY_RESET_TIME <= clock_timestamp() THEN
      UPDATE TBLT_USAGE I
      SET DAILY_TOTAL             = 0,
        DAILY_UPLOAD              = 0,
        DAILY_DOWNLOAD            = 0,
        DAILY_TIME                = 0,
        WEEKLY_TOTAL              = 0,
        WEEKLY_UPLOAD             = 0,
        WEEKLY_DOWNLOAD           = 0,
        WEEKLY_TIME               = 0,
        DAILY_RESET_TIME          = CURRENT_DATE +  interval '1 days' + time '11:59:59 PM',
        --I.DAILY_RESET_TIME         = date_trunc('day', clock_timestamp())+86399/86400,
        WEEKLY_RESET_TIME         = CURRENT_DATE - cast(extract(dow from current_date) as int) + 6 + time '11:59:59 PM',
        LAST_UPDATE_TIME          = CURRENT_TIMESTAMP
      WHERE I.ID                    = REC_DW.ID
      AND REC_DW.DAILY_RESET_TIME  <= CURRENT_TIMESTAMP
      AND REC_DW.WEEKLY_RESET_TIME <= CURRENT_TIMESTAMP;
    --  v_dcnt                       := SQL%ROWCOUNT;
        GET DIAGNOSTICS v_dcnt = ROW_COUNT;
    ELSIF REC_DW.DAILY_RESET_TIME  <= CURRENT_TIMESTAMP THEN
      UPDATE TBLT_USAGE I
      SET DAILY_TOTAL            = 0,
        DAILY_UPLOAD             = 0,
        DAILY_DOWNLOAD           = 0,
        DAILY_TIME               = 0,
        DAILY_RESET_TIME = CURRENT_DATE +  interval '1 days' + time '11:59:59 PM',
      --  I.DAILY_RESET_TIME         = date_trunc('day', clock_timestamp())+86399/86400,
        LAST_UPDATE_TIME         = CURRENT_TIMESTAMP
      WHERE I.ID                   = REC_DW.ID
      AND REC_DW.DAILY_RESET_TIME <= clock_timestamp();
      GET DIAGNOSTICS v_wcnt = ROW_COUNT;
    --  v_wcnt                      := SQL%ROWCOUNT;
    END IF;
    IF v_dcnt > 0 OR v_wcnt > 0 THEN
      INSERT
      INTO TBLT_USAGE_HISTORY(
          CREATE_DATE,
          ID ,
          SUBSCRIBER_ID,
          PACKAGE_ID,
          SUBSCRIPTION_ID,
          QUOTA_PROFILE_ID,
          SERVICE_ID,
          DAILY_TOTAL ,
          DAILY_UPLOAD ,
          DAILY_DOWNLOAD ,
          DAILY_TIME ,
          WEEKLY_TOTAL ,
          WEEKLY_UPLOAD ,
          WEEKLY_DOWNLOAD ,
          WEEKLY_TIME ,
          BILLING_CYCLE_TOTAL ,
          BILLING_CYCLE_UPLOAD ,
          BILLING_CYCLE_DOWNLOAD ,
          BILLING_CYCLE_TIME ,
          CUSTOM_TOTAL ,
          CUSTOM_UPLOAD ,
          CUSTOM_DOWNLOAD ,
          CUSTOM_TIME ,
          DAILY_RESET_TIME ,
          WEEKLY_RESET_TIME,
          CUSTOM_RESET_TIME,
          BILLING_CYCLE_RESET_TIME,
          LAST_UPDATE_TIME
        )
        VALUES (
          CURRENT_TIMESTAMP,
          REC_DW.ID ,
          REC_DW.SUBSCRIBER_ID,
          REC_DW.PACKAGE_ID,
          REC_DW.SUBSCRIPTION_ID,
          REC_DW.QUOTA_PROFILE_ID,
          REC_DW.SERVICE_ID,
          REC_DW.DAILY_TOTAL ,
          REC_DW.DAILY_UPLOAD ,
          REC_DW.DAILY_DOWNLOAD ,
          REC_DW.DAILY_TIME ,
          REC_DW.WEEKLY_TOTAL ,
          REC_DW.WEEKLY_UPLOAD ,
          REC_DW.WEEKLY_DOWNLOAD ,
          REC_DW.WEEKLY_TIME ,
          REC_DW.BILLING_CYCLE_TOTAL ,
          REC_DW.BILLING_CYCLE_UPLOAD ,
          REC_DW.BILLING_CYCLE_DOWNLOAD ,
          REC_DW.BILLING_CYCLE_TIME ,
          REC_DW.CUSTOM_TOTAL ,
          REC_DW.CUSTOM_UPLOAD ,
          REC_DW.CUSTOM_DOWNLOAD ,
          REC_DW.CUSTOM_TIME ,
          REC_DW.DAILY_RESET_TIME ,
          REC_DW.WEEKLY_RESET_TIME,
          REC_DW.CUSTOM_RESET_TIME,
          REC_DW.BILLING_CYCLE_RESET_TIME,
          REC_DW.LAST_UPDATE_TIME
        );
        GET DIAGNOSTICS V_CNT = ROW_COUNT;
        SUC := SUC + V_CNT;
     -- COMMIT;
    END IF;
  END LOOP;
    SELECT EXTRACT(EPOCH FROM current_time)*100 into ETIME;
    TME_TAKEN:=ROUND((ETIME - STIME)/100,1);
    IF HISTORY_CNT=1 AND USAGE_CNT=1 THEN
    USAGE_CNT:=1;
    ELSE
    USAGE_CNT:=0;
    END IF;
    perform pkg_pcrf_scheduler_kpi_sp_scheduler_general(CNT,SUC,INST,'JOB_SP_PCRF_RESET_DW_QUOTA',TME_TAKEN,USAGE_CNT);
END;

$BODY$;

DO $$
DECLARE
    jid integer;
    scid integer;
	username varchar;
BEGIN
select user into username; --select current user(Application user)
-- Creating a new job
INSERT INTO pgagent.pga_job(
    jobjclid, jobname, jobdesc, jobhostagent, jobenabled
) VALUES (
    1::integer, 'JOB_SP_PCRF_RESET_DW_QUOTA'::text, ''::text, ''::text, true
) RETURNING jobid INTO jid;

-- Steps
-- Inserting a step (jobid: NULL)
INSERT INTO pgagent.pga_jobstep (
    jstjobid, jstname, jstenabled, jstkind,
    jstconnstr, jstdbname, jstonerror,
    jstcode, jstdesc
) VALUES (
    jid, 'JOB_SP_PCRF_RESET_DW_QUOTA-Step1'::text, true, 's'::character(1),
    ''::text, 'postgres'::name, 'f'::character(1),
    'set search_path = '|| username ||';
select sp_pcrf_reset_dw_quota();'::text, ''::text
) ;

-- Schedules
-- Inserting a schedule
INSERT INTO pgagent.pga_schedule(
    jscjobid, jscname, jscdesc, jscenabled,
    jscstart, jscend,    jscminutes, jschours, jscweekdays, jscmonthdays, jscmonths
) VALUES (
    jid, 'Sche-1'::text, ''::text, true,
    '2017-07-25 12:52:06+05:30'::timestamp with time zone, '2020-07-25 12:52:06+05:30'::timestamp with time zone,
    -- Minutes
    ARRAY[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false]::boolean[],
    -- Hours
    ARRAY[false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]::boolean[],
    -- Week days
    ARRAY[false, false, false, false, false, false, false]::boolean[],
    -- Month days
    ARRAY[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]::boolean[],
    -- Months
    ARRAY[false, false, false, false, false, false, false, false, false, false, false, false]::boolean[]
) RETURNING jscid INTO scid;
END
$$;