<!DOCTYPE validators PUBLIC "-//Apache Struts//XWork Validator 1.0.2//EN" "http://struts.apache.org/dtds/xwork-validator-1.0.2.dtd">

<validators>

	<field name="pccRule.name">
		<field-validator type="required" short-circuit="true">
			<message>${getText("error.required.field", {getText("pccrule.name")})}</message>
		</field-validator>
		<field-validator type="stringlength">
			<param name="minLength">2</param>
			<param name="maxLength">100</param>
			<param name="trim">true</param>
			<message>${getText("error.length", {getText("pccrule.name")})}</message>
		</field-validator>
		<field-validator type="regex">
        	<param name="regex"><![CDATA[^[a-zA-Z0-9]+.*[a-zA-Z0-9)]+$]]></param>
    		<message>${getText("invalid.name", {getText("pccrule.name")})}</message>
        </field-validator>		
	</field>
	<field name="pccRule.monitoringKey">
		<field-validator type="required" short-circuit="true">
			<message>${getText("error.required.field", {getText("pccrule.monitoringkey")})}</message>
		</field-validator>
		<field-validator type="stringlength">
			<param name="minLength">2</param>
			<param name="maxLength">100</param>
			<param name="trim">true</param>
			<message>${getText("error.length", {getText("monitoringKey")})}</message>
		</field-validator>
		<field-validator type="regex">
        	<param name="regex"><![CDATA[^[a-zA-Z0-9]+.*[a-zA-Z0-9)]+$]]></param>
    		<message>${getText("invalid.name", {getText("pccrule.name")})}</message>
        </field-validator>		
	</field>
	<!-- <field name="pccRule.gbrdl" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.gbrdl")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.gbrul" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.gbrul")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.mbrdl" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.mbrdl")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.mbrul" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.mbrul")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.sliceTotal" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.slicetotal")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.sliceDownload" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.slicedownload")})}</message>
        </field-validator>
	</field>
	<field name="pccRule.sliceUpload" >
		<field-validator type="regex" short-circuit="true">
        	<param name="regex"><![CDATA[^\d+$]]></param>
    		<message>${getText("error.required.numeric", {getText("pccrule.sliceupload")})}</message>
        </field-validator>
	</field> -->
 </validators>