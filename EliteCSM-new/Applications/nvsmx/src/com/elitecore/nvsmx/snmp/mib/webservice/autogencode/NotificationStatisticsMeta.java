package com.elitecore.nvsmx.snmp.mib.webservice.autogencode;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling NETVERTEX-PCRF-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpCounter;
import com.sun.management.snmp.SnmpCounter64;
import com.sun.management.snmp.SnmpGauge;
import com.sun.management.snmp.SnmpInt;
import com.sun.management.snmp.SnmpUnsignedInt;
import com.sun.management.snmp.SnmpIpAddress;
import com.sun.management.snmp.SnmpTimeticks;
import com.sun.management.snmp.SnmpOpaque;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStringFixed;
import com.sun.management.snmp.SnmpOid;
import com.sun.management.snmp.SnmpNull;
import com.sun.management.snmp.SnmpValue;
import com.sun.management.snmp.SnmpVarBind;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibGroup;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;
import com.sun.management.snmp.agent.SnmpStandardMetaServer;
import com.sun.management.snmp.agent.SnmpMibSubRequest;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.EnumRowStatus;
import com.sun.management.snmp.SnmpDefinitions;

/**
 * The class is used for representing SNMP metadata for the "NotificationStatistics" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.21067.4.1.2.1.2.
 */
public class NotificationStatisticsMeta extends SnmpMibGroup
     implements Serializable, SnmpStandardMetaServer {

    /**
     * Constructor for the metadata associated to "NotificationStatistics".
     */
    public NotificationStatisticsMeta(SnmpMib myMib, SnmpStandardObjectServer objserv) {
        objectserver = objserv;
        try {
            registerObject(47);
            registerObject(46);
            registerObject(45);
            registerObject(44);
            registerObject(43);
            registerObject(42);
            registerObject(10);
            registerObject(41);
            registerObject(9);
            registerObject(8);
            registerObject(7);
            registerObject(27);
            registerObject(6);
            registerObject(26);
            registerObject(5);
            registerObject(4);
            registerObject(25);
            registerObject(3);
            registerObject(24);
            registerObject(2);
            registerObject(23);
            registerObject(1);
            registerObject(22);
            registerObject(21);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    /**
     * Get the value of a scalar variable
     */
    public SnmpValue get(long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 47:
                return new SnmpCounter(node.getTotalSMSFailuresYesterday());

            case 46:
                return new SnmpCounter(node.getTotalSMSSuccessYesterday());

            case 45:
                return new SnmpCounter(node.getTotalSMSProcessedYesterday());

            case 44:
                return new SnmpCounter(node.getTotalEmailFailuresYesterday());

            case 43:
                return new SnmpCounter(node.getTotalEmailSuccessYesterday());

            case 42:
                return new SnmpCounter(node.getTotalEmailProcessedYesterday());

            case 10:
                return new SnmpCounter(node.getTotalSMSFailures());

            case 41:
                return new SnmpCounter(node.getTotalNotificationProcessedYesterday());

            case 9:
                return new SnmpCounter(node.getTotalSMSSuccess());

            case 8:
                return new SnmpCounter(node.getTotalSMSProcessed());

            case 7:
                return new SnmpCounter(node.getTotalEmailFailures());

            case 27:
                return new SnmpCounter(node.getTotalSMSFailuresToday());

            case 6:
                return new SnmpCounter(node.getTotalEmailSuccess());

            case 26:
                return new SnmpCounter(node.getTotalSMSSuccessToday());

            case 5:
                return new SnmpCounter(node.getTotalEmailProcessed());

            case 4:
                return new SnmpCounter(node.getTotalNotificationProcessed());

            case 25:
                return new SnmpCounter(node.getTotalSMSProcessedToday());

            case 3:
                return new SnmpInt(node.getNotificationStatisticsReset());

            case 24:
                return new SnmpCounter(node.getTotalEmailFailuresToday());

            case 2:
                return new SnmpTimeticks(node.getNotificationStatisticsResetTime());

            case 23:
                return new SnmpCounter(node.getTotalEmailSuccessToday());

            case 1:
                return new SnmpTimeticks(node.getNotificationServiceUpTime());

            case 22:
                return new SnmpCounter(node.getTotalEmailProcessedToday());

            case 21:
                return new SnmpCounter(node.getTotalNotificationProcessedToday());

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Set the value of a scalar variable
     */
    public SnmpValue set(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int)var) {
            case 47:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 46:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 45:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 44:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 43:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 42:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 41:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                if (x instanceof SnmpInt) {
                    try  {
                        node.setNotificationStatisticsReset( new EnumNotificationStatisticsReset (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                    return new SnmpInt(node.getNotificationStatisticsReset());
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
    }

    /**
     * Check the value of a scalar variable
     */
    public void check(SnmpValue x, long var, Object data)
        throws SnmpStatusException {
        switch((int) var) {
            case 47:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 46:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 45:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 44:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 43:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 42:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 10:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 41:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 9:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 8:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 7:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 27:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 6:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 26:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 5:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 4:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 25:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 3:
                if (x instanceof SnmpInt) {
                    try  {
                        node.checkNotificationStatisticsReset( new EnumNotificationStatisticsReset (((SnmpInt)x).toInteger()));
                    } catch(IllegalArgumentException e)  {
                        throw new SnmpStatusException(SnmpStatusException.snmpRspWrongValue);
                    }
                } else {
                    throw new SnmpStatusException(SnmpStatusException.snmpRspWrongType);
                }
                break;

            case 24:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 2:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 23:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 1:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 22:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            case 21:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);

            default:
                throw new SnmpStatusException(SnmpStatusException.snmpRspNotWritable);
        }
    }

    /**
     * Allow to bind the metadata description to a specific object.
     */
    protected void setInstance(NotificationStatisticsMBean var) {
        node = var;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "get" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void get(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.get(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "set" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void set(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.set(this,req,depth);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "check" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void check(SnmpMibSubRequest req, int depth)
        throws SnmpStatusException {
        objectserver.check(this,req,depth);
    }

    /**
     * Returns true if "arc" identifies a scalar object.
     */
    public boolean isVariable(long arc) {

        switch((int)arc) {
            case 47:
            case 46:
            case 45:
            case 44:
            case 43:
            case 42:
            case 10:
            case 41:
            case 9:
            case 8:
            case 7:
            case 27:
            case 6:
            case 26:
            case 5:
            case 4:
            case 25:
            case 3:
            case 24:
            case 2:
            case 23:
            case 1:
            case 22:
            case 21:
                return true;
            default:
                break;
        }
        return false;
    }

    /**
     * Returns true if "arc" identifies a readable scalar object.
     */
    public boolean isReadable(long arc) {

        switch((int)arc) {
            case 47:
            case 46:
            case 45:
            case 44:
            case 43:
            case 42:
            case 10:
            case 41:
            case 9:
            case 8:
            case 7:
            case 27:
            case 6:
            case 26:
            case 5:
            case 4:
            case 25:
            case 3:
            case 24:
            case 2:
            case 23:
            case 1:
            case 22:
            case 21:
                return true;
            default:
                break;
        }
        return false;
    }


    // ------------------------------------------------------------
    // 
    // Implements the "skipVariable" method defined in "SnmpMibGroup".
    // See the "SnmpMibGroup" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public boolean  skipVariable(long var, Object data, int pduVersion) {
        return false;
    }

    /**
     * Return the name of the attribute corresponding to the SNMP variable identified by "id".
     */
    public String getAttributeName(long id)
        throws SnmpStatusException {
        switch((int)id) {
            case 47:
                return "TotalSMSFailuresYesterday";

            case 46:
                return "TotalSMSSuccessYesterday";

            case 45:
                return "TotalSMSProcessedYesterday";

            case 44:
                return "TotalEmailFailuresYesterday";

            case 43:
                return "TotalEmailSuccessYesterday";

            case 42:
                return "TotalEmailProcessedYesterday";

            case 10:
                return "TotalSMSFailures";

            case 41:
                return "TotalNotificationProcessedYesterday";

            case 9:
                return "TotalSMSSuccess";

            case 8:
                return "TotalSMSProcessed";

            case 7:
                return "TotalEmailFailures";

            case 27:
                return "TotalSMSFailuresToday";

            case 6:
                return "TotalEmailSuccess";

            case 26:
                return "TotalSMSSuccessToday";

            case 5:
                return "TotalEmailProcessed";

            case 4:
                return "TotalNotificationProcessed";

            case 25:
                return "TotalSMSProcessedToday";

            case 3:
                return "NotificationStatisticsReset";

            case 24:
                return "TotalEmailFailuresToday";

            case 2:
                return "NotificationStatisticsResetTime";

            case 23:
                return "TotalEmailSuccessToday";

            case 1:
                return "NotificationServiceUpTime";

            case 22:
                return "TotalEmailProcessedToday";

            case 21:
                return "TotalNotificationProcessedToday";

            default:
                break;
        }
        throw new SnmpStatusException(SnmpStatusException.noSuchObject);
    }

    /**
     * Returns true if "arc" identifies a table object.
     */
    public boolean isTable(long arc) {

        switch((int)arc) {
            default:
                break;
        }
        return false;
    }

    /**
     * Returns the table object identified by "arc".
     */
    public SnmpMibTable getTable(long arc) {
        return null;
    }

    /**
     * Register the group's SnmpMibTable objects with the meta-data.
     */
    public void registerTableNodes(SnmpMib mib, MBeanServer server) {
    }

    protected NotificationStatisticsMBean node;
    protected SnmpStandardObjectServer objectserver = null;
}
