<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE form-validation PUBLIC
          "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.1.3//EN"
          "http://jakarta.apache.org/commons/dtds/validator_1_1_3.dtd">
<!--

   This file contains the default Struts Validator pluggable validator
   definitions.  It should be placed somewhere under /WEB-INF and
   referenced in the struts-config.xml under the plug-in element
   for the ValidatorPlugIn.

      <plug-in className="org.apache.struts.validator.ValidatorPlugIn">
        <set-property property="pathnames" value="/WEB-INF/validator-rules.xml,
                                                  /WEB-INF/validation.xml"/>
      </plug-in>

   These are the default error messages associated with
   each validator defined in this file.  They should be
   added to your projects ApplicationResources.properties
   file or you can associate new ones by modifying the
   pluggable validators msg attributes in this file.

   # Struts Validator Error Messages
   errors.required={0} is required.
   errors.minlength={0} can not be less than {1} characters.
   errors.maxlength={0} can not be greater than {1} characters.
   errors.invalid={0} is invalid.

   errors.byte={0} must be a byte.
   errors.short={0} must be a short.
   errors.integer={0} must be an integer.
   errors.long={0} must be a long.
   errors.float={0} must be a float.
   errors.double={0} must be a double.

   errors.date={0} is not a date.
   errors.range={0} is not in the range {1} through {2}.
   errors.creditcard={0} is an invalid credit card number.
   errors.email={0} is an invalid e-mail address.
   
   errors.selectionRequired=Please Select {0}.

   Note: Starting in Struts 1.2.0 the default javascript definitions have
         been consolidated to commons-validator. The default can be overridden
         by supplying a <javascript> element with a CDATA section, just as
         in struts 1.1.

-->

<form-validation>

   <global>

      <validator name="required"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateRequired"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
                  msg="errors.required">
      </validator>
      <validator name="requiredif"
                 classname="org.apache.struts.validator.FieldChecks"
                 method="validateRequiredIf"
                 methodParams="java.lang.Object,
                               org.apache.commons.validator.ValidatorAction,
                               org.apache.commons.validator.Field,
                               org.apache.struts.action.ActionMessages,
                               org.apache.commons.validator.Validator,
                               javax.servlet.http.HttpServletRequest"
                 msg="errors.required"/>

      <validator name="validwhen"
          msg="errors.required"
                 classname="org.apache.struts.validator.validwhen.ValidWhen"
                 method="validateValidWhen"
                 methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"/>

      <validator name="minlength"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMinLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.minlength"
           jsFunction="org.apache.commons.validator.javascript.validateMinLength"/>


      <validator name="maxlength"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMaxLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.maxlength"
           jsFunction="org.apache.commons.validator.javascript.validateMaxLength"/>



      <validator name="mask"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateMask"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.invalid"/>


      <validator name="byte"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateByte"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.byte"
       jsFunctionName="ByteValidations"/>


      <validator name="short"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateShort"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.short"
       jsFunctionName="ShortValidations"/>


      <validator name="integer"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateInteger"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.integer"
       jsFunctionName="IntegerValidations"/>



      <validator name="long"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateLong"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.long"/>


      <validator name="float"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateFloat"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.float"
       jsFunctionName="FloatValidations"/>

      <validator name="double"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateDouble"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.double"/>


      <validator name="date"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateDate"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.date"
       jsFunctionName="DateValidations"/>


      <validator name="intRange"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateIntRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends="integer"
                  msg="errors.range"/>


      <validator name="floatRange"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateFloatRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends="float"
                  msg="errors.range"/>

      <validator name="doubleRange"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateDoubleRange"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends="double"
                  msg="errors.range"/>


      <validator name="creditCard"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateCreditCard"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.creditcard"/>


      <validator name="email"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateEmail"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.email"/>

      <validator name="url"
            classname="org.apache.struts.validator.FieldChecks"
               method="validateUrl"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
              depends=""
                  msg="errors.url"/>

     <validator name="selectionRequired"
            classname="com.elitecore.elitesm.util.validation.CustomValidator"
               method="validateSelectionRequired"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
                  msg="errors.selectionRequired"
               >
            <javascript><![CDATA[
			        function validateSelectionRequired(form) {
			        var isValid = true;
			        var focusField = null;
			        var i = 0;
			        var fields = new Array();
			        var formName = form.getAttributeNode("name");
			
			        oRequired = eval('new ' + formName.value + '_selectionRequired()');
			
			        for (x in oRequired) {
			            var field = form[oRequired[x][0]];
			            if (!isFieldPresent(field)) {
			                fields[i++] = oRequired[x][1];
			                isValid=false;
			            } else {
			                if ((field.type == 'hidden' ||
			                     field.type == 'text' ||
			                     field.type == 'textarea' ||
			                     field.type == 'file' ||
			                     field.type == 'checkbox' ||
			                     field.type == 'select-one' ||
			                     field.type == 'password') &&
			                     field.disabled == false) {
			                     var value = '0';
			                     // get field's value
			                     if (field.type == "select-one") {
			                         var si = field.selectedIndex;
			                         if (si >= 0) {
			                             value = field.options[si].value;
			                         }
			                     } else if (field.type == 'checkbox') {
			                         if (field.checked) {
			                             value = field.value;
			                         }
			                     } else {
			                         value = field.value;
			                     }
			                     if (trim(value) == '0') {
			
			                         if (i == 0) {
			                             focusField = field;
			                         }
			                         fields[i++] = oRequired[x][1];
			                         isValid = false;
			                     }
			                } else if (field.type == "select-multiple") { 
			                    var numOptions = field.options.length;
			                    lastSelected=-1;
			                    for(loop=numOptions-1;loop>=0;loop--) {
			                       if(field.options[loop].selected) {
			                           lastSelected = loop;
			                           value = field.options[loop].value;
			                           break;
			                       }
			                    }
			                    if(lastSelected < 0 || trim(value) == '0') {
			                       if(i == 0) {
			                           focusField = field;
			                       }
			                       fields[i++] = oRequired[x][1];
			                       isValid=false;
			                    }
			                } else if ((field.length > 0) && (field[0].type == 'radio' || field[0].type == 'checkbox')) {
			                    isChecked=-1;
			                    for (loop=0;loop < field.length;loop++) {
			                       if (field[loop].checked) {
			                           isChecked=loop;
			                           break; // only one needs to be checked
			                       }
			                    }
			                    if (isChecked < 0) {
			                       if (i == 0) {
			                           focusField = field[0];
			                       }
			                       fields[i++] = oRequired[x][1];
			                       isValid=false;
			                    }
			                }
			            }
			        }
			        if (fields.length > 0) {
			           if(isFieldFocusable(focusField)) {
			             focusField.focus();
			           }
			           alert(fields.join('\n'));
			        }
			        return isValid;
			    }
			    // Trim whitespace from left and right sides of s.
			    function trim(s) {
			        return s.replace( /^\s*/, "" ).replace( /\s*$/, "" );
			    }
			    function isFieldPresent(field) {
				      return !(field == null || field == undefined);
				}
				function isFieldFocusable(field) {
				      return (isFieldPresent(field) && 
				              field.type != 'hidden' &&
				              field.disabled == false);
				 }
			    ]]>
		 </javascript>     
   </validator> 
    
   <validator name="textareaMaxlength"
            classname="com.elitecore.elitesm.util.validation.CustomValidator"
               method="validateTextAreaMaxLength"
         methodParams="java.lang.Object,
                       org.apache.commons.validator.ValidatorAction,
                       org.apache.commons.validator.Field,
                       org.apache.struts.action.ActionMessages,
                       org.apache.commons.validator.Validator,
                       javax.servlet.http.HttpServletRequest"
                  msg="errors.textareaMaxlength"
               >
            <javascript><![CDATA[
			        function validateTextAreaMaxLength(form) {
				        var isValid = true;
				        var focusField = null;
				        var i = 0;
				        var fields = new Array();
				        var formName = form.getAttributeNode("name"); 
				
				        oMaxLength = eval('new ' + formName.value + '_textareaMaxlength()');
				        for (x in oMaxLength) {
				            var field = form[oMaxLength[x][0]];
				            if (!isFieldPresent(field)) {
				              continue;
				            }
				           if (field.type == 'textarea' &&
				               field.disabled == false) {
				                var iMax = parseInt(oMaxLength[x][2]("maxlength"));
				                if(!limitCheck(field,iMax)){
							        if (i == 0) {
				                        focusField = field;
				                    }
				                    fields[i++] = oMaxLength[x][1];
				                    isValid = false;
							   }
				            }
				        }
				        if (fields.length > 0) {
				           if(isFieldFocusable(focusField)) {
				             focusField.focus();
				           }
				           alert(fields.join('\n'));
				        }
				        return isValid;
				    }
			  
			    function isFieldPresent(field) {
				      return !(field == null || field == undefined);
				}
				function isFieldFocusable(field) {
				      return (isFieldPresent(field) && 
				              field.type != 'hidden' &&
				              field.disabled == false);
				 }
				function limitCheck(limitField,limit){
					   var fieldLength = parseInt(limitField.value.length);
					   var fieldlimit = parseInt(limit);
					   var field=limitField.value;
					   var decrementValue=parseInt(field.split(/\r/).length-1) + parseInt(field.split(/\n/).length-1);
					   fieldlimit = fieldlimit - 2*decrementValue; 
					   if(fieldLength>fieldlimit){
					    return false;
					   }else{
					    return true;
					   }
				 }
			    ]]>
		 </javascript>     
   </validator>  
     <!--
       This simply allows struts to include the validateUtilities into a page, it should
       not be used as a validation rule.
     -->
     <validator name="includeJavaScriptUtilities"
            classname=""
               method=""
         methodParams=""
              depends=""
                  msg=""
           jsFunction="org.apache.commons.validator.javascript.validateUtilities"/>

   </global>

</form-validation>
