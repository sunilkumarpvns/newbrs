<%@ page errorPage="/jsp/dashboardwidgets/WidgetsErrorHandler.jsp" %>
<LINK REL ="stylesheet" TYPE="text/css" HREF="${pageContext.request.contextPath}/css/dashboard/widjettable.css"/>

<% String dynaAuthServerWidgetID = request.getParameter("widgetId");%>
<div id="dynaAuthServer" style="overflow: auto; " class="widget-class">
	<div id="progressDivId<%=dynaAuthServerWidgetID%>" style="height: 200px;width: 100%;display: table;background-position: center;vertical-align: middle;text-align:center; " align="center">
 		<div style="display: table-cell;vertical-align: middle;">
 			<img src="<%=request.getContextPath()%>/images/loading1.gif" align="center" style="vertical-align: middle;"/>
 		</div>
	</div>
</div>	

<input type="hidden" name="editJsp" value="jsp/dashboardwidgets/aaawidgets/EditDynaAuthServerDetailsWidget.jsp?widgetId=<%=dynaAuthServerWidgetID%>" id="editJsp">
<span id="exportbtn_<%=dynaAuthServerWidgetID%>"></span>
<script>
var dynaAuthServerWidgetID=<%=dynaAuthServerWidgetID%>;
var confObj = getWidgetConfiguration(dynaAuthServerWidgetID);  <%-- Use ConfObj to retrive configuration --%>
var interval = 1;
var dynaAuthServerIp ="";
var dynaAuthServerWidgetName="";
if(confObj != null) {
	interval =  confObj.get("REFRESHINTERVAL");
	dynaAuthServerIp = confObj.get("CLIENTS");
	dynaAuthServerWidgetName=confObj.get("NAME");
}
var parentID = "dynaAuthServer_" + dynaAuthServerWidgetID + "_" +  new Date().getTime();  //  $('#dynaAuthServer').parent().parent().attr("id");
$('#dynaAuthServer').attr("id", parentID);
var data = {
		header : {
			id : parentID,
			type : "RAD_DYNA_AUTH_SERVER"
		},
		body : {
			interval : interval,
			aaaServerIds:dynaAuthServerIp
		}
};
	
getDashBoardSocket().register($("#"+parentID).createDefaultTableWidget(interval));
getDashBoardSocket().sendRequest(data);

/** Export Widget Functionality */
$('#exportbtn_'+<%=dynaAuthServerWidgetID%>).click(function(){
	var pageIndex=1;
	var dynaAuthServerArray = getDynaAuthServerDetailsTable();
	
	//Generate PDF in Landscap mode
	var generatePdfDoc = new jsPDF('landscape');
	
	//Set Properties to Doc files
	generatePdfDoc.setProperties({
        title: dynaAuthServerWidgetName,
        subject: 'Widget Type Name : Generated on '+getDateTime(),           
        author: 'AutoGenerated',
        keywords: 'generated, javascript, web 2.0, ajax',
        creator: 'EliteCSM SM'
   });
	
	//create new canvas
    var elitecore_Img = new Image();
    var canvas_Obj = document.createElement("canvas");
    var context_Obj = canvas_Obj.getContext('2d');
    canvas_Obj.height=77;
    canvas_Obj.width=213;
    elitecore_Img.src = $('#elitecore_Image').attr('src');

    context_Obj.drawImage(elitecore_Img,0,0,213,77);
    var nextcontent = canvas_Obj.toDataURL('image/jpeg');
    
    generatePdfDoc.addImage(nextcontent, 'JPEG',5 ,1,30.43,11);
	
	generatePdfDoc.setFontSize(8);
	generatePdfDoc.setTextColor(0); 
	    
	var pageWidth= generatePdfDoc.internal.pageSize.width;
	var pageHeight= generatePdfDoc.internal.pageSize.height;
	    
	//display pdf generate time in right side
	generatePdfDoc.text(pageWidth-50,10, "Generated on : " + getDateTime());
	    
	generatePdfDoc.setDrawColor(192,192,192); 
	generatePdfDoc.line(5,12 , pageWidth-5,12);
	    
	generatePdfDoc.text(pageWidth-20,pageHeight - 5, "Page : "+pageIndex );
	generatePdfDoc.line(5,pageHeight - 8 , pageWidth-5,pageHeight - 8);

	generatePdfDoc.setDrawColor(0);
	generatePdfDoc.setFillColor(1,81,152);
	generatePdfDoc.rect(5, 25, pageWidth-10, 5, 'F');
	    
	generatePdfDoc.setFontSize(8);
	generatePdfDoc.setTextColor(255);  
	    
	generatePdfDoc.text((pageWidth/2)-20, 28.5, dynaAuthServerWidgetName + " Details");
	 
	 //ESI Name - Rectangle
	generatePdfDoc.setDrawColor(217,230,246);
	generatePdfDoc.setFillColor(217,230,246);
	console.log("pagewidth : " +pageWidth);
	generatePdfDoc.rect(5, 35, pageWidth-10, 11, 'FD');
	
	//Create header of DynaAuth Server table
	
	generatePdfDoc.setFontSize(7);
	generatePdfDoc.setFontType("bold");
	generatePdfDoc.setTextColor(0); 
	var splitTitle = generatePdfDoc.splitTextToSize("ServerName", 20);
	generatePdfDoc.text(7, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Type", 15);
	generatePdfDoc.text(25, 39, "Type");
	
	splitTitle = generatePdfDoc.splitTextToSize( "Request", 15);
	generatePdfDoc.text(36, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Auth only Request", 15);
	generatePdfDoc.text(53, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Retrans. Request", 15);
	generatePdfDoc.text(75, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Ack", 15);
	generatePdfDoc.text(93, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Nack", 15);
	generatePdfDoc.text(106, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Nak AuthOnly Request", 18);
	generatePdfDoc.text(118, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Nak Session Not Exist Request", 18);
	generatePdfDoc.text(142, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Malformed Response", 15);
	generatePdfDoc.text(163, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "BadAuthenticators Responses", 15);
	generatePdfDoc.text(183, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Packet Dropped", 11);
	generatePdfDoc.text(206, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Pending Request", 10);
	generatePdfDoc.text(225, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Timeout", 10);
	generatePdfDoc.text(243, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Round Trip Time", 10);
	generatePdfDoc.text(262, 39, splitTitle);
	
	splitTitle = generatePdfDoc.splitTextToSize( "Unknown Type", 12);
	generatePdfDoc.text(279, 39, splitTitle);
	
	generatePdfDoc.setTextColor(0);  
	generatePdfDoc.setFontType("normal");
	var flag=1;
	var yIndex=59;
	  
	//generate Table
	$.each(dynaAuthServerArray,function(key,value){
	if (yIndex >= pageHeight-10)
	   	{
		    generatePdfDoc.addPage('a4','l');
	    	yIndex = 10; // Restart height position
	   		pageWidth= generatePdfDoc.internal.pageSize.width;
	   		pageHeight= generatePdfDoc.internal.pageSize.height;
	   	    pageIndex++;
	   	    generatePdfDoc.text(pageWidth-20,pageHeight - 5, "Page : "+pageIndex );
	   	    generatePdfDoc.line(5,pageHeight - 8 , pageWidth-5,pageHeight - 8);
	   	 
	   	}  
	 
	  splitTitle = generatePdfDoc.splitTextToSize(value.dynauthservername, 15);
	  generatePdfDoc.setTextColor(0);
	  generatePdfDoc.text(7, yIndex-7, splitTitle);
	  generatePdfDoc.setDrawColor(217,230,246);
	  generatePdfDoc.setFillColor(217,230,246);
	  
	  generatePdfDoc.setTextColor(1, 82, 152);
	  generatePdfDoc.text(26, yIndex-8, "DM");
	  generatePdfDoc.text(26, yIndex-2, "COA");
	  
	  //Disconnect Request
	  var disRequestLength = value.clientDisconRequests.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconRequests.toString());
      for(var i= disRequestLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(44 - charWidth * i, yIndex-8, str[i]);
       }
      
      //COA Request
      var coaRequestLength = value.radiusDynAuthClientCoARequests.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientCoARequests.toString());
      for(var i= coaRequestLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(44 - charWidth * i, yIndex-2, str[i]);
       }
      
      //Disconnect Auth only Request
      var disconnectAuthLength = value.clientDisconAuthOnlyRequests.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconAuthOnlyRequests.toString());
      for(var i= disconnectAuthLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(63 - charWidth * i, yIndex-8, str[i]);
      }
      
      //Coa Auth only Request
      var coaAuthRequest = value.clientCoAAuthOnlyRequest.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoAAuthOnlyRequest.toString());
      for(var i= coaAuthRequest - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(63 - charWidth * i, yIndex-2, str[i]);
      }
	  
      //DM - Retransmission
      var dmRetransLength = value.clientDisconRetransmissions.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconRetransmissions.toString());
      for(var i= dmRetransLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(84 - charWidth * i, yIndex-8, str[i]);
      }
      
      //COA - Retransmission
      var coaRetransLength = value.clientCoARetransmissions.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoARetransmissions.toString());
      for(var i= coaRetransLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(84 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Ack
      var dmAckLength = value.radiusDynAuthClientDisconAcks.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientDisconAcks.toString());
      for(var i= dmAckLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(97 - charWidth * i, yIndex-8, str[i]);
      }
      
      //COA - Ack
      var coaAckLength = value.radiusDynAuthClientCoAAcks.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientCoAAcks.toString());
      for(var i= coaAckLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(97 - charWidth * i, yIndex-2, str[i]);
      }
      
     //DM - Nack
      var dmNackLength = value.radiusDynAuthClientDisconNaks.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientDisconNaks.toString());
      for(var i= dmNackLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(111 - charWidth * i, yIndex-8, str[i]);
      }
      
      //Coa - Nack
      var coaNackLength = value.radiusDynAuthClientCoANaks.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientCoANaks.toString());
      for(var i= coaNackLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(111 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Nack Auth Only
      var dmNackAuthOnlyLength = value.clientDisconNakAuthOnlyRequest.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconNakAuthOnlyRequest.toString());
      for(var i= dmNackAuthOnlyLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(133 - charWidth * i, yIndex-8, str[i]);
      }
      
      //COA - Nack Auth Only
      var coaNackAuthOnlyLength = value.clientCoANakAuthOnlyRequest.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoANakAuthOnlyRequest.toString());
      for(var i= coaNackAuthOnlyLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(133 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Nack Auth Only
      var dmSessionNotExistLength = value.clientDisconNakSessNoContext.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconNakSessNoContext.toString());
      for(var i= dmSessionNotExistLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(156 - charWidth * i, yIndex-8, str[i]);
      }
      
      //COA - Nack Auth Only
      var coaSessionNotExistLength = value.clientCoANakSessNoContext.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoANakSessNoContext.toString());
      for(var i= coaSessionNotExistLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(156 - charWidth * i, yIndex-2, str[i]);
      }
	  
      //DM - Malformed Req Only
      var dmMalformedDisconnectResLength = value.clientMalformedDisconResponses.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientMalformedDisconResponses.toString());
      for(var i= dmMalformedDisconnectResLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(175 - charWidth * i, yIndex-8, str[i]);
      }
      
      
     //COA - Malformed Req Only
      var coaMalformedDisconnectResLength = value.clientMalformedCoAResponses.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientMalformedCoAResponses.toString());
      for(var i= coaMalformedDisconnectResLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(175 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Bad Authenticator
      var dmBadAuthenticatorLength = value.clientDisconBadAuthenticators.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconBadAuthenticators.toString());
      for(var i= dmBadAuthenticatorLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(197 - charWidth * i, yIndex-8, str[i]);
      }
      
      
     //COA - Bad Authenticator
      var coaBadAuthenticatorLength = value.clientCoABadAuthenticators.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoABadAuthenticators.toString());
      for(var i= coaBadAuthenticatorLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(197 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Packet Dropped
      var dmPacketDroppedLength = value.clientDisconPacketsDropped.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconPacketsDropped.toString());
      for(var i= dmPacketDroppedLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(215 - charWidth * i, yIndex-8, str[i]);
      }
      
     //COA - Packet Dropped
      var coaPacketDroppedLength = value.clientCoAPacketsDropped.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoAPacketsDropped.toString());
      for(var i= coaPacketDroppedLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(215 - charWidth * i, yIndex-2, str[i]);
      }
      
      //DM - Pending Request
      var dmPendingRequestLength = value.clientDisconPendingRequests.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconPendingRequests.toString());
      for(var i= dmPendingRequestLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(234 - charWidth * i, yIndex-8, str[i]);
      }
      
     //COA - Pending Request
      var coaPendingRequestLength = value.clientCoAPendingRequests.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientCoAPendingRequests.toString());
      for(var i= coaPendingRequestLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(234 - charWidth * i, yIndex-2, str[i]);
      }
      
      
      //DM - Timeout
      var dmTimeoutLength = value.clientDisconTimeouts.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientDisconTimeouts.toString());
      for(var i= dmTimeoutLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(252 - charWidth * i, yIndex-8, str[i]);
      }
      
     //COA - Timeout
      var coaTimeoutLength = value.radiusDynAuthClientCoATimeouts.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.radiusDynAuthClientCoATimeouts.toString());
      for(var i= coaTimeoutLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(252 - charWidth * i, yIndex-2, str[i]);
      }
      
      
      // Round Trip Time
      var coaRoundTripLength = value.clientRoundTripTime.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientRoundTripTime.toString());
      for(var i= coaRoundTripLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(265 - charWidth * i, yIndex-5, str[i]);
      }
      
      //Unknown Type
      var coaUnknownTypeLength = value.clientUnknownTypes.toString().length;
      var charWidth = 1.25;
      var str = reverse(value.clientUnknownTypes.toString());
      for(var i= coaUnknownTypeLength - 1;i>=0; i--){
    	  generatePdfDoc.setTextColor(0);
    	  generatePdfDoc.text(283 - charWidth * i, yIndex-5, str[i]);
      }
      
      
	  generatePdfDoc.setDrawColor(192,192,192); 
	  generatePdfDoc.line(5, yIndex, pageWidth-5, yIndex);
	  generatePdfDoc.line(23, yIndex-6.3, pageWidth-41, yIndex-6.3);
	  generatePdfDoc.line(256, 46,256,yIndex);
	  generatePdfDoc.line(275, 46,275,yIndex);
	  yIndex=yIndex+12;
		  
	  }); 
	  yIndex=yIndex-12;
	  generatePdfDoc.line(23, 46, 23, yIndex);
	  generatePdfDoc.line(35, 46, 35, yIndex);
	  
	 var data = generatePdfDoc.output();
	 var buffer = new ArrayBuffer(data.length);
	 var array = new Uint8Array(buffer);

	 for (var i = 0; i < data.length; i++) {
	      array[i] = data.charCodeAt(i);
	 }

	 var blob = new Blob(
	       [array],
	       {type: 'application/pdf', encoding: 'raw'}
	 );
	
	 saveAs(blob, dynaAuthServerWidgetName+'.pdf');
});

function reverse(s){
    return s.split("").reverse().join("");
}

function getDynaAuthServerDetailsTable(){
    var jResponseData="";
	$.ajax({
		url:'<%=request.getContextPath()%>/dashboardConfiguration.do?method=getDynaAuthServerData',
	    type:'GET',
	    async:false,
	    data:{serverIds:dynaAuthServerIp},
	    success: function(esiDataList){
	    	if(esiDataList != null)
	    	 jResponseData=esiDataList;  	
	    }
	}); 
	return jResponseData;
}
function getDateTime() {
    var now     = new Date(); 
    var year    = now.getFullYear();
    var month   = now.getMonth()+1; 
    var day     = now.getDate();
    var hour    = now.getHours();
    var minute  = now.getMinutes();
    var second  = now.getSeconds(); 
    if(month.toString().length == 1) {
        var month = '0'+month;
    }
    if(day.toString().length == 1) {
        var day = '0'+day;
    }   
    if(hour.toString().length == 1) {
        var hour = '0'+hour;
    }
    if(minute.toString().length == 1) {
        var minute = '0'+minute;
    }
    if(second.toString().length == 1) {
        var second = '0'+second;
    }   
    var dateTime = day+'/'+month+'/'+year+' '+hour+':'+minute+':'+second;   
     return dateTime;
}
</script>
