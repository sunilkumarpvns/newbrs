<%@ page errorPage="/jsp/dashboardwidgets/WidgetsErrorHandler.jsp" %>
<LINK REL ="stylesheet" TYPE="text/css" HREF="${pageContext.request.contextPath}/css/dashboard/widjettable.css"/>

<% String authRadClientWidgetID = request.getParameter("widgetId");%>
<div id="radAuthClient" style="overflow: auto; " class="widget-class">
	<div id="progressDivId<%=authRadClientWidgetID%>" style="height: 200px;width: 100%;display: table;background-position: center;vertical-align: middle;text-align:center; " align="center">
 		<div style="display: table-cell;vertical-align: middle;">
 			<img src="<%=request.getContextPath()%>/images/loading1.gif" align="center" style="vertical-align: middle;"/>
 		</div>
	</div>
</div>	

<input type="hidden" name="editJsp" value="jsp/dashboardwidgets/aaawidgets/EditAuthClientDetailsWidget.jsp?widgetId=<%=authRadClientWidgetID%>" id="editJsp">
<span id="exportbtn_<%=authRadClientWidgetID%>"></span>
<script>
var authRadClientWidgetID=<%=authRadClientWidgetID%>;
var confObj = getWidgetConfiguration(authRadClientWidgetID);  <%-- Use ConfObj to retrive configuration --%>
var interval = 1;
var authClientIps ="";
var clientWidgetName="";
if(confObj != null) {
	interval =  confObj.get("REFRESHINTERVAL");
	authClientIps = confObj.get("CLIENTS");
	clientWidgetName=confObj.get("NAME");
}
var parentID = "radAuthClient_" + authRadClientWidgetID + "_" +  new Date().getTime();  //  $('#radAuthClient').parent().parent().attr("id");
$('#radAuthClient').attr("id", parentID);
var data = {
		header : {
			id : parentID,
			type : "RAD_AUTH_CLIENT"
		},
		body : {
			interval : interval,
			aaaServerIds:authClientIps
		}
};
	
getDashBoardSocket().register($("#"+parentID).createDefaultTableWidget(interval));
getDashBoardSocket().sendRequest(data);

var pageIndex =1;
$('#exportbtn_'+<%=authRadClientWidgetID%>).click(function(){
	var authClientArrays = getAuthClientsDetails();
	
	//Generate PDF in Landscap mode
	var authClientsDoc = new jsPDF('landscape');
	
	//Set Properties to Doc files
	authClientsDoc.setProperties({
        title: clientWidgetName,
        subject: 'Widget Type Name : Generated on '+getDateTime(),           
        author: 'AutoGenerated',
        keywords: 'generated, javascript, web 2.0, ajax',
        creator: 'EliteCSM SM'
    });
	
	//create new canvas
    var elitecore_img_obj = new Image();
    var canvas_obj = document.createElement("canvas");
    var contex_obj = canvas_obj.getContext('2d');
    elitecore_img_obj.src =  $('#elitecore_Image').attr('src');
    canvas_obj.height=77;
    canvas_obj.width=213;
    
    contex_obj.drawImage(elitecore_img_obj,0,0,213,77);
    var nextcontent = canvas_obj.toDataURL('image/jpeg');
	
	authClientsDoc.addImage(nextcontent, 'JPEG',5 ,1,30.43,11);
	
	authClientsDoc.setFontSize(8);
	authClientsDoc.setTextColor(0); 
	    
	var pageWidth= authClientsDoc.internal.pageSize.width;
	var pageHeight= authClientsDoc.internal.pageSize.height;
	    
	//display pdf generation time
	authClientsDoc.text(pageWidth-50,10, "Generated on : " + getDateTime());
	    
	authClientsDoc.setDrawColor(192,192,192); 
	authClientsDoc.line(5,12 , pageWidth-5,12);
	     
	authClientsDoc.text(pageWidth-20,pageHeight - 5, "Page : "+pageIndex );
	authClientsDoc.line(5,pageHeight - 8 , pageWidth-5,pageHeight - 8);

	authClientsDoc.setDrawColor(0);
	authClientsDoc.setFillColor(1,81,152);
	authClientsDoc.rect(5, 25, pageWidth-10, 5, 'F');
	    
	authClientsDoc.setFontSize(8);
	authClientsDoc.setTextColor(255);  
	    
	authClientsDoc.text((pageWidth/2)-20, 28.5, clientWidgetName + " Details");
	 
	//ESI Name - Rectangle
	authClientsDoc.setDrawColor(217,230,246);
	authClientsDoc.setFillColor(217,230,246);
	authClientsDoc.rect(5, 35, pageWidth-10, 10, 'FD');
	 
	//setting header
	authClientsDoc.setFontSize(7);
	authClientsDoc.setFontType("bold");
	authClientsDoc.setTextColor(0); 
	var splitTitle = authClientsDoc.splitTextToSize("Client IP", 20);
	authClientsDoc.text(6, 39, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Access Requests", 20);
	authClientsDoc.text(37, 38.5, splitTitle);
	
	splitTitle = authClientsDoc.splitTextToSize( "Duplicate Access Request", 25);
	authClientsDoc.text(61, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Access Accept", 15);
	authClientsDoc.text(96, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Access Rejects", 20);
	authClientsDoc.text(120, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Access Challenges", 25);
	authClientsDoc.text(147, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Malformed Access Requests", 25);
	authClientsDoc.text(180, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Bad Authenticators", 20);
	authClientsDoc.text(213, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Packets Dropped", 20);
	authClientsDoc.text(245, 38.5, splitTitle);
	 
	splitTitle = authClientsDoc.splitTextToSize( "Unknown Types", 20);
	authClientsDoc.text(268, 38.5, splitTitle);
	 	 
	authClientsDoc.setTextColor(0);  
	authClientsDoc.setFontType("normal");
	var flag=1;
	    
	var yIndex=52;
	 
	//generate Table
	$.each(authClientArrays,function(key,value){
		  if (yIndex >= pageHeight-10)
	    	{
			    authClientsDoc.addPage('a4','l');
		    	yIndex = 10; // Restart height position
	    		pageWidth= authClientsDoc.internal.pageSize.width;
	    		pageHeight= authClientsDoc.internal.pageSize.height;
	    	    pageIndex++;
	    	    authClientsDoc.text(pageWidth-20,pageHeight - 5, "Page : "+pageIndex );
	    	    authClientsDoc.line(5,pageHeight - 8 , pageWidth-5,pageHeight - 8);
	    	 
	    	} 
		  
		 splitTitle = authClientsDoc.splitTextToSize(value.radiusAuthClientAddress, 25);
  		 authClientsDoc.text(6, yIndex-3, splitTitle);
  		  
  		 if( !(value.radiusAuthServAccessRequests == undefined)){
  			var accessRequestLength = value.radiusAuthServAccessRequests.toString().length;
  		  	var charWidth = 1.70;
  		  	var str = reverse(value.radiusAuthServAccessRequests.toString());
  		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
  				  authClientsDoc.text(48- charWidth * i, yIndex-2, str[i]);
  		 	}
  		 }else{
  			 var string="-";
			 var dmRequestLength = string.length;
			 var charWidth = 1.25;
			 var str = reverse(string);
			 for(var i= dmRequestLength - 1;i>=0; i--){
				 authClientsDoc.setTextColor(0);
				 authClientsDoc.text(48 - charWidth * i, yIndex-2, str[i]);
			 } 
  		 }
  		 
  		 if( !(value.dupAccessRequests == undefined)){
   			var accessRequestLength = value.dupAccessRequests.toString().length;
   		  	var charWidth = 1.70;
   		  	var str = reverse(value.dupAccessRequests.toString());
   		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
   				  authClientsDoc.text(80- charWidth * i, yIndex-2, str[i]);
   		 	}
   		 }else{
   			 var string="-";
 			 var dmRequestLength = string.length;
 			 var charWidth = 1.25;
 			 var str = reverse(string);
 			 for(var i= dmRequestLength - 1;i>=0; i--){
 				 authClientsDoc.setTextColor(0);
 				 authClientsDoc.text(80 - charWidth * i, yIndex-2, str[i]);
 			 } 
   		 }
  		 
  		 if( !(value.radiusAuthServAccessAccepts == undefined)){
    			var accessRequestLength = value.radiusAuthServAccessAccepts.toString().length;
    		  	var charWidth = 1.70;
    		  	var str = reverse(value.radiusAuthServAccessAccepts.toString());
    		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
    				  authClientsDoc.text(103.5- charWidth * i, yIndex-2, str[i]);
    		 	}
         }else{
    			 var string="-";
  			 var dmRequestLength = string.length;
  			 var charWidth = 1.25;
  			 var str = reverse(string);
  			 for(var i= dmRequestLength - 1;i>=0; i--){
  				 authClientsDoc.setTextColor(0);
  				 authClientsDoc.text(103.5 - charWidth * i, yIndex-2, str[i]);
  			 } 
    	}
  		 
  		 if( !(value.radiusAuthServAccessRejects == undefined)){
 			var accessRequestLength = value.radiusAuthServAccessRejects.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.radiusAuthServAccessRejects.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(137- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(137 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
  		 
  		 
  		if( !(value.radiusAuthServAccessChallenges == undefined)){
 			var accessRequestLength = value.radiusAuthServAccessChallenges.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.radiusAuthServAccessChallenges.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(168.5- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(168.5 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
  		
  		
  		if( !(value.malformedAccessRequests == undefined)){
 			var accessRequestLength = value.malformedAccessRequests.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.malformedAccessRequests.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(201- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(201 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
  		
  		
  		if( !(value.badAuthenticators == undefined)){
 			var accessRequestLength = value.badAuthenticators.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.badAuthenticators.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(229.5- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(229.5 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
  		
  		if( !(value.radiusAuthServPacketsDropped == undefined)){
 			var accessRequestLength = value.radiusAuthServPacketsDropped.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.radiusAuthServPacketsDropped.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(254- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(254 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
  		
  		if( !(value.radiusAuthServUnknownTypes == undefined)){
 			var accessRequestLength = value.radiusAuthServUnknownTypes.toString().length;
 		  	var charWidth = 1.70;
 		  	var str = reverse(value.radiusAuthServUnknownTypes.toString());
 		  	for(var i = accessRequestLength-1 ; i >= 0 ; i--){			  
 				  authClientsDoc.text(286- charWidth * i, yIndex-2, str[i]);
 		 	}
	      }else{
	 			 var string="-";
				 var dmRequestLength = string.length;
				 var charWidth = 1.25;
				 var str = reverse(string);
				 for(var i= dmRequestLength - 1;i>=0; i--){
					 authClientsDoc.setTextColor(0);
					 authClientsDoc.text(286 - charWidth * i, yIndex-2, str[i]);
				 } 
	 	}
		
		  authClientsDoc.setDrawColor(192,192,192); 
		  authClientsDoc.line(5, yIndex, pageWidth-5, yIndex);
		  yIndex=yIndex+7;
		  
	  }); 
	 
	 
	 var data = authClientsDoc.output();
	 var buffer = new ArrayBuffer(data.length);
	 var array = new Uint8Array(buffer);

	 for (var i = 0; i < data.length; i++) {
	      array[i] = data.charCodeAt(i);
	 }

	 var blob = new Blob(
	       [array],
	       {type: 'application/pdf', encoding: 'raw'}
	 );
	
	 saveAs(blob, clientWidgetName+'.pdf');
});

function reverse(s){
    return s.split("").reverse().join("");
}

function getAuthClientsDetails(){
    var jResponseData="";
	$.ajax({
		url:'<%=request.getContextPath()%>/dashboardConfiguration.do?method=getAuthClientData',
	    type:'GET',
	    async:false,
	    data:{serverIds:authClientIps},
	    success: function(esiDataList){
	    	if(esiDataList != null)
	    	 jResponseData=esiDataList;  	
	    }
	}); 
	return jResponseData;
}
function getDateTime() {
    var now     = new Date(); 
    var year    = now.getFullYear();
    var month   = now.getMonth()+1; 
    var day     = now.getDate();
    var hour    = now.getHours();
    var minute  = now.getMinutes();
    var second  = now.getSeconds(); 
    if(month.toString().length == 1) {
        var month = '0'+month;
    }
    if(day.toString().length == 1) {
        var day = '0'+day;
    }   
    if(hour.toString().length == 1) {
        var hour = '0'+hour;
    }
    if(minute.toString().length == 1) {
        var minute = '0'+minute;
    }
    if(second.toString().length == 1) {
        var second = '0'+second;
    }   
    var dateTime = day+'/'+month+'/'+year+' '+hour+':'+minute+':'+second;   
     return dateTime;
}
</script>
