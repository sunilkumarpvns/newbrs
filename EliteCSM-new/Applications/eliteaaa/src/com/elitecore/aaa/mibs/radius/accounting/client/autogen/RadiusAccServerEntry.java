package com.elitecore.aaa.mibs.radius.accounting.client.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RADIUS-ACC-CLIENT-MIB.
//

// java imports
//
import java.io.Serializable;

import com.sun.management.snmp.SnmpStatusException;
import com.sun.management.snmp.agent.SnmpMib;
// jmx imports
//
// jdmk imports
//

/**
 * The class is used for implementing the "RadiusAccServerEntry" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.67.2.2.1.1.3.1.
 */
public class RadiusAccServerEntry implements RadiusAccServerEntryMBean, Serializable {

    /**
     * Variable for storing the value of "RadiusAccClientBadAuthenticators".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.9".
     *
     * "The number of RADIUS Accounting-Response
     * packets which contained invalid authenticators
     * received from this server."
     *
     */
    protected Long RadiusAccClientBadAuthenticators = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientMalformedResponses".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.8".
     *
     * "The number of malformed RADIUS Accounting-Response
     * packets received from this server. Malformed packets
     * include packets with an invalid length. Bad
     * authenticators and unknown types are not included as
     * malformed accounting responses."
     *
     */
    protected Long RadiusAccClientMalformedResponses = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientResponses".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.7".
     *
     * "The number of RADIUS packets received on the
     * accounting port from this server."
     *
     */
    protected Long RadiusAccClientResponses = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientRetransmissions".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.6".
     *
     * "The number of RADIUS Accounting-Request packets
     * retransmitted to this RADIUS accounting server.
     * Retransmissions include retries where the
     * Identifier and Acct-Delay have been updated, as
     * well as those in which they remain the same."
     *
     */
    protected Long RadiusAccClientRetransmissions = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.5".
     *
     * "The number of RADIUS Accounting-Request packets
     * sent. This does not include retransmissions."
     *
     */
    protected Long RadiusAccClientRequests = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientPacketsDropped".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.13".
     *
     * "The number of RADIUS packets which were received from
     * this server on the accounting port and dropped for some
     * other reason."
     *
     */
    protected Long RadiusAccClientPacketsDropped = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientRoundTripTime".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.4".
     *
     * "The time interval between the most recent
     * Accounting-Response and the Accounting-Request that
     * matched it from this RADIUS accounting server."
     *
     */
    protected Long RadiusAccClientRoundTripTime = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientServerPortNumber".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.3".
     *
     * "The UDP port the client is using to send requests to
     * this server."
     *
     */
    protected Integer RadiusAccClientServerPortNumber = new Integer(1);

    /**
     * Variable for storing the value of "RadiusAccClientUnknownTypes".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.12".
     *
     * "The number of RADIUS packets of unknown type which
     * were received from this server on the accounting port."
     *
     */
    protected Long RadiusAccClientUnknownTypes = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccClientTimeouts".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.11".
     *
     * "The number of accounting timeouts to this server.
     * After a timeout the client may retry to the same
     * server, send to a different server, or give up.
     * A retry to the same server is counted as a
     * retransmit as well as a timeout. A send to a different
     * server is counted as an Accounting-Request as well as
     * a timeout."
     *
     */
    protected Long RadiusAccClientTimeouts = new Long(1);

    /**
     * Variable for storing the value of "RadiusAccServerAddress".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.2".
     *
     * "The IP address of the RADIUS accounting server
     * referred to in this table entry."
     *
     */
    protected String RadiusAccServerAddress = new String("192.9.9.100");

    /**
     * Variable for storing the value of "RadiusAccServerIndex".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.1".
     *
     * "A number uniquely identifying each RADIUS
     * Accounting server with which this client
     * communicates."
     *
     */
    protected Integer RadiusAccServerIndex = new Integer(1);

    /**
     * Variable for storing the value of "RadiusAccClientPendingRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.2.2.1.1.3.1.10".
     *
     * "The number of RADIUS Accounting-Request packets
     * sent to this server that have not yet timed out or
     * received a response. This variable is incremented when an
     * Accounting-Request is sent and decremented due to
     * receipt of an Accounting-Response, a timeout or
     * a retransmission."
     *
     */
    protected Long RadiusAccClientPendingRequests = new Long(1);


    /**
     * Constructor for the "RadiusAccServerEntry" group.
     */
    public RadiusAccServerEntry(SnmpMib myMib) {
    }

    public RadiusAccServerEntry() {
	}
    
    /**
     * Getter for the "RadiusAccClientBadAuthenticators" variable.
     */
    public Long getRadiusAccClientBadAuthenticators() throws SnmpStatusException {
        return RadiusAccClientBadAuthenticators;
    }

    /**
     * Getter for the "RadiusAccClientMalformedResponses" variable.
     */
    public Long getRadiusAccClientMalformedResponses() throws SnmpStatusException {
        return RadiusAccClientMalformedResponses;
    }

    /**
     * Getter for the "RadiusAccClientResponses" variable.
     */
    public Long getRadiusAccClientResponses() throws SnmpStatusException {
        return RadiusAccClientResponses;
    }

    /**
     * Getter for the "RadiusAccClientRetransmissions" variable.
     */
    public Long getRadiusAccClientRetransmissions() throws SnmpStatusException {
        return RadiusAccClientRetransmissions;
    }

    /**
     * Getter for the "RadiusAccClientRequests" variable.
     */
    public Long getRadiusAccClientRequests() throws SnmpStatusException {
        return RadiusAccClientRequests;
    }

    /**
     * Getter for the "RadiusAccClientPacketsDropped" variable.
     */
    public Long getRadiusAccClientPacketsDropped() throws SnmpStatusException {
        return RadiusAccClientPacketsDropped;
    }

    /**
     * Getter for the "RadiusAccClientRoundTripTime" variable.
     */
    public Long getRadiusAccClientRoundTripTime() throws SnmpStatusException {
        return RadiusAccClientRoundTripTime;
    }

    /**
     * Getter for the "RadiusAccClientServerPortNumber" variable.
     */
    public Integer getRadiusAccClientServerPortNumber() throws SnmpStatusException {
        return RadiusAccClientServerPortNumber;
    }

    /**
     * Getter for the "RadiusAccClientUnknownTypes" variable.
     */
    public Long getRadiusAccClientUnknownTypes() throws SnmpStatusException {
        return RadiusAccClientUnknownTypes;
    }

    /**
     * Getter for the "RadiusAccClientTimeouts" variable.
     */
    public Long getRadiusAccClientTimeouts() throws SnmpStatusException {
        return RadiusAccClientTimeouts;
    }

    /**
     * Getter for the "RadiusAccServerAddress" variable.
     */
    public String getRadiusAccServerAddress() throws SnmpStatusException {
        return RadiusAccServerAddress;
    }

    /**
     * Getter for the "RadiusAccServerIndex" variable.
     */
    public Integer getRadiusAccServerIndex() throws SnmpStatusException {
        return RadiusAccServerIndex;
    }

    /**
     * Getter for the "RadiusAccClientPendingRequests" variable.
     */
    public Long getRadiusAccClientPendingRequests() throws SnmpStatusException {
        return RadiusAccClientPendingRequests;
    }

}
