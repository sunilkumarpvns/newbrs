<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Automation_plan_6622" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Mapping Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mapping_file_name" elementType="Argument">
            <stringProp name="Argument.name">mapping_file_name</stringProp>
            <stringProp name="Argument.value">PCRF_Radius_Mapping.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Load Global Variable" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">global.variables</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">::</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="REST Default Parameters" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
        <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Basic YWRtaW46YWRtaW4=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter_plugins.radius_client.config.RadiusClientConfigGui" testclass="ConfigTestElement" testname="TTS Radius Client Configuration" enabled="true">
        <stringProp name="RadiusClientSampler.SERVER_ADDRESS">${serverip}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_AUTH">${radiusport}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_ACC">${radiusport}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_DM_CoA"></stringProp>
        <stringProp name="RadiusClientSampler..AUTH_USERNAME">${radiusshared}</stringProp>
        <stringProp name="RadiusClientSampler..SAUTH_PASSWORD">${radiusshared}</stringProp>
        <stringProp name="RadiusClientSampler..AUTH_SHARED_SECRED">${radiusshared}</stringProp>
        <stringProp name="TestPlan.comments">netvertex is client so provide ip of netvertex in hostname</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter_plugins.radius_server.config.RadiusServerConfigGui" testclass="ConfigTestElement" testname="TTS Radius Server Configuration" enabled="true">
        <stringProp name="RadiusServerSampler.SERVER_ADDRESS">${jmeterip}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_AUTH">${jmeterport}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_ACC">${jmeterport}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_COA_DM"></stringProp>
        <stringProp name="RadiusServerSampler.AUTH_USERNAME"></stringProp>
        <stringProp name="RadiusServerSampler.SAUTH_PASSWORD"></stringProp>
        <stringProp name="RadiusServerSampler.AUTH_SHARED_SECRED">${radiusshared}</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@${dbserverip}:${dbserverport}/${dbserversid}</stringProp>
        <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbpassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${dbusername}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="SPR Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">SPR_DB</stringProp>
        <stringProp name="dbUrl">${spr_db_url}</stringProp>
        <stringProp name="driver">${spr_db_driver}</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${spr_db_username}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${spr_db_username}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1001" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify Basic Radius Call Flow without Quota Profile</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1001(Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify that NV is not doing Usage Metering when Quota profile is not configured. </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1001_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1001_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25254</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1001_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">4992ae49-9c8f-42cd-9775-d950dcbf02b4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1001_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="constant timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1001" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1001 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;4992ae49-9c8f-42cd-9775-d950dcbf02b4&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1001_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 13:08:45&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;b8c6f722-f60f-4201-baca-2ae2baf959ee&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 13:09:05&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1001_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;565cca3e-536c-4c4c-ab15-da947e1f90f3&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;b461ee77-a415-4556-96b4-f03ba484a01f&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_1001_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_1001_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows/&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              <stringProp name="TestPlan.comments">check for access accept</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Unknown</stringProp>
              <stringProp name="RadiusAssertion.avpData.0"></stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Waiting for COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get Session By IP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Verify DB Session" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update 300" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">3</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">150</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.4">150</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Not Reported" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="usage not found Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="970349585">&lt;/responseCode&gt;&lt;responseMessage&gt;Current usage not found with subscriber identity: ${username}&lt;/responseMessage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota not reported JDBC req" enabled="true">
            <stringProp name="dataSource">${jdbcvar}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select CUSTOM_TOTAL from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1650070028">CUSTOM_TOTAL
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1001" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1002" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify Radius Basic Call flow with Unlimited Quota profile.</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1002 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify Basic Radius Call Flow with Unlimited Quota Profile</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1002_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1002_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25255</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1002_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">054ced45-3a6d-4d32-8137-8f1fc349e623</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1002_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1002" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1002 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;054ced45-3a6d-4d32-8137-8f1fc349e623&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1002_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 14:56:05&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;c1c7d358-f7de-41fa-9b9b-11e0d59937ef&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 14:56:19&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1002_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;ab8ed087-1d06-44a3-a54c-af4b4b4e8095&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;7c68c20b-cbde-4993-97c2-c311c55e5601&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 14:56:49&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1002_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;d04eb18c-e01d-482f-b02f-c1517fc550ba&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;34738fd7-03af-4be4-8654-d3de26a33bc2&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_1002_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_1002_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows/&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;c1c7d358-f7de-41fa-9b9b-11e0d59937ef&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1002_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session created JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update 500MB " enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 500MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="43852204">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="184095837">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1464901726">&lt;dailyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1979675969">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="679272450">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1040075533">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select CUSTOM_TOTAL from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1864504983">CUSTOM_TOTAL
524288000
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 500 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1002" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1004" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and verify the behavior of netvertex server when configured time base condition and duration in single package.</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1004 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and verify the behavior for time base condition and duration in single package.</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1004_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1004_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25256</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1004_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">0f009a43-ebcb-4aaa-b713-c5695fd3315c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1004_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1004" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1004 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
    &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;0f009a43-ebcb-4aaa-b713-c5695fd3315c&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1004_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 07/24/2017 10:38:15&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;47b5107e-3f3b-4c65-973b-e07890e0ef40&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 07/24/2017 10:39:34&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;rtc_1004_quota_profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;113dfc3b-575e-4e35-bca6-c13e20ba5851&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;bfff105c-734c-4e39-9523-e5379cf15648&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 07/24/2017 10:39:49&lt;/description&gt;&#xd;
                    &lt;duration&gt;1&lt;/duration&gt;&#xd;
                    &lt;name&gt;rtc_1004_qos_profile&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;2&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;2&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;1659326c-c52c-4dcb-9cfc-ac021eb6138b&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;96f3508e-c5a4-49e8-ad6b-5ab0365d083b&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;rtc_1004_hsq_pcc&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;rtc_1004_hsq_pcc&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Static&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;7f8831d6-1dea-4589-95dc-5ed6b009c72e&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;ef463a70-3bb2-4f39-b13a-d039ab26bc47&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;47b5107e-3f3b-4c65-973b-e07890e0ef40&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;rtc_1004_quota_profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;    &#xd;
        &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Unknown</stringProp>
              <stringProp name="RadiusAssertion.avpData.0"></stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Waiting for COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA request received" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session created JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 min" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">59996</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen DM request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
              <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer DM" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1004" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1005" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify that NV is not doing Usage Metering when Quota profile is not configured(without pcc)</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1005 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify that NV is not doing Usage Metering when Quota profile is not configured. </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1005_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RTC_1005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25258</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1005_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">d5019b89-fe1a-4df6-95aa-635fe16d44d4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1005_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="constant timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1005" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1005 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;d5019b89-fe1a-4df6-95aa-635fe16d44d4&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1005_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 15:43:10&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;7c06fa21-67cf-4124-89a8-e8f8f5f0890d&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 15:43:26&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1005_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;6b3d17a4-5e16-40bc-a551-e08c63aa5f90&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              <stringProp name="TestPlan.comments">check for access accept</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Unknown</stringProp>
              <stringProp name="RadiusAssertion.avpData.0"></stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Waiting for COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get Session By IP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Verify DB Session" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update 300" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">3</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">150</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.4">150</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Not Reported" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="usage not found Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="970349585">&lt;/responseCode&gt;&lt;responseMessage&gt;Current usage not found with subscriber identity: ${username}&lt;/responseMessage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota not reported JDBC req" enabled="true">
            <stringProp name="dataSource">${jdbcvar}</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1650070028">CUSTOM_TOTAL
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1005" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1006" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify Radius Basic Call flow with Unlimited Quota profile.(without pcc)</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1006 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify Basic Radius Call Flow with Unlimited Quota Profile</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1006_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1006_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.6</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25259</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1006_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">c215d130-7742-4fa3-8ecb-45e9142abc8b</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1006_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1006" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1006 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;c215d130-7742-4fa3-8ecb-45e9142abc8b&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1006_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 15:50:05&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;ee601d4f-e316-4fbc-84c0-5deac008a0ba&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 15:50:18&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1006_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;c2e3a9e1-5907-41ed-8290-a3ed318ab557&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;90fe512c-599a-4205-8129-7fe43c4adca2&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 15:50:34&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1006_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;bb91fc89-29e2-4dcd-92d5-8669bd87116c&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;ee601d4f-e316-4fbc-84c0-5deac008a0ba&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1006_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session created JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update 500MB " enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 500MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="43852204">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="184095837">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1464901726">&lt;dailyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1979675969">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="679272450">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1040075533">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1864504983">CUSTOM_TOTAL
524288000
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 500 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1006" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1008" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Verify Subscriber Profile Authentication based on CALLING STATION ID and NAS PORT ID when  configured in SPR and Received in Request</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1008 (Cumulative)" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1008_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1008_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.8</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="callingstationid1" elementType="Argument">
                <stringProp name="Argument.name">callingstationid1</stringProp>
                <stringProp name="Argument.value">1111111008</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nasportid1" elementType="Argument">
                <stringProp name="Argument.name">nasportid1</stringProp>
                <stringProp name="Argument.value">55</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="callingstationid2" elementType="Argument">
                <stringProp name="Argument.name">callingstationid2</stringProp>
                <stringProp name="Argument.value">1234567890</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="nasportid2" elementType="Argument">
                <stringProp name="Argument.name">nasportid2</stringProp>
                <stringProp name="Argument.value">44</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25253</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1008_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">4ca94e21-5c23-4000-8803-e6e197232f78</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1008_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="TestPlan.comments">Verify Subscriber Profile Authentication based on CALLING STATION ID and NAS PORT ID when  configured in SPR and Received in Request</stringProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1008" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1008 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;4ca94e21-5c23-4000-8803-e6e197232f78&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1008_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 15:56:07&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;670c14ae-66cc-455b-9e7f-58e2ddcdc17f&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 15:57:01&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1008_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;896529cd-8d1e-4417-96ea-5a5bf79737f4&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;d1619796-8dda-4384-8d0f-18deb950b694&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 15:57:16&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1008_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;2&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;2&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;f2ea9f71-a1a8-44cf-b56e-8ad350350d67&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;521e5833-2259-4a12-89a3-3945c6b983d7&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_1008_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_1008_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows/&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;670c14ae-66cc-455b-9e7f-58e2ddcdc17f&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1008_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-803016769">PD: Reload Policy</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;CALLING_STATION_ID&lt;/key&gt;
                  &lt;value&gt;${callingstationid1}&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;NAS_PORT_ID&lt;/key&gt;
                  &lt;value&gt;${nasportid1}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(1c)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${callingstationid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(1n)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(11)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${callingstationid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(0n)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Reply-Message</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">Invalid NAS-Port-Id</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(0c)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${callingstationid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Reply-Message</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">Invalid Calling-Station-Id</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(1c0n)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${callingstationid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Reply-Message</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">Invalid NAS-Port-Id</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(0c1n)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid1}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${callingstationid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Reply-Message</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">Invalid Calling-Station-Id</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request(00)" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-Port-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasportid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Calling-Station-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${callingstationid2}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${password}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Reply-Message</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">Invalid Calling-Station-Id</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1008" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1009" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify that NetVertex is allowing user to go up to two levels of FUP</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1009 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify that NetVertex is allowing user to go up to two levels of FUP Cumulative</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1009_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1009_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111009</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.9</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25261</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1009_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">d50ccd96-d6d1-4241-8b32-f8e526f5e8b2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1009_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1009" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1009 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;d50ccd96-d6d1-4241-8b32-f8e526f5e8b2&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1009_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 07/24/2017 10:33:31&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;a4af421d-95a8-4f13-b370-ea90228122c3&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 07/24/2017 10:35:45&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;rtc_1009_quota_profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;e383acb8-5968-404c-a397-1e7425cdf452&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;200&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;3e4dccdb-6f33-4b89-b33e-707e0355ec71&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;300&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;4cb5637d-daf2-484b-9298-5e42e2f20ffa&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;500&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;40e505fe-b030-4f4e-b570-4e8699eecf05&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 07/24/2017 10:36:37&lt;/description&gt;&#xd;
                    &lt;name&gt;rtc_1009_qos_profile&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;904d9f36-50c6-4fb5-90ba-32d43787247e&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;203d0002-6d33-4646-ae49-e2527a2cb101&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;rtc_1009_hsq_pcc&lt;/name&gt;&#xd;
                                    &lt;precedence&gt;999&lt;/precedence&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;rtc_1009_hsq_pcc&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;gbrdlUnit&gt;Kbps&lt;/gbrdlUnit&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Static&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;500&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;0726c82f-d98e-4922-a899-c5978f085787&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;a7d8befe-c54e-4bc6-a789-f505ba730151&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;500&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;512&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;512&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;87077966-c9c0-460d-9166-17fb3dbbc6b3&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;b0100033-8c11-4f5c-8106-45cba6e29c8d&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;rtc_1009_fup1_pcc&lt;/name&gt;&#xd;
                                    &lt;precedence&gt;999&lt;/precedence&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;rtc_1009_fup1_pcc&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;gbrdlUnit&gt;Kbps&lt;/gbrdlUnit&gt;&#xd;
                                    &lt;mbrdl&gt;512&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;512&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Static&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;b63da3de-ea57-4a32-bb33-3079c1f633a5&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;5ece312a-186b-4961-ba1d-d40ff871483e&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;500&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;256&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;256&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;8fd43e0d-626d-428c-82d3-a6f275394837&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;a260017f-beae-4e6d-8351-3bf1094678e3&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;rtc_1009_fup2_pcc&lt;/name&gt;&#xd;
                                    &lt;precedence&gt;999&lt;/precedence&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;rtc_1009_fup2_pcc&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;gbrdlUnit&gt;Kbps&lt;/gbrdlUnit&gt;&#xd;
                                    &lt;mbrdl&gt;256&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;256&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Static&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;a9b150a4-8861-4dcf-ac21-1fc35d072ef5&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;3b94a328-5b6b-428e-8b41-bf2773c45c0b&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;500&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;a4af421d-95a8-4f13-b370-ea90228122c3&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;rtc_1009_quota_profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="TestPlan.comments">step 1</stringProp>
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="TestPlan.comments">step 2</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session created JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 400 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 3</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">209715200</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="TestPlan.comments">this will check that after session flush quota is reported or not</stringProp>
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1888172671">CUSTOM_TOTAL
419430400
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 400MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-755284569">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="43739586">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2030928797">&lt;dailyUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1858353020">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-119864323">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-506119656">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 500 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 4</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1864504983">CUSTOM_TOTAL
524288000
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 500MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="43852204">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="184095837">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1464901726">&lt;dailyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1979675969">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="679272450">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1040075533">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 770 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 5</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">403701760</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">403701760</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-659132733">CUSTOM_TOTAL
807403520
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 770MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1914536855">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-7763136">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="871676511">&lt;dailyUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="375760830">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1279116609">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="778162710">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 800 MB" enabled="true">
            <stringProp name="TestPlan.comments">Step 6</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">419430400</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">419430400</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 800MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="429638554">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1216471175">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1079115376">&lt;dailyUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-300125787">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1065058800">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1300514063">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 1000 MB" enabled="true">
            <stringProp name="TestPlan.comments">Step 7</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">524288000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">524288000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">rtc52</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 1000MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045288828">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="702772195">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740924538">&lt;dailyUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1384456069">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1409868582">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="2046013689">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen DM request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
              <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer DM" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="TestPlan.comments">step 8 : </stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate(fail) Request" enabled="true">
            <stringProp name="TestPlan.comments">step 9 : No quota left so access will be rejected</stringProp>
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1009" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1010" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Check and Verify that NetVertex is allowing user to go up to two levels of FUP (without pcc)</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1010 (Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments">Check and Verify Basic Radius Call Flow with Unlimited Quota Profile (cumulative)</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1010_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_1010_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">25262</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1010_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">6bbe540b-b3e7-4094-89aa-8d5dc6843b24</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1010_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="wait for all" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1010" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_1010 Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;6bbe540b-b3e7-4094-89aa-8d5dc6843b24&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_1010_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2017 16:01:32&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;cb26571e-1e70-45f5-a6d1-b61567c2ce04&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 16:02:04&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1010_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;4d8326b6-0cdc-4bd6-b213-3f23736e3610&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;300&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;c52f3193-946a-4721-99b9-57bcfc3258e7&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;200&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;61138372-1cc0-4970-8485-7ad132558670&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;500&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;11d1697a-ed0a-459c-84c9-6ada788234dd&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2017 16:02:37&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_1010_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;7a396613-18bc-4057-b486-16521f9e2448&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;500&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;512&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;512&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;cc3350ea-e79f-4cdd-a707-aa6596464120&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;270&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;256&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;256&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;e6308267-ed5e-4b36-a4ab-7d69d148e27a&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;200&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;cb26571e-1e70-45f5-a6d1-b61567c2ce04&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_1010_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;            &#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="TestPlan.comments">step 1</stringProp>
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="TestPlan.comments">step 2</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Get session" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session created JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;

</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-116611706">CORE_SESSION_ID
${sessionid}:RADIUS:${nasip}
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if session id is present or not</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 400 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 3</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">209715200</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="TestPlan.comments">this will check that after session flush quota is reported or not</stringProp>
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1888172671">CUSTOM_TOTAL
419430400
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 400MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-755284569">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="43739586">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2030928797">&lt;dailyUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1858353020">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-119864323">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;209715200&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-506119656">&lt;totalOctets&gt;419430400&lt;/totalOctets&gt;&lt;uploadOctets&gt;209715200&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 500 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 4</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1864504983">CUSTOM_TOTAL
524288000
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 500MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="43852204">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="184095837">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1464901726">&lt;dailyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1979675969">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="679272450">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;262144000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1040075533">&lt;totalOctets&gt;524288000&lt;/totalOctets&gt;&lt;uploadOctets&gt;262144000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 770 MB" enabled="true">
            <stringProp name="TestPlan.comments">step 5</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">403701760</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">403701760</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="quota reported JDBC req" enabled="true">
            <stringProp name="dataSource">SPR_DB</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">select custom_total from tblt_usage where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-659132733">CUSTOM_TOTAL
807403520
</stringProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">check if 300 usage reported or not</stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 770MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1914536855">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-7763136">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="871676511">&lt;dailyUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="375760830">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1279116609">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;403701760&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="778162710">&lt;totalOctets&gt;807403520&lt;/totalOctets&gt;&lt;uploadOctets&gt;403701760&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 800 MB" enabled="true">
            <stringProp name="TestPlan.comments">Step 6</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">419430400</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">419430400</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <stringProp name="TestPlan.comments">here we build servers answer. all fields are empty, becouse they are loaded from configuration</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <stringProp name="TestPlan.comments">this is ack for COA request</stringProp>
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 800MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="429638554">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1216471175">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1079115376">&lt;dailyUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-300125787">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1065058800">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;419430400&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="1300514063">&lt;totalOctets&gt;838860800&lt;/totalOctets&gt;&lt;uploadOctets&gt;419430400&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update with 1000 MB" enabled="true">
            <stringProp name="TestPlan.comments">Step 7</stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">3</stringProp>
            <stringProp name="RadiusSampler.avpName.1">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.2">524288000</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">524288000</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">rtc52</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Quota Reported 1000MB" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsListUsageMonitoringInformation&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${username}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileId&gt;&lt;/quotaProfileId&gt;
         &lt;!--Optional:--&gt;
         &lt;quotaProfileName&gt;&lt;/quotaProfileName&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsListUsageMonitoringInformation&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Billinng cycle Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045288828">&lt;billingCycleUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="702772195">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/billingCycleUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Daily usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740924538">&lt;dailyUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="-1384456069">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/dailyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="weekly usage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1409868582">&lt;weeklyUsage&gt;&lt;downloadOctets&gt;524288000&lt;/downloadOctets&gt;</stringProp>
                <stringProp name="2046013689">&lt;totalOctets&gt;1048576000&lt;/totalOctets&gt;&lt;uploadOctets&gt;524288000&lt;/uploadOctets&gt;&lt;/weeklyUsage&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen DM request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
              <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer DM" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="TestPlan.comments">step 8 : </stringProp>
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Session flushed" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Session flushed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="session flushed JDBC req" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1069892506">CORE_SESSION_ID
</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">check if response contains session id </stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate(fail) Request" enabled="true">
            <stringProp name="TestPlan.comments">step 9 : No quota left so access will be rejected</stringProp>
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Reject</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1010" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-RTC_1011" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments"> Verify &apos;Allow Unkown user&apos; functionality in Service Policy</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1011(Cumulative)" enabled="true">
          <stringProp name="TestPlan.comments"> Verify &apos;Allow Unkown user&apos; functionality in Service Policy</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.22.1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="waittime" elementType="Argument">
                <stringProp name="Argument.name">waittime</stringProp>
                <stringProp name="Argument.value">1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">90069</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1011</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="constant timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_1011" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="872118812">Capture PCAP</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="872996374">Capture log </stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="1033451790">Capture PD log </stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Authenticate Request" enabled="true">
            <stringProp name="RadiusSampler.message">Access-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              <stringProp name="TestPlan.comments">check for access accept</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Start" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">6</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="RadiusAssertion.avpName.0">Unknown</stringProp>
              <stringProp name="RadiusAssertion.avpData.0"></stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Waiting for COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer COA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Update 300" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">3</stringProp>
            <stringProp name="RadiusSampler.avpName.2">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.3">150</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
            <stringProp name="RadiusSampler.avpData.4">150</stringProp>
            <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">7</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="Accounting Stop" enabled="true">
            <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
            <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
            <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
            <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.1">2</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
            <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
            <stringProp name="RadiusSampler.avpName.3">NAS-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.3">${nasip}</stringProp>
            <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
            <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
            <stringProp name="RadiusSampler.avpCounter">5</stringProp>
          </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              <stringProp name="TestPlan.comments">check for accounting response</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Waiting for 1 sec" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_1011" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">/home/regression/tts/NetVertex_PCRF/Test-Results/Automation/TR-6.8.2.1/Radius_6821_full_setup.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="com.computaris.jmeter_plugins.radius_client.visualizers.RadiusTreeListener" testclass="ResultCollector" testname="TTS Radius Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="com.computaris.jmeter_plugins.radius_client.visualizers.RadiusTreeMessageListener" testclass="ResultCollector" testname="TTS Radius Message Listener" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Functions" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1454995107000</longProp>
        <longProp name="ThreadGroup.end_time">1454995107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PCAP" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Pcap" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of Tcpdump Command " enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PcapPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Pcap" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop PCAP On Server" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PcapPID</stringProp>
              <stringProp name="DiameterLoadvalue">PcapPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start NV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">LogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PD log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start PD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${pdhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-policy-designer.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PDPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop NV log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopNV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">LogPID</stringProp>
              <stringProp name="DiameterLoadvalue">LogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop PD log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopPD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${PDPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PDPID</stringProp>
              <stringProp name="DiameterLoadvalue">PDPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Tomcat log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>/bin/mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${tomcat_home}/logs/catalina.out&gt;${logpath}/${pcapdir}/${tomcatlogs}.log &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Tomcat log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${TomcatLogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterLoadvalue">TomcatLogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart (shut immediate)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070394255">Usage statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-737073625">SPR cache statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear cache spr-cache -all REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=cache spr-cache -all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1923322074">spr cache flushed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Tomcat Restart " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Tomcat Restart " enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ; sleep 3</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; rm -rf ../work/*&quot; </__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh startup.sh&quot; ; sleep 15</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = false/spr.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="serverinitiated.destination-host = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set serverinitiated.destination-host = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="set -Drevalidationtime.delta=0" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="-Drevalidationtime.delta=0" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/bin/netvertex.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000 -Drevalidationtime.delta=0 -Drevalidationtime.delta=0/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="end sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PD: Reload Policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/policy/reload/policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RConf" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI RConf REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">20000</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/rconf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1770785172">Server Configuration Successfully Reloaded for NetVertex</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify PCRF Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify PCRF Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2024504540">PCRF.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify OfflineRnC Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify OfflineRnC Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-399345633">OfflineRnC.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Diameter Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Diameter Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="533546614">DIAMETER.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Radius Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Radius Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1062068207">RADIUS.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
