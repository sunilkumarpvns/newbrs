<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Automation_plan_6622" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Mapping Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mapping_file_name" elementType="Argument">
            <stringProp name="Argument.name">mapping_file_name</stringProp>
            <stringProp name="Argument.value">PCC_WADL_Mapping.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Load Global Variable" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">global.variables</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">::</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="REST Default Parameters" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
        <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Basic YWRtaW46YWRtaW4=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter.protocol.diameter.config.gui.DiameterConfigGui" testclass="ConfigTestElement" testname="Diameter Stack" enabled="true">
        <stringProp name="GxPCEFDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="GxPCEFDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="GxPCEFDiameterClient.timeout.0">10000</stringProp>
        <stringProp name="GxPCEFDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFCERGxPCEFCERDiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.0">Supported-Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.0">10415</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.1">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.1">11</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.2">Origin-Host</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.2">${originhost}</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.3">Origin-Realm</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.3">${originrealm}</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.4">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.4">10.106.1.88</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.9">Product-Name</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.9">Jmeter</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.11">Auth-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.11">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.12">Acct-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.12">4</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFDPRGxPCEFDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.0">${origin_host}</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.1">${originrealm}</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFDWAGxPCEFDWADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.1">gx.elite.com</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.2">elite.com</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.3">10.106.1.142</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.4">10415</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.5">Jmeter</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRAAGxPCEFRAADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.appID">16777238</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.HBHID">${__diamGetHopId(var)}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.ETEID">${__diamGetEndId(var)}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.0">${origin_host}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.1">${origin_realm}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.2">10.106.1.142</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.4">Jmeter</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.5">Result-Code</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.5">2001</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.6">Session-Id</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.6">${sessionid}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpCounter">7</stringProp>
        <stringProp name="GxPCEFASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="GxPCEFASADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFASAGxPCEFASADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFASADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFASADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFCLAGxPCEFCLADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFIDAGxPCEFIDADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFDSAGxPCEFDSADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRSAGxPCEFRSADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRTAGxPCEFRTADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFPPAGxPCEFPPADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFSLAGxPCEFSLADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFSTAGxPCEFSTADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="GxPCEFDiameterClient.overrideStack">true</boolProp>
        <boolProp name="GxPCEFDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="GxPCEFDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="73_PCEF_primaryDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryCER73_PCEF_primaryCERDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.0">Supported-Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.0">10415</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.1">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.3">10.106.1.88</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.4">11</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.9">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.9">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.11">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.11">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.12">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.12">0</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryDPR73_PCEF_primaryDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryDWA73_PCEF_primaryDWADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.1">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.3">127.0.0.1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRAA73_PCEF_primaryRAADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryASA73_PCEF_primaryASADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryCLA73_PCEF_primaryCLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryIDA73_PCEF_primaryIDADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryDSA73_PCEF_primaryDSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRSA73_PCEF_primaryRSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRTA73_PCEF_primaryRTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryPPA73_PCEF_primaryPPADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primarySLA73_PCEF_primarySLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primarySTA73_PCEF_primarySTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="73_PCEF_primaryDiameterClient.overrideStack">true</boolProp>
        <boolProp name="73_PCEF_primaryDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="73_PCEF_primaryDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryCER73_PCEF_secondaryCERDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.3">Supported-Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.3">10415</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.4">11</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.9">Origin-State-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.9">1094807040</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.10">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.10">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.11">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.11">0</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.12">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.12">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPR73_PCEF_secondaryDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWA73_PCEF_secondaryDWADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.1">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.3">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRAA73_PCEF_secondaryRAADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryASA73_PCEF_secondaryASADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryCLA73_PCEF_secondaryCLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryIDA73_PCEF_secondaryIDADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryDSA73_PCEF_secondaryDSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRSA73_PCEF_secondaryRSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRTA73_PCEF_secondaryRTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryPPA73_PCEF_secondaryPPADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondarySLA73_PCEF_secondarySLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondarySTA73_PCEF_secondarySTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.overrideStack">true</boolProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="RxPCEFDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="RxPCEFDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="RxPCEFDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="RxPCEFDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFCERRxPCEFCERDiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.appID">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.0">Auth-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.0">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.1">Acct-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.1">0</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.2">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.2">3</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.3">Acct-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.4">Auth-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.4">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.5">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.5">10415</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.6">Supported-Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.6">10415</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.7">Origin-Host</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.7">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.8">Origin-Realm</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.8">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.9">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.9">10.106.1.172</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.11">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.11">11</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.12">Product-Name</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.12">Applicaion Function</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFDPRRxPCEFDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFDWARxPCEFDWADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.1">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.2">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.3">127.0.0.1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRAARxPCEFRAADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="RxPCEFASADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFASARxPCEFASADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFASADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFASADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.5">Result-Code</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.5">2001</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpCounter">6</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFCLARxPCEFCLADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFIDARxPCEFIDADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFDSARxPCEFDSADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRSARxPCEFRSADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRTARxPCEFRTADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFPPARxPCEFPPADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFSLARxPCEFSLADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFSTARxPCEFSTADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="RxPCEFDiameterClient.overrideStack">true</boolProp>
        <boolProp name="RxPCEFDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="RxPCEFDiameterClient.enablePeerStateMachine">true</boolProp>
        <objProp>
          <name>DiameterClient.CONNECTION_IDS</name>
          <value class="java.util.ArrayList">
            <java.lang.String>GxPCEF</java.lang.String>
            <java.lang.String>73_PCEF_primary</java.lang.String>
            <java.lang.String>73_PCEF_secondary</java.lang.String>
            <java.lang.String>RxPCEF</java.lang.String>
          </value>
        </objProp>
      </ConfigTestElement>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@${dbserverip}:${dbserverport}/${dbserversid}</stringProp>
        <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbpassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${dbusername}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WADL-RTC_4001" enabled="true">
        <stringProp name="TestPlan.comments">WADL-RTC_4001 | Verify Subscriber Provisioning REST Web Service</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1462792026000</longProp>
        <longProp name="ThreadGroup.end_time">1462792026000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="WADL-RTC_4001" enabled="true">
          <stringProp name="TestPlan.comments">Check and verify Subscriber Provisioning REST web service in detail.</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="identity" elementType="Argument">
                <stringProp name="Argument.name">identity</stringProp>
                <stringProp name="Argument.value">1111114001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_identity" elementType="Argument">
                <stringProp name="Argument.name">new_identity</stringProp>
                <stringProp name="Argument.value">2222224001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="identity_2" elementType="Argument">
                <stringProp name="Argument.name">identity_2</stringProp>
                <stringProp name="Argument.value">1111124001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="subscriber_package" elementType="Argument">
                <stringProp name="Argument.name">subscriber_package</stringProp>
                <stringProp name="Argument.value">RTC_4001_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ims_package" elementType="Argument">
                <stringProp name="Argument.name">ims_package</stringProp>
                <stringProp name="Argument.value">RTC_4001_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tomcatlogs" elementType="Argument">
                <stringProp name="Argument.name">tomcatlogs</stringProp>
                <stringProp name="Argument.value">tomcat_4001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">WADL-RTC_4001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">67781</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_4001_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">RTC_4001_BASE_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4001_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ims_package_id" elementType="Argument">
                <stringProp name="Argument.name">ims_package_id</stringProp>
                <stringProp name="Argument.value">RTC_4001_BASE_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_productoffer" elementType="Argument">
                <stringProp name="Argument.name">new_productoffer</stringProp>
                <stringProp name="Argument.value">RTC_4001_NEW_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">new_productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4001_NEW_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">4001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="billing_account_id" elementType="Argument">
                <stringProp name="Argument.name">billing_account_id</stringProp>
                <stringProp name="Argument.value">2133523</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="service_instance_id" elementType="Argument">
                <stringProp name="Argument.name">service_instance_id</stringProp>
                <stringProp name="Argument.value">2543154</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_billing_account_id" elementType="Argument">
                <stringProp name="Argument.name">new_billing_account_id</stringProp>
                <stringProp name="Argument.value">123123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_service_instance_id" elementType="Argument">
                <stringProp name="Argument.name">new_service_instance_id</stringProp>
                <stringProp name="Argument.value">456456</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="identity_3" elementType="Argument">
                <stringProp name="Argument.name">identity_3</stringProp>
                <stringProp name="Argument.value">1111134001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_identity_3" elementType="Argument">
                <stringProp name="Argument.name">new_identity_3</stringProp>
                <stringProp name="Argument.value">2222234001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Cleanup" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete Product Offer" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from tblm_product_offer where id IN (&apos;${productoffer_id}&apos;, &apos;${addonoffer_id}&apos;,&apos;${new_productoffer_id}&apos;, &apos;10fd46eb-f0a0-4055-8cc1-0aed724b497d&apos;,&apos;ea639913-1fef-4c37-a5a2-72ebfa3695d3&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update base and addon package to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">update tblm_package set status=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;,&apos;${ims_package_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update ims package to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">update tblm_ims_package set status=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;,&apos;${addonpackage_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscription" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SUBSCRIPTION WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber alternate id" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from TBLM_ALTERNATE_IDENTITY where SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from tblm_subscriber where SUBSCRIBERIDENTITY in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete non money balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Pre Processing" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Packages and Reload" enabled="true"/>
            <hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="872118812">Capture PCAP</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="872996374">Capture log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Tomcat Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="1819813022">Capture Tomcat log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="1033451790">Capture PD log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
 		&lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${datapackage_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${subscriber_package}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;1&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;GB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;2&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;GB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;name&gt;QoS_${id}_BASE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;HSQ_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;HSQ_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;128&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;128&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;FUP1_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;FUP1_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;128&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;128&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;64&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;64&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;FUP2_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;FUP2_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;64&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;64&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
      &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt; </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create IMS Pacakge" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;ims-pkg-container&gt;&#xd;
    &lt;imsPkgDatas&gt;&#xd;
        &lt;imsPkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${ims_package_id}&lt;/id&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;imsPkgServiceDatas&gt;&#xd;
                &lt;imsPkgServiceData&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;action&gt;ACCEPT&lt;/action&gt;&#xd;
                    &lt;imsPkgPCCAttributes/&gt;&#xd;
                    &lt;mediaTypeData&gt;&#xd;
                        &lt;id&gt;MEDIA_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;AUDIO&lt;/name&gt;&#xd;
                    &lt;/mediaTypeData&gt;&#xd;
                    &lt;name&gt;RTC_${id}_AUDIO&lt;/name&gt;&#xd;
                &lt;/imsPkgServiceData&gt;&#xd;
            &lt;/imsPkgServiceDatas&gt;&#xd;
            &lt;name&gt;${ims_package}&lt;/name&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
        &lt;/imsPkgData&gt;&#xd;
    &lt;/imsPkgDatas&gt;&#xd;
&lt;/ims-pkg-container&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_ims_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${new_productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${new_productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get new Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change new ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change new ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers ${identity} &amp; ${identity_2} &amp; ${identity_3}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
         {&#xd;
          &quot;key&quot;: &quot;BILLING_ACCOUNT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${billing_account_id}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SERVICE_INSTANCE_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${service_instance_id}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_3}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;sterlite@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_3}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
         {&#xd;
          &quot;key&quot;: &quot;BILLING_ACCOUNT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${billing_account_id}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SERVICE_INSTANCE_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${service_instance_id}&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_3}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129708">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 3&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operation by subscriber Identity" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation using Subscriber Identity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id ${identity_3}_1 to ${identity_3}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity_3}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${identity_3}_1&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Alterenate_id ${identity_3}_1 From ${identity_3}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/getAlternateId?subscriberId=${identity_3}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                  <stringProp name="1238691654">${identity_3}_1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add 1000 INR To ${identity_3}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;${identity_3}&quot;,&#xd;
  &quot;totalBalance&quot;: &quot;1000&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscription/addMonetaryBalance</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Migrating subscriber (${identity_3}) to new identity (${new_identity_3})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/migrateSubscriber?currentSubscriberIdentity=${identity_3}&amp;newSubscriberIdentity=${new_identity_3}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Alterenate_id ${identity_3}_1 From ${new_identity_3}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/getAlternateId?subscriberId=${new_identity_3}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                  <stringProp name="1238691654">${identity_3}_1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get 1000 INR From ${new_identity_3}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscription/getMonetaryBalance?subscriberId=${new_identity_3}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                  <stringProp name="-204626221">&quot;totalBalance&quot;:1000.0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update subscriber(${identity}) by subscriber identity" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;subscriberProfile&quot;: {&#xd;
          &quot;entry&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
              &quot;value&quot;: &quot;Postpaid&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;STATUS&quot;,&#xd;
              &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
              &quot;value&quot;: &quot;28&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;AREA&quot;,&#xd;
              &quot;value&quot;: &quot;CG Road&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CITY&quot;,&#xd;
              &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
              &quot;value&quot;: &quot;123&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
              &quot;value&quot;: &quot;456&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
              &quot;value&quot;: &quot;789&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
              &quot;value&quot;: &quot;654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
              &quot;value&quot;: &quot;6576&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ZONE&quot;,&#xd;
              &quot;value&quot;: &quot;West&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
              &quot;value&quot;: &quot;INDIA&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ROLE&quot;,&#xd;
              &quot;value&quot;: &quot;Manager&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
              &quot;value&quot;: &quot;Infosys&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
              &quot;value&quot;: &quot;CSM&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ARPU&quot;,&#xd;
              &quot;value&quot;: &quot;65&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CADRE&quot;,&#xd;
              &quot;value&quot;: &quot;M2&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
              &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PHONE&quot;,&#xd;
              &quot;value&quot;: &quot;9475487512&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
              &quot;value&quot;: &quot;65465&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CUI&quot;,&#xd;
              &quot;value&quot;: &quot;3545&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;IMSI&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MAC&quot;,&#xd;
              &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;EUI64&quot;,&#xd;
              &quot;value&quot;: &quot;543121&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
              &quot;value&quot;: &quot;687654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
              &quot;value&quot;: &quot;16&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ESN&quot;,&#xd;
              &quot;value&quot;: &quot;52222224&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MEID&quot;,&#xd;
              &quot;value&quot;: &quot;354454&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
              &quot;value&quot;: &quot;687654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
              &quot;value&quot;: &quot;Gujarat&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;IMEI&quot;,&#xd;
              &quot;value&quot;: &quot;68765435413574&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
              &quot;value&quot;: &quot;ENABLE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
              &quot;value&quot;: &quot;TRUE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
              &quot;value&quot;: &quot;TRUE&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;subscriberId&quot;: &quot;${identity}&quot;,&#xd;
        &quot;alternateId&quot;: &quot;&quot;,&#xd;
        &quot;updateAction&quot;: 0&#xd;
       &#xd;
      }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/updateSubscriberProfile?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get subscriber (${identity}) by id " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                  <stringProp name="-93184862">{&quot;key&quot;:&quot;BILLING_ACCOUNT_ID&quot;,&quot;value&quot;:&quot;${billing_account_id}&quot;}</stringProp>
                  <stringProp name="8717564">{&quot;key&quot;:&quot;SERVICE_INSTANCE_ID&quot;,&quot;value&quot;:&quot;${service_instance_id}&quot;}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change subscriber (${identity}) current Product offer (${productoffer}) to new product offer ${new_productoffer)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;${identity}&quot;,&#xd;
  &quot;alternateId&quot;: &quot;&quot;,&#xd;
  &quot;currentProductOfferName&quot;: &quot;${productoffer}&quot;,&#xd;
  &quot;newProductOfferName&quot;: &quot;${new_productoffer}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/changeBaseProductOffer?parameter1=&amp;parameter2=&amp;parameter3=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscriber (${identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=${identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber (${identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=${identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Migrating subscriber(${identity}) to new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/migrateSubscriber?currentSubscriberIdentity=${identity}&amp;newSubscriberIdentity=${new_identity}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber should be searched by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${new_identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-802551806">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${new_identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscriber by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge subscriber by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring after purged should fail  with not found for subscriber (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${new_identity}) should not be fetched after purge operation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${new_identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By alternate identity" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation using Alternate Identity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update subscriber by alternate Identity (${identity_2})" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: {&#xd;
    &quot;entry&quot;: [&#xd;
      {&#xd;
        &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;Postpaid&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;STATUS&quot;,&#xd;
        &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
        &quot;value&quot;: &quot;28&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;AREA&quot;,&#xd;
        &quot;value&quot;: &quot;CG Road&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CITY&quot;,&#xd;
        &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ZONE&quot;,&#xd;
        &quot;value&quot;: &quot;West&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
        &quot;value&quot;: &quot;INDIA&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ROLE&quot;,&#xd;
        &quot;value&quot;: &quot;Manager&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
        &quot;value&quot;: &quot;Elitecore&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
        &quot;value&quot;: &quot;CSM&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ARPU&quot;,&#xd;
        &quot;value&quot;: &quot;65&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CADRE&quot;,&#xd;
        &quot;value&quot;: &quot;M2&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
        &quot;value&quot;: &quot;radhika.patel@elitecore.com&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PHONE&quot;,&#xd;
        &quot;value&quot;: &quot;9475487512&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUI&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMSI&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MAC&quot;,&#xd;
        &quot;value&quot;: &quot;sda:00:sad2:1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;16&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ESN&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MEID&quot;,&#xd;
        &quot;value&quot;: &quot;354454&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
        &quot;value&quot;: &quot;687654&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
        &quot;value&quot;: &quot;Gujarat&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMEI&quot;,&#xd;
        &quot;value&quot;: &quot;1234567890&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
        &quot;value&quot;: &quot;ENABLE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      },&#xd;
      {&#xd;
		&quot;key&quot;: &quot;SERVICE_INSTANCE_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${new_service_instance_id}&quot;&#xd;
	 },&#xd;
	 {&#xd;
      	&quot;key&quot;: &quot;BILLING_ACCOUNT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;${new_billing_account_id}&quot;&#xd;
	 }&#xd;
    ]&#xd;
  },&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${identity_2}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
  &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/updateSubscriberProfile?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get subscriber by alternate id (${identity_2})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                  <stringProp name="1001064899">{&quot;key&quot;:&quot;BILLING_ACCOUNT_ID&quot;,&quot;value&quot;:&quot;${new_billing_account_id}&quot;}</stringProp>
                  <stringProp name="995135227">{&quot;key&quot;:&quot;SERVICE_INSTANCE_ID&quot;,&quot;value&quot;:&quot;${new_service_instance_id}&quot;}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change subscriber (${identity_2}) current Product offer (${productoffer}) to new product offer ${new_productoffer)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${identity_2}&quot;,&#xd;
  &quot;currentProductOfferName&quot;: &quot;${productoffer}&quot;,&#xd;
  &quot;newProductOfferName&quot;: &quot;${new_productoffer}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/changeBaseProductOffer?parameter1=&amp;parameter2=&amp;parameter3=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate id (${identity_2})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${identity_2}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber with alternate Id (${identity_2})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter1=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${identity_2}) should be found after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate Id (${identity_2})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge subscriber by alternate Id (${identity_2})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring purged subscriber (${identity_2}) should fail by Not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-653677438">&quot;responseMessage&quot;:&quot;NOT FOUND. Reason: Unable to restore subscriber profile. Reason: subscriber identity not found for alternate Id: ${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${identity_2}) should not be fetched after purge operation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By multiple subscriber identities" enabled="true"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers  ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operations by multiple susbcriber identities" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers ${identity} &amp; ${identity_2}  by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&quot;${identity}&quot;,&#xd;
  &quot;${identity_2}&quot;],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscribers (${identity}) &amp; (${identity_2}) by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${identity}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subsriber (${identity_2}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) again by subscriber Ids for purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purging subscribers (${identity}) &amp; (${identity_2}) by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscribers  (${identity}) &amp; (${identity_2}) should fail after purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1651469130">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;NOT FOUND&quot;</stringProp>
                  <stringProp name="1793554883">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;NOT FOUND&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By multiple alternate identities" enabled="true"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers  ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operations by multiple alternate identities" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restore subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) again by alternate Ids for purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purging subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ]&#xd;
  &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber should fail after purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255149">&quot;responseCode&quot;:401</stringProp>
                  <stringProp name="-513556441">&quot;responseMessage&quot;:&quot;INPUT PARAMETER MISSING. Reason: Unable to restore subscribers. Reason: Subscriber Identities not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Post Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcaps and logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-720136512">Stop Pcap</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop Tomcat log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-1385660090">Stop Tomcat log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-592019242">Stop PD log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-632654166">Stop NV log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Module Controller" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WADL-RTC_4003" enabled="true">
        <stringProp name="TestPlan.comments">RTC_4003 | WADL | Verify &apos;wsListUsageMonitoringInformation&apos; Web Service</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1462792026000</longProp>
        <longProp name="ThreadGroup.end_time">1462792026000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_4003" enabled="true">
          <stringProp name="TestPlan.comments">RTC_4003 | Verify web service wsListUsageMonitoringInformation</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111114003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111114003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111114003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111114003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111114003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_4003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_4003_Log</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">111111114003_gx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">WSDL-RTC_4003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_4003_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulenamehex" elementType="Argument">
                <stringProp name="Argument.name">pccrulenamehex</stringProp>
                <stringProp name="Argument.value">424153455f343030335f504343</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="promopackage" elementType="Argument">
                <stringProp name="Argument.name">promopackage</stringProp>
                <stringProp name="Argument.value">RTC_4003_PROMOTIONAL</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulenamepromohex" elementType="Argument">
                <stringProp name="Argument.name">pccrulenamepromohex</stringProp>
                <stringProp name="Argument.value">50726f6d6f74696f6e616c5f343030335f504343</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="topup" elementType="Argument">
                <stringProp name="Argument.name">topup</stringProp>
                <stringProp name="Argument.value">RTC_4003_TOPUP</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addon_name" elementType="Argument">
                <stringProp name="Argument.name">addon_name</stringProp>
                <stringProp name="Argument.value">RTC_4003_ADDON</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulenameaddonhex" elementType="Argument">
                <stringProp name="Argument.name">pccrulenameaddonhex</stringProp>
                <stringProp name="Argument.value">4164644f6e5f343030335f504343</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tomcatlogs" elementType="Argument">
                <stringProp name="Argument.name">tomcatlogs</stringProp>
                <stringProp name="Argument.value">tomcat_4003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">76230</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_4003_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">4003base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4003_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addOn_product_offer_id" elementType="Argument">
                <stringProp name="Argument.name">addOn_product_offer_id</stringProp>
                <stringProp name="Argument.value">RTC_4003_ADDON_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addOn_product_offer_name" elementType="Argument">
                <stringProp name="Argument.name">addOn_product_offer_name</stringProp>
                <stringProp name="Argument.value">RTC_4003_ADDON_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="promotional_id" elementType="Argument">
                <stringProp name="Argument.name">promotional_id</stringProp>
                <stringProp name="Argument.value">4003promotional</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addon_id" elementType="Argument">
                <stringProp name="Argument.name">addon_id</stringProp>
                <stringProp name="Argument.value">4003addon</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">4003</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Cleanup" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change product offer to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">update TBLM_PRODUCT_OFFER set PACKAGE_MODE = &apos;TEST&apos; where ID in (&apos;${productoffer_id}&apos;,&apos;${addOn_product_offer_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Status" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete AddOn1 Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${addOn_product_offer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Status" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;,&apos;${addOn_product_offer_id}&apos;,&apos;${promotional_id}&apos;,&apos;${addon_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${service_url}/${subscriber_service}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${service_url}/${subscriber_service}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
          </ConstantTimer>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Pre Processing" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Tomcat Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1819813022">Capture Tomcat log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base package and Reload" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Base Package" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
 		&lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${datapackage_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${datapackage}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;${id}basequota&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;1000&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;name&gt;QoS_${id}_BASE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;BASE_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;BASE_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;500&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;${id}basequota&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
      &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt; </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-457244103">&lt;responseCode&gt;200&lt;/responseCode&gt;&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscriber ${subscriberidentity}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${subscriberidentity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${subscriberidentity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${subscriberidentity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${subscriberidentity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129646">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ListUsageMonitoringInformation without any Parameters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641255149">&quot;responseCode&quot;:401</stringProp>
                <stringProp name="-1895816986">&quot;responseMessage&quot;:&quot;INPUT PARAMETER MISSING. Reason: Identity parameter missing&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation for Data Package" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-I" enabled="true">
              <stringProp name="TestPlan.comments">Diameter CCR - Initial Request</stringProp>
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.4">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.7">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">1</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">0</stringProp>
              <stringProp name="DiameterSampler.avpName.10">Destination-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.10">${destinationhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.11">Origin-State-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.11">154154</stringProp>
              <stringProp name="DiameterSampler.avpName.12">Service-Identifier</stringProp>
              <stringProp name="DiameterSampler.avpData.12">10415</stringProp>
              <stringProp name="DiameterSampler.avpName.13">RAT-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.13">1001</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-I Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Monitoring-Key:${pccrulenamehex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Charging-Rule-Install</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Charging-Rule-Definition:Charging-Rule-Name:${pccrulenamehex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:524288000</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamehex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Data Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${datapackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_BASE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-866213694">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:524288000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="951901208">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:524288000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-2000589908">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:524288000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-937224516">&quot;customUsage&quot;:{&quot;totalOctets&quot;:524288000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U-2" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">5003</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:524288000</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamehex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Data Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${datapackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_BASE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-523115002">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="3872112">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1329039268">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1570516812">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-T" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">3</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">3</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">4453236383430343</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.13">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Data Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${datapackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_BASE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-523115002">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="3872112">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1329039268">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1570516812">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Usage Metering for data" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Data Package Usage for ${subscriberidentity}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-523115002">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="3872112">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1329039268">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1570516812">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation for Promotional Package" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Promotional Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
	  &lt;pkgDatas&gt;&#xd;
	       &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${promotional_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${promopackage}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;type&gt;PROMOTIONAL&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;${id}promotionalquota&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_PROMOTIONAL&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;1200&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;name&gt;QoS_${id}_PROMOTIONAL&lt;/name&gt;&#xd;
                    &lt;advancedCondition&gt;CS.MSISDN = &quot;${msisdn}&quot;&lt;/advancedCondition&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;Promotional_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;Promotional_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;600&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;${id}promotionalquota&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_PROMOTIONAL&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;availabilityStartDate&gt;1506364200000&lt;/availabilityStartDate&gt;&#xd;
            &lt;availabilityEndDate&gt;2437583400000&lt;/availabilityEndDate&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;true&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;currency&gt;USD&lt;/currency&gt;&#xd;
   		   &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_promotional_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  <stringProp name="-457244103">&lt;responseCode&gt;200&lt;/responseCode&gt;&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-I-promotional" enabled="true">
              <stringProp name="TestPlan.comments">Diameter CCR - Initial Request</stringProp>
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.4">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.7">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">1</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">0</stringProp>
              <stringProp name="DiameterSampler.avpName.10">Destination-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.10">${destinationhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.11">Origin-State-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.11">154154</stringProp>
              <stringProp name="DiameterSampler.avpName.12">Service-Identifier</stringProp>
              <stringProp name="DiameterSampler.avpData.12">10415</stringProp>
              <stringProp name="DiameterSampler.avpName.13">RAT-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.13">1001</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-I Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Charging-Rule-Install</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Charging-Rule-Definition:Charging-Rule-Name:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U-promotional" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">true</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:629145600</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Promotional Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${promopackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_PROMOTIONAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1443903950">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:629145600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1032948444">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:629145600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="309527736">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:629145600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1372893128">&quot;customUsage&quot;:{&quot;totalOctets&quot;:629145600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U-2-promotional" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">5003</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">true</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Monitoring-Key:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Promotional Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${promopackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_PROMOTIONAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-166317069">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="360670045">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-972241335">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1927314745">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-T-promotional" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">3</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">3</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">4453236383430343</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.13">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for Promotional Package" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${promopackage}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_PROMOTIONAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-166317069">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="360670045">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-972241335">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1927314745">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Usage Metering for data + promo" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify usage metering for data + promo for ${subscriberidentity}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-523115002">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="3872112">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1329039268">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1570516812">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-166317069">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="360670045">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-972241335">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1927314745">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation for AddOn Package" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create AddOn Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${addon_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${addon_name}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;type&gt;ADDON&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;usageResetInterval&gt;7&lt;/usageResetInterval&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;${id}addonquota&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_ADDON&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;1600&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;name&gt;QoS_${id}_AddOn&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;AddOn_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;AddOn_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;800&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;${id}addonquota&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_ADDON&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;USD&lt;/currency&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  <stringProp name="-457244103">&lt;responseCode&gt;200&lt;/responseCode&gt;&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Addon Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create AddOn Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${addOn_product_offer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${addOn_product_offer_name}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;ADDON&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${addon_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:30,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="779291062">&quot;id&quot;:&quot;${addOn_product_offer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change AddOn Offer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addOn_product_offer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addOn_product_offer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addOn_product_offer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="779291062">&quot;id&quot;:&quot;${addOn_product_offer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Data AddOn Product Offer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
            &quot;subscriberId&quot;: &quot;${subscriberidentity}&quot;,&#xd;
            &quot;alternateId&quot;: null ,&#xd;
            &quot;updateAction&quot;: &quot;1&quot;,&#xd;
            &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
            &quot;addOnProductOfferName&quot;: &quot;${addOn_product_offer_name}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeAddOnProductOffer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-I-AddOn" enabled="true">
              <stringProp name="TestPlan.comments">Diameter CCR - Initial Request</stringProp>
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.4">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.7">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">1</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">0</stringProp>
              <stringProp name="DiameterSampler.avpName.10">Destination-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.10">${destinationhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.11">Origin-State-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.11">154154</stringProp>
              <stringProp name="DiameterSampler.avpName.12">Service-Identifier</stringProp>
              <stringProp name="DiameterSampler.avpData.12">10415</stringProp>
              <stringProp name="DiameterSampler.avpName.13">RAT-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.13">1001</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-I Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Monitoring-Key:${pccrulenameaddonhex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Charging-Rule-Install</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Charging-Rule-Definition:Charging-Rule-Name:${pccrulenameaddonhex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for AddOn" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${addon_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_ADDON</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1359130493">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:0,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-219897645">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:0,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1955855257">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:0,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1584512887">&quot;customUsage&quot;:{&quot;totalOctets&quot;:0,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U-AddOn" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">true</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:838860800</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenameaddonhex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for AddOn" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${addon_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_ADDON</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-318449424">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:838860800,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1499665478">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:838860800,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1452825638">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:838860800,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-389460246">&quot;customUsage&quot;:{&quot;totalOctets&quot;:838860800,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U-2-AddOn" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">2</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">1</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterSampler.avpData.13">3</stringProp>
              <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
              <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
              <stringProp name="DiameterSampler.avpData.15">1</stringProp>
              <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
              <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
              <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
              <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">19</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">5003</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
                <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:262144000</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
                <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
                <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamepromohex}</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for AddOn" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${addon_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_ADDON</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1908803404">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1859176778">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1102879138">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-292532078">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-T-AddOn" enabled="true">
              <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
              <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
              <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
              <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
              <stringProp name="DiameterSampler.flagP">true</stringProp>
              <stringProp name="DiameterSampler.flagE">false</stringProp>
              <stringProp name="DiameterSampler.flagT">false</stringProp>
              <stringProp name="DiameterSampler.appID">16777238</stringProp>
              <stringProp name="DiameterSampler.HBHID">-1</stringProp>
              <stringProp name="DiameterSampler.ETEID">-1</stringProp>
              <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.0">2</stringProp>
              <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
              <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
              <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.2">0</stringProp>
              <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
              <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
              <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
              <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
              <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
              <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.8">3</stringProp>
              <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
              <stringProp name="DiameterSampler.avpData.9">3</stringProp>
              <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
              <stringProp name="DiameterSampler.avpData.10">2</stringProp>
              <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
              <stringProp name="DiameterSampler.avpData.11">0</stringProp>
              <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
              <stringProp name="DiameterSampler.avpData.12">4453236383430343</stringProp>
              <stringProp name="DiameterSampler.avpName.13">Called-Station-Id</stringProp>
              <stringProp name="DiameterSampler.avpData.13">internet</stringProp>
              <stringProp name="DiameterSampler.avpCounter">14</stringProp>
            </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
            <hashTree>
              <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
                <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
                <stringProp name="DiameterAssertion.responseCode">200</stringProp>
                <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
                <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
                <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagP">true</boolProp>
                <boolProp name="DiameterAssertion.flagE">false</boolProp>
                <boolProp name="DiameterAssertion.flagT">false</boolProp>
                <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
                <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
                <stringProp name="DiameterAssertion.endtoendID"></stringProp>
                <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
                <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
                <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
                <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
                <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
                <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
                <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
                <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
                <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
                <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
                <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              </com.computaris.jmeter.assertions.DiameterAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify Usage for AddOn" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                  <elementProp name="packageName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${addon_name}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">packageName</stringProp>
                  </elementProp>
                  <elementProp name="quotaProfileName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">QUOTA_${id}_ADDON</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">quotaProfileName</stringProp>
                  </elementProp>
                  <elementProp name="serviceName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">All-Service</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">serviceName</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1908803404">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1859176778">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1102879138">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-292532078">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Usage Metering for data + promo + addon" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Verify usage metering for data + promo + addon for ${subscriberidentity}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${subscriberidentity}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">subscriberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/listUsageMonitoringInformation</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-523115002">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="3872112">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1329039268">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1570516812">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1048576000,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-166317069">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="360670045">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-972241335">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1927314745">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1258291200,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1908803404">&quot;billingCycleUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-1859176778">&quot;dailyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="1102879138">&quot;weeklyUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                  <stringProp name="-292532078">&quot;customUsage&quot;:{&quot;totalOctets&quot;:1677721600,&quot;uploadOctets&quot;:0,&quot;downloadOctets&quot;:0,&quot;timeInSeconds&quot;:0</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Post Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Disable Promotional Package" enabled="true"/>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Disable Promotional Package" enabled="true">
                <stringProp name="dataSource">DB</stringProp>
                <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;INACTIVE&apos; WHERE NAME=&apos;RTC_${id}_PROMOTIONAL&apos;</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Callable Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcaps and logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-720136512">Stop Pcap</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop Tomcat log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-1385660090">Stop Tomcat log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-592019242">Stop PD log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-632654166">Stop NV log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WADL-RTC_4005" enabled="true">
        <stringProp name="TestPlan.comments">Verify Alternate_ID Web Services</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1462792026000</longProp>
        <longProp name="ThreadGroup.end_time">1462792026000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="WADL-RTC_4005" enabled="true">
          <stringProp name="TestPlan.comments">Verify Alternate_ID Web Services</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="identity" elementType="Argument">
                <stringProp name="Argument.name">identity</stringProp>
                <stringProp name="Argument.value">1111114005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_identity" elementType="Argument">
                <stringProp name="Argument.name">new_identity</stringProp>
                <stringProp name="Argument.value">2222224005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="identity_2" elementType="Argument">
                <stringProp name="Argument.name">identity_2</stringProp>
                <stringProp name="Argument.value">1111124005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="subscriber_package" elementType="Argument">
                <stringProp name="Argument.name">subscriber_package</stringProp>
                <stringProp name="Argument.value">RTC_4005_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ims_package" elementType="Argument">
                <stringProp name="Argument.name">ims_package</stringProp>
                <stringProp name="Argument.value">RTC_4005_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tomcatlogs" elementType="Argument">
                <stringProp name="Argument.name">tomcatlogs</stringProp>
                <stringProp name="Argument.value">tomcat_4005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">WADL-RTC_4005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">81834</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_4005_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">RTC_4005_BASE_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4005_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ims_package_id" elementType="Argument">
                <stringProp name="Argument.name">ims_package_id</stringProp>
                <stringProp name="Argument.value">RTC_4005_BASE_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_productoffer" elementType="Argument">
                <stringProp name="Argument.name">new_productoffer</stringProp>
                <stringProp name="Argument.value">RTC_4005_NEW_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="new_productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">new_productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4005_NEW_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">4005</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="externalId_1" elementType="Argument">
                <stringProp name="Argument.name">externalId_1</stringProp>
                <stringProp name="Argument.value">RTC_4005_EXTERNAL_ID_1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="externalId_2" elementType="Argument">
                <stringProp name="Argument.name">externalId_2</stringProp>
                <stringProp name="Argument.value">RTC_4005_EXTERNAL_ID_2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete Product Offer" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from tblm_product_offer where id IN (&apos;${productoffer_id}&apos;, &apos;${addonoffer_id}&apos;,&apos;${new_productoffer_id}&apos;, &apos;10fd46eb-f0a0-4055-8cc1-0aed724b497d&apos;,&apos;ea639913-1fef-4c37-a5a2-72ebfa3695d3&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update base and addon package to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">update tblm_package set status=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;,&apos;${ims_package_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="update ims package to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">update tblm_ims_package set status=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;,&apos;${addonpackage_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscription" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SUBSCRIPTION WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber alternate id" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from TBLM_ALTERNATE_IDENTITY where SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete subscriber" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">delete from tblm_subscriber where SUBSCRIBERIDENTITY in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="delete non money balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID in (&apos;${identity}&apos;, &apos;${identity_2}&apos; , &apos;${new_identity}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Pre Processing" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Packages and Reload" enabled="true"/>
            <hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="872118812">Capture PCAP</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="872996374">Capture log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Tomcat Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="1819813022">Capture Tomcat log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="1033451790">Capture PD log </stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
 		&lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${datapackage_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${subscriber_package}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;1&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;GB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;2&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;GB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
                    &lt;name&gt;QoS_${id}_BASE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;HSQ_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;HSQ_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;128&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;128&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;FUP1_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;FUP1_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;128&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;128&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;64&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;64&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;FUP2_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;monitoringKey&gt;FUP2_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;64&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;64&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;200&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;QUOTA_${id}_BASE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;topUp-qos-multipliers/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
      &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt; </stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create IMS Pacakge" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;ims-pkg-container&gt;&#xd;
    &lt;imsPkgDatas&gt;&#xd;
        &lt;imsPkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;id&gt;${ims_package_id}&lt;/id&gt;&#xd;
            &lt;description&gt;Created by Jmeter&lt;/description&gt;&#xd;
            &lt;imsPkgServiceDatas&gt;&#xd;
                &lt;imsPkgServiceData&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;action&gt;ACCEPT&lt;/action&gt;&#xd;
                    &lt;imsPkgPCCAttributes/&gt;&#xd;
                    &lt;mediaTypeData&gt;&#xd;
                        &lt;id&gt;MEDIA_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;AUDIO&lt;/name&gt;&#xd;
                    &lt;/mediaTypeData&gt;&#xd;
                    &lt;name&gt;RTC_${id}_AUDIO&lt;/name&gt;&#xd;
                &lt;/imsPkgServiceData&gt;&#xd;
            &lt;/imsPkgServiceDatas&gt;&#xd;
            &lt;name&gt;${ims_package}&lt;/name&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
        &lt;/imsPkgData&gt;&#xd;
    &lt;/imsPkgDatas&gt;&#xd;
&lt;/ims-pkg-container&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_ims_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create new product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${new_productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${new_productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get new Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change new ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change new ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${new_productoffer_id}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="621390575">&quot;id&quot;:&quot;${new_productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operation by subscriber Identity" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="ADD External Alterenate_id" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id ${externalId_1} to ${identity_2}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_2}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id 2 ${externalId_2} to ${identity_1}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity_2}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation using Subscriber Identity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update subscriber(${identity}) by subscriber identity" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;subscriberProfile&quot;: {&#xd;
          &quot;entry&quot;: [&#xd;
            {&#xd;
              &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
              &quot;value&quot;: &quot;Postpaid&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;STATUS&quot;,&#xd;
              &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
              &quot;value&quot;: &quot;28&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;AREA&quot;,&#xd;
              &quot;value&quot;: &quot;CG Road&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CITY&quot;,&#xd;
              &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
              &quot;value&quot;: &quot;123&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
              &quot;value&quot;: &quot;456&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
              &quot;value&quot;: &quot;789&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
              &quot;value&quot;: &quot;654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
              &quot;value&quot;: &quot;6576&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ZONE&quot;,&#xd;
              &quot;value&quot;: &quot;West&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
              &quot;value&quot;: &quot;INDIA&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ROLE&quot;,&#xd;
              &quot;value&quot;: &quot;Manager&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
              &quot;value&quot;: &quot;Infosys&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
              &quot;value&quot;: &quot;CSM&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ARPU&quot;,&#xd;
              &quot;value&quot;: &quot;65&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CADRE&quot;,&#xd;
              &quot;value&quot;: &quot;M2&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
              &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PHONE&quot;,&#xd;
              &quot;value&quot;: &quot;9475487512&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
              &quot;value&quot;: &quot;65465&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;CUI&quot;,&#xd;
              &quot;value&quot;: &quot;3545&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;IMSI&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
              &quot;value&quot;: &quot;${identity}&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MAC&quot;,&#xd;
              &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;EUI64&quot;,&#xd;
              &quot;value&quot;: &quot;543121&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
              &quot;value&quot;: &quot;687654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
              &quot;value&quot;: &quot;16&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;ESN&quot;,&#xd;
              &quot;value&quot;: &quot;52222224&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;MEID&quot;,&#xd;
              &quot;value&quot;: &quot;354454&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
              &quot;value&quot;: &quot;687654&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
              &quot;value&quot;: &quot;Gujarat&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;IMEI&quot;,&#xd;
              &quot;value&quot;: &quot;68765435413574&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
              &quot;value&quot;: &quot;ENABLE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
              &quot;value&quot;: &quot;TRUE&quot;&#xd;
            },&#xd;
            {&#xd;
              &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
              &quot;value&quot;: &quot;TRUE&quot;&#xd;
            }&#xd;
          ]&#xd;
        },&#xd;
        &quot;subscriberId&quot;: &quot;${identity}&quot;,&#xd;
        &quot;alternateId&quot;: &quot;&quot;,&#xd;
        &quot;updateAction&quot;: 0&#xd;
       &#xd;
      }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/updateSubscriberProfile?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get subscriber (${identity}) by id " enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change subscriber (${identity}) current Product offer (${productoffer}) to new product offer ${new_productoffer)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;${identity}&quot;,&#xd;
  &quot;alternateId&quot;: &quot;&quot;,&#xd;
  &quot;currentProductOfferName&quot;: &quot;${productoffer}&quot;,&#xd;
  &quot;newProductOfferName&quot;: &quot;${new_productoffer}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/changeBaseProductOffer?parameter1=&amp;parameter2=&amp;parameter3=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscriber (${identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=${identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber (${identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=${identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Migrating subscriber(${identity}) to new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/migrateSubscriber?currentSubscriberIdentity=${identity}&amp;newSubscriberIdentity=${new_identity}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber should be searched by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${new_identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-802551806">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${new_identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscriber by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge subscriber by new identity (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring after purged should fail  with not found for subscriber (${new_identity})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=${new_identity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${new_identity}) should not be fetched after purge operation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${new_identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By alternate identity" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation using external id ${externalId_1} Alternate Identity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update subscriber by alternate Identity (${externalId_1})" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: {&#xd;
    &quot;entry&quot;: [&#xd;
      {&#xd;
        &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;Postpaid&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;STATUS&quot;,&#xd;
        &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
        &quot;value&quot;: &quot;28&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;AREA&quot;,&#xd;
        &quot;value&quot;: &quot;CG Road&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CITY&quot;,&#xd;
        &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ZONE&quot;,&#xd;
        &quot;value&quot;: &quot;West&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
        &quot;value&quot;: &quot;INDIA&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ROLE&quot;,&#xd;
        &quot;value&quot;: &quot;Manager&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
        &quot;value&quot;: &quot;Elitecore&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
        &quot;value&quot;: &quot;CSM&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ARPU&quot;,&#xd;
        &quot;value&quot;: &quot;65&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CADRE&quot;,&#xd;
        &quot;value&quot;: &quot;M2&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
        &quot;value&quot;: &quot;radhika.patel@elitecore.com&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PHONE&quot;,&#xd;
        &quot;value&quot;: &quot;9475487512&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUI&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMSI&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MAC&quot;,&#xd;
        &quot;value&quot;: &quot;sda:00:sad2:1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;16&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ESN&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MEID&quot;,&#xd;
        &quot;value&quot;: &quot;354454&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
        &quot;value&quot;: &quot;687654&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
        &quot;value&quot;: &quot;Gujarat&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMEI&quot;,&#xd;
        &quot;value&quot;: &quot;1234567890&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
        &quot;value&quot;: &quot;ENABLE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${externalId_1}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
  &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/updateSubscriberProfile?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get subscriber by alternate id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change subscriber (${identity_2}) current Product offer (${productoffer}) to new product offer ${new_productoffer)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${externalId_1}&quot;,&#xd;
  &quot;currentProductOfferName&quot;: &quot;${productoffer}&quot;,&#xd;
  &quot;newProductOfferName&quot;: &quot;${new_productoffer}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/changeBaseProductOffer?parameter1=&amp;parameter2=&amp;parameter3=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber with alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter1=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should be found after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge subscriber by alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring purged subscriber (${externalId_1}) should fail by Not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-653677438">&quot;responseMessage&quot;:&quot;NOT FOUND. Reason: Unable to restore subscriber profile. Reason: subscriber identity not found for alternate Id: ${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should not be fetched after purge operation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By multiple subscriber identities" enabled="true"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers  ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operations by multiple susbcriber identities" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers ${identity} &amp; ${identity_2}  by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&quot;${identity}&quot;,&#xd;
  &quot;${identity_2}&quot;],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscribers (${identity}) &amp; (${identity_2}) by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${identity}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subsriber (${identity_2}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) again by subscriber Ids for purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purging subscribers (${identity}) &amp; (${identity_2}) by subscriber Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="103642248">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-165398315">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscribers  (${identity}) &amp; (${identity_2}) should fail after purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
    &quot;${identity}&quot;,&#xd;
    &quot;${identity_2}&quot;&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1651469130">&quot;key&quot;:&quot;${identity_2}&quot;,&quot;value&quot;:&quot;NOT FOUND&quot;</stringProp>
                  <stringProp name="1793554883">&quot;key&quot;:&quot;${identity}&quot;,&quot;value&quot;:&quot;NOT FOUND&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=${identity_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By multiple External alternate identities" enabled="true"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers  ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="ADD External Alterenate_id" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id ${externalId_1} to ${identity}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id 2 ${externalId_2} to ${identity_2}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity_2}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_2}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operations by multiple alternate identities" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${externalId_1}&quot;,&#xd;
       &quot;${externalId_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2095521167">&quot;key&quot;:&quot;${externalId_1}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1988095216">&quot;key&quot;:&quot;${externalId_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_1}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="-2039060193">&quot;responseMessage&quot;:&quot;Subscriber Not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restore subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${externalId_1}&quot;,&#xd;
    &quot;${externalId_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2095521167">&quot;key&quot;:&quot;${externalId_1}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1988095216">&quot;key&quot;:&quot;${externalId_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_1}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-628006909">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should be fetch after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_2}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2074874742">&quot;key&quot;:&quot;SUBSCRIBER_IDENTITY&quot;,&quot;value&quot;:&quot;${identity_2}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleting subscribers (${identity}) &amp; (${identity_2}) again by alternate Ids for purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${externalId_1}&quot;,&#xd;
    &quot;${externalId_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2095521167">&quot;key&quot;:&quot;${externalId_1}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1988095216">&quot;key&quot;:&quot;${externalId_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purging subscribers (${identity}) &amp; (${identity_2}) by alternate Ids" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [&#xd;
  ],&#xd;
  &quot;alternateIds&quot;: [&#xd;
        &quot;${externalId_1}&quot;,&#xd;
      &quot;${externalId_2}&quot;&#xd;
  ]&#xd;
  &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="2095521167">&quot;key&quot;:&quot;${externalId_1}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                  <stringProp name="-1988095216">&quot;key&quot;:&quot;${externalId_2}&quot;,&quot;value&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber should fail after purge" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberIds&quot;: [],&#xd;
  &quot;alternateIds&quot;: [&#xd;
      &quot;${externalId_1}&quot;,&#xd;
    &quot;${externalId_2}&quot;&#xd;
  ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255149">&quot;responseCode&quot;:401</stringProp>
                  <stringProp name="-513556441">&quot;responseMessage&quot;:&quot;INPUT PARAMETER MISSING. Reason: Unable to restore subscribers. Reason: Subscriber Identities not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_1}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber(${identity_2}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?alternateId=${externalId_1}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                  <stringProp name="1860676425">&quot;responseMessage&quot;:&quot;NOT FOUND Reason: Unable to search subscriber profile. Reason: Subscriber Identity not found&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adding Subscribers  ${identity} &amp; ${identity_2}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: [&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;entry&quot;: [&#xd;
        {&#xd;
          &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;Prepaid&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;STATUS&quot;,&#xd;
          &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
          &quot;value&quot;: &quot;15&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;AREA&quot;,&#xd;
          &quot;value&quot;: &quot;CG Road&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CITY&quot;,&#xd;
          &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
          &quot;value&quot;: &quot;999&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
          &quot;value&quot;: &quot;888&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
          &quot;value&quot;: &quot;777&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
          &quot;value&quot;: &quot;666&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
          &quot;value&quot;: &quot;555&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ZONE&quot;,&#xd;
          &quot;value&quot;: &quot;West&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
          &quot;value&quot;: &quot;INDIA&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ROLE&quot;,&#xd;
          &quot;value&quot;: &quot;Manager&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
          &quot;value&quot;: &quot;Elitecore&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
          &quot;value&quot;: &quot;CSM&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ARPU&quot;,&#xd;
          &quot;value&quot;: &quot;22&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CADRE&quot;,&#xd;
          &quot;value&quot;: &quot;M2&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
          &quot;value&quot;: &quot;radhika.sheladia@elitecore.com&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PHONE&quot;,&#xd;
          &quot;value&quot;: &quot;987584689&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
          &quot;value&quot;: &quot;458796&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;CUI&quot;,&#xd;
          &quot;value&quot;: &quot;458896&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMSI&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
          &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MAC&quot;,&#xd;
          &quot;value&quot;: &quot;sda:00:sad2:&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;543121&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
          &quot;value&quot;: &quot;16&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;ESN&quot;,&#xd;
          &quot;value&quot;: &quot;52222224&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;MEID&quot;,&#xd;
          &quot;value&quot;: &quot;354454&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
          &quot;value&quot;: &quot;687654&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
          &quot;value&quot;: &quot;any_group&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;IMEI&quot;,&#xd;
          &quot;value&quot;: &quot;68765435413574&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
          &quot;value&quot;: &quot;ENABLE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
          &quot;value&quot;: &quot;TRUE&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;productOffer&quot;: &quot;${productoffer}&quot;,&#xd;
      &quot;subscriberIdentity&quot;: &quot;${identity_2}&quot;,&#xd;
      &quot;creditLimit&quot;:&quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/addSubscribers?parameter1=&amp;parameter2=&amp;</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="277129677">&quot;responseMessage&quot;:&quot;Total Subcriber Profiles added: 2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Operations By InActive external Alternate Ids" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="ADD External Alterenate_id &amp; Marking it as In Active" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id ${externalId_1} to ${identity}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_1}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alterenate_id 2 ${externalId_2} to ${identity_2}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity_2}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_2}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Marking External_Alterenate_id ${externalId_1} as InActive" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${identity}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${externalId_1}&quot;,&#xd;
&quot;status&quot;:&quot;INACTIVE&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/changeAlternateIdStatus?</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Operation using external id ${externalId_1} Alternate Identity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update subscriber by alternate Identity (${externalId_1})" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberProfile&quot;: {&#xd;
    &quot;entry&quot;: [&#xd;
      {&#xd;
        &quot;key&quot;: &quot;USERNAME&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUSTOMER_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;Postpaid&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;STATUS&quot;,&#xd;
        &quot;value&quot;: &quot;ACTIVE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;BILLING_DATE&quot;,&#xd;
        &quot;value&quot;: &quot;20&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;AREA&quot;,&#xd;
        &quot;value&quot;: &quot;CG Road&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CITY&quot;,&#xd;
        &quot;value&quot;: &quot;Ahmedabad&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM1&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM2&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM3&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM4&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARAM5&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ZONE&quot;,&#xd;
        &quot;value&quot;: &quot;West&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COUNTRY&quot;,&#xd;
        &quot;value&quot;: &quot;INDIA&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ROLE&quot;,&#xd;
        &quot;value&quot;: &quot;Manager&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;COMPANY&quot;,&#xd;
        &quot;value&quot;: &quot;Elitecore&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;DEPARTMENT&quot;,&#xd;
        &quot;value&quot;: &quot;CSM&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ARPU&quot;,&#xd;
        &quot;value&quot;: &quot;65&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CADRE&quot;,&#xd;
        &quot;value&quot;: &quot;M2&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EMAIL&quot;,&#xd;
        &quot;value&quot;: &quot;radhika.patel@elitecore.com&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PHONE&quot;,&#xd;
        &quot;value&quot;: &quot;9475487512&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SIP_URL&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;CUI&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMSI&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MSISDN&quot;,&#xd;
        &quot;value&quot;: &quot;${identity_2}&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MAC&quot;,&#xd;
        &quot;value&quot;: &quot;sda:00:sad2:1&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MODIFIED_EUI64&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ENCRYPTION_TYPE&quot;,&#xd;
        &quot;value&quot;: &quot;16&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;ESN&quot;,&#xd;
        &quot;value&quot;: &quot;123456&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;MEID&quot;,&#xd;
        &quot;value&quot;: &quot;354454&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PARENT_ID&quot;,&#xd;
        &quot;value&quot;: &quot;687654&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;GROUP_NAME&quot;,&#xd;
        &quot;value&quot;: &quot;Gujarat&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;IMEI&quot;,&#xd;
        &quot;value&quot;: &quot;1234567890&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SUBSCRIBER_LEVEL_METERING&quot;,&#xd;
        &quot;value&quot;: &quot;ENABLE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;PASSWORD_CHECK&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;key&quot;: &quot;SY_INTERFACE&quot;,&#xd;
        &quot;value&quot;: &quot;FALSE&quot;&#xd;
      }&#xd;
    ]&#xd;
  },&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${externalId_1}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
  &#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/updateSubscriberProfile?parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get subscriber by alternate id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change subscriber (${identity_2}) current Product offer (${productoffer}) to new product offer ${new_productoffer)" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;subscriberId&quot;: &quot;&quot;,&#xd;
  &quot;alternateId&quot;: &quot;${externalId_1}&quot;,&#xd;
  &quot;currentProductOfferName&quot;: &quot;${productoffer}&quot;,&#xd;
  &quot;newProductOfferName&quot;: &quot;${new_productoffer}&quot;,&#xd;
  &quot;updateAction&quot;: &quot;0&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/changeBaseProductOffer?parameter1=&amp;parameter2=&amp;parameter3=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should not be fetch after deletion" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring subscriber with alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter1=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should be found after restore" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete subscriber by alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/deleteSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge subscriber by alternate Id (${externalId_1})" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/purgeSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Restoring purged subscriber (${externalId_1}) should fail by Not found" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/restoreSubscriber?subscriberId=&amp;alternateId=${identity_2}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber (${externalId_1}) should not be fetched after purge operation" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscriberProvisioning/getSubscriber?subscriberId=&amp;alternateId=${externalId_1}&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Not Found Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641255152">&quot;responseCode&quot;:404</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Post Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcaps and logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-720136512">Stop Pcap</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop Tomcat log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-1385660090">Stop Tomcat log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-592019242">Stop PD log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-632654166">Stop NV log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WADL-RTC_4006" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">WADL-RTC_4006| Verify Reset Billing Cycle Web Service</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_4006" enabled="true">
          <stringProp name="TestPlan.comments">RTC_4006| Verify Reset Billing Cycle Web Service</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111114006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111114006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111114006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111114006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_4006_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111114006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_4006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_4006_Log</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111114006_gx</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">WSDL-RTC_4006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulename" elementType="Argument">
                <stringProp name="Argument.name">pccrulename</stringProp>
                <stringProp name="Argument.value">RTC_4006_PCC</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pccrulenamehsq" elementType="Argument">
                <stringProp name="Argument.name">pccrulenamehsq</stringProp>
                <stringProp name="Argument.value">5254435f343030365f504343</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">81833</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffername" elementType="Argument">
                <stringProp name="Argument.name">productoffername</stringProp>
                <stringProp name="Argument.value">RTC_4006_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">4006</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">RTC_4006_BASE_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_4006_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Pre Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="CleanUp" enabled="false"/>
            <hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Login" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Hit Login page" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                  <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${pdcontextpath}/commons/login/Login/initLogin</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HtmlExtractor guiclass="HtmlExtractorGui" testclass="HtmlExtractor" testname="CSS/JQuery Extractor" enabled="true">
                    <stringProp name="HtmlExtractor.refname">token</stringProp>
                    <stringProp name="HtmlExtractor.expr">input[name=token]</stringProp>
                    <stringProp name="HtmlExtractor.attribute">value</stringProp>
                    <stringProp name="HtmlExtractor.default"></stringProp>
                    <boolProp name="HtmlExtractor.default_empty_value">false</boolProp>
                    <stringProp name="HtmlExtractor.match_number"></stringProp>
                    <stringProp name="HtmlExtractor.extractor_impl"></stringProp>
                  </HtmlExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="struts.token.name" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">token</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">struts.token.name</stringProp>
                      </elementProp>
                      <elementProp name="token" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${token}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">token</stringProp>
                      </elementProp>
                      <elementProp name="login.username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">admin</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">login.username</stringProp>
                      </elementProp>
                      <elementProp name="login.password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${smpassword}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">login.password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                  <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${pdcontextpath}/captcha/commons/login/Login/login.xhtml</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Changed Product Offer Mode To Test" enabled="true">
                <stringProp name="dataSource">DB</stringProp>
                <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER set PACKAGE_MODE=&apos;TEST&apos; where ID IN (&apos;${productoffer_id}&apos;)</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete ProductOffer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/pd/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to INACTIVE" enabled="true">
                <stringProp name="dataSource">DB</stringProp>
                <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;INACTIVE&apos; where ID IN (&apos;07a28f4e-8366-43f9-99c5-4859fdf2bd48&apos;, &apos;4dad8890-62a7-465d-9412-05eda78b7723&apos;, &apos;60emergency&apos;)
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Changed Data package Mode To Test" enabled="true">
                <stringProp name="dataSource">DB</stringProp>
                <stringProp name="query">UPDATE TBLM_PACKAGE set PACKAGE_MODE=&apos;TEST&apos; where ID IN (&apos;${datapackage_id}&apos;)</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete UM Data Package" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/policydesigner/pkg/Pkg/delete?ids=${datapackage_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Subscriber" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;subscriberID&gt;${msisdn}&lt;/subscriberID&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;subscriberID&gt;${msisdn}&lt;/subscriberID&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;param1&gt;?&lt;/param1&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;param2&gt;?&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete Usage" enabled="true">
                <stringProp name="dataSource">${__property(DB,,DB)}</stringProp>
                <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete Reset Usage Req" enabled="true">
                <stringProp name="dataSource">${__property(DB,,DB)}</stringProp>
                <stringProp name="query">DELETE FROM TBLM_RESET_USAGE_REQ WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Update Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings"/>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true);
f = new FileOutputStream(mapping_file_name, true);
p = new PrintStream(f);

// Write data to file

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage ${datapackage}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;${datapackage_id}&lt;/id&gt;&#xd;
            &lt;name&gt;${datapackage}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 09/14/2018 17:37:11&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;66bba7eb-2859-4c08-a998-40670445a06c&lt;/id&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2018 17:37:17&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;id&gt;feb126a3-b788-426c-be59-6a88963aa319&lt;/id&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total&gt;500&lt;/total&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;0f8a74d1-2a99-4351-ae88-795c44090c83&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 09/14/2018 17:37:29&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;0223842d-dda7-4dd2-ad97-37230e4b0a47&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;d8e79a0f-8ce3-4874-a2cc-9f813d6da3e5&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;9&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;648e5d99-7513-4587-a9f5-93fef05c3d87&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;74c9a407-9c64-47d2-ab69-28ed24ca118b&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;9&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;66bba7eb-2859-4c08-a998-40670445a06c&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create ProductOffer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"> {&#xd;
        &quot;id&quot;: &quot;${productoffer_id}&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;currency&quot; : &quot;${currency}&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;${productoffername}&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin for automation&quot;,&#xd;
        &quot;type&quot;: &quot;BASE&quot;,&#xd;
        &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
        &quot;validityPeriod&quot;: null,&#xd;
        &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
        &quot;dataServicePkgId&quot;: &quot;${datapackage_id}&quot;,&#xd;
        &quot;groupNames&quot;: null&#xd;
    }</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1909856551">${productoffer_id}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Test Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">netvertexsm/pd/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1909856551">${productoffer_id}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">netvertexsm/pd/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1909856551">${productoffer_id}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${subscriberidentity}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                   &lt;value&gt;${productoffername}&lt;/value&gt;
                &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
                  &lt;value&gt;24124&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
                  &lt;value&gt;abcd&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
                  &lt;value&gt;0&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                 &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                 &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MAC&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EUI64&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MODIFIED_EUI64&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ENCRYPTION_TYPE&lt;/key&gt;
                  &lt;value&gt;0&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ESN&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MEID&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARENT_ID&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;GROUP_NAME&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMEI&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_LEVEL_METERING&lt;/key&gt;
                  &lt;value&gt;Disable&lt;/value&gt;
               &lt;/entry&gt;
            &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-I" enabled="true">
            <stringProp name="TestPlan.comments">Diameter CCR - Initial Request</stringProp>
            <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
            <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
            <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
            <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
            <stringProp name="DiameterSampler.flagP">true</stringProp>
            <stringProp name="DiameterSampler.flagE">false</stringProp>
            <stringProp name="DiameterSampler.flagT">false</stringProp>
            <stringProp name="DiameterSampler.appID">16777238</stringProp>
            <stringProp name="DiameterSampler.HBHID">-1</stringProp>
            <stringProp name="DiameterSampler.ETEID">-1</stringProp>
            <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.0">2</stringProp>
            <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
            <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
            <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.2">0</stringProp>
            <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
            <stringProp name="DiameterSampler.avpName.4">Origin-Host</stringProp>
            <stringProp name="DiameterSampler.avpData.4">${originhost}</stringProp>
            <stringProp name="DiameterSampler.avpName.5">Origin-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.5">${originrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.6">Destination-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.6">${destinationrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.7">Auth-Application-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.7">16777238</stringProp>
            <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.8">1</stringProp>
            <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
            <stringProp name="DiameterSampler.avpData.9">0</stringProp>
            <stringProp name="DiameterSampler.avpName.10">Destination-Host</stringProp>
            <stringProp name="DiameterSampler.avpData.10">${destinationhost}</stringProp>
            <stringProp name="DiameterSampler.avpName.11">Origin-State-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.11">154154</stringProp>
            <stringProp name="DiameterSampler.avpName.12">Service-Identifier</stringProp>
            <stringProp name="DiameterSampler.avpData.12">10415</stringProp>
            <stringProp name="DiameterSampler.avpName.13">RAT-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.13">1001</stringProp>
            <stringProp name="DiameterSampler.avpCounter">14</stringProp>
          </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
          <hashTree>
            <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-I Diameter Assertion" enabled="true">
              <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
              <stringProp name="DiameterAssertion.responseCode">200</stringProp>
              <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
              <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
              <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagP">true</boolProp>
              <boolProp name="DiameterAssertion.flagE">false</boolProp>
              <boolProp name="DiameterAssertion.flagT">false</boolProp>
              <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
              <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
              <stringProp name="DiameterAssertion.endtoendID"></stringProp>
              <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
              <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
              <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
              <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
              <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
              <stringProp name="DiameterAssertion.avpName.0">Charging-Rule-Install</stringProp>
              <stringProp name="DiameterAssertion.avpData.0">Charging-Rule-Definition:Charging-Rule-Name:${pccrulenamehsq}</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:26214400</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
              <stringProp name="DiameterAssertion.avpName.2">Result-Code</stringProp>
              <stringProp name="DiameterAssertion.avpData.2">2001</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
            </com.computaris.jmeter.assertions.DiameterAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U1" enabled="true">
            <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
            <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
            <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
            <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
            <stringProp name="DiameterSampler.flagP">true</stringProp>
            <stringProp name="DiameterSampler.flagE">false</stringProp>
            <stringProp name="DiameterSampler.flagT">false</stringProp>
            <stringProp name="DiameterSampler.appID">16777238</stringProp>
            <stringProp name="DiameterSampler.HBHID">-1</stringProp>
            <stringProp name="DiameterSampler.ETEID">-1</stringProp>
            <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.0">2</stringProp>
            <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
            <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
            <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.2">0</stringProp>
            <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
            <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
            <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
            <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
            <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.8">2</stringProp>
            <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
            <stringProp name="DiameterSampler.avpData.9">1</stringProp>
            <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
            <stringProp name="DiameterSampler.avpData.10">2</stringProp>
            <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.11">0</stringProp>
            <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
            <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
            <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
            <stringProp name="DiameterSampler.avpData.13">3</stringProp>
            <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
            <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
            <stringProp name="DiameterSampler.avpData.15">1</stringProp>
            <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
            <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
            <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
            <stringProp name="DiameterSampler.avpCounter">19</stringProp>
          </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
          <hashTree>
            <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
              <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
              <stringProp name="DiameterAssertion.responseCode">200</stringProp>
              <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
              <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
              <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagP">true</boolProp>
              <boolProp name="DiameterAssertion.flagE">false</boolProp>
              <boolProp name="DiameterAssertion.flagT">false</boolProp>
              <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
              <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
              <stringProp name="DiameterAssertion.endtoendID"></stringProp>
              <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
              <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
              <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
              <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
              <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
              <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
              <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:26214400</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
              <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamehsq}</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
            </com.computaris.jmeter.assertions.DiameterAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify reported balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetBalance&gt;
         &lt;subscriberId&gt;${msisdn}&lt;/subscriberId&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;packageName&gt;&lt;/packageName&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <stringProp name="TestPlan.comments">Web Service to get Balance</stringProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode[text()=&apos;200&apos;] and
//responseMessage[text()=&apos;SUCCESS&apos;] and
//packageName[text()=&apos;${datapackage}&apos;] and
//packageType[text()=&apos;BASE&apos;] and
//balance/totalOctets[text()=&apos;498073600&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Reset Usage of subscriber to 0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
     &quot;subscriberId&quot;: &quot;${subscriberidentity}&quot;,&#xd;
     &quot;alternateId&quot;: &quot;&quot;,&#xd;
     &quot;productOfferName&quot;: &quot;${productoffername}&quot;,&#xd;
     &quot;resetBillingCycleDate&quot;: &quot;0&quot;,&#xd;
     &quot;resetReason&quot;: &quot;as per customer request&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/resetUsage/resetBillingCycle</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                <stringProp name="-1000561979">&quot;responseMessage&quot;:&quot;Success&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-U2" enabled="true">
            <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
            <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
            <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
            <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
            <stringProp name="DiameterSampler.flagP">true</stringProp>
            <stringProp name="DiameterSampler.flagE">false</stringProp>
            <stringProp name="DiameterSampler.flagT">false</stringProp>
            <stringProp name="DiameterSampler.appID">16777238</stringProp>
            <stringProp name="DiameterSampler.HBHID">-1</stringProp>
            <stringProp name="DiameterSampler.ETEID">-1</stringProp>
            <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.0">2</stringProp>
            <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
            <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
            <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.2">0</stringProp>
            <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
            <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
            <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
            <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
            <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.8">2</stringProp>
            <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
            <stringProp name="DiameterSampler.avpData.9">2</stringProp>
            <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
            <stringProp name="DiameterSampler.avpData.10">2</stringProp>
            <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.11">0</stringProp>
            <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
            <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
            <stringProp name="DiameterSampler.avpName.13">Usage-Monitoring-Information</stringProp>
            <stringProp name="DiameterSampler.avpData.13">3</stringProp>
            <stringProp name="DiameterSampler.avpName.14">Monitoring-Key</stringProp>
            <stringProp name="DiameterSampler.avpData.14">${__diamAVPValue(Usage-Monitoring-Information:Monitoring-Key,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.15">Used-Service-Unit</stringProp>
            <stringProp name="DiameterSampler.avpData.15">1</stringProp>
            <stringProp name="DiameterSampler.avpName.16">CC-Total-Octets</stringProp>
            <stringProp name="DiameterSampler.avpData.16">${__diamAVPValue(Usage-Monitoring-Information:Granted-Service-Unit:CC-Total-Octets,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.17">Usage-Monitoring-Level</stringProp>
            <stringProp name="DiameterSampler.avpData.17">${__diamAVPValue(Usage-Monitoring-Information:Usage-Monitoring-Level,var)}</stringProp>
            <stringProp name="DiameterSampler.avpName.18">Called-Station-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.18">internet</stringProp>
            <stringProp name="DiameterSampler.avpCounter">19</stringProp>
          </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
          <hashTree>
            <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
              <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
              <stringProp name="DiameterAssertion.responseCode">200</stringProp>
              <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
              <stringProp name="DiameterAssertion.avpCounter">3</stringProp>
              <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagP">true</boolProp>
              <boolProp name="DiameterAssertion.flagE">false</boolProp>
              <boolProp name="DiameterAssertion.flagT">false</boolProp>
              <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
              <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
              <stringProp name="DiameterAssertion.endtoendID"></stringProp>
              <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
              <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
              <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
              <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
              <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
              <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
              <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
              <stringProp name="DiameterAssertion.avpName.1">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterAssertion.avpData.1">Granted-Service-Unit:CC-Total-Octets:26214400</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.1">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.1"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.1"></stringProp>
              <stringProp name="DiameterAssertion.avpName.2">Usage-Monitoring-Information</stringProp>
              <stringProp name="DiameterAssertion.avpData.2">Monitoring-Key:${pccrulenamehsq}</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.2">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.2"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.2"></stringProp>
            </com.computaris.jmeter.assertions.DiameterAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait Time" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify reported balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetBalance&gt;
         &lt;subscriberId&gt;${msisdn}&lt;/subscriberId&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;packageName&gt;&lt;/packageName&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <stringProp name="TestPlan.comments">Web Service to get Balance</stringProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode[text()=&apos;200&apos;] and
//responseMessage[text()=&apos;SUCCESS&apos;] and
//packageName[text()=&apos;${datapackage}&apos;] and
//packageType[text()=&apos;BASE&apos;] and
//balance/totalOctets[text()=&apos;498073600&apos;]</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler guiclass="com.computaris.jmeter.protocol.diameter.control.gui.DiameterSamplerGui" testclass="com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler" testname="RTC_${id}_CCR-T" enabled="true">
            <stringProp name="DiameterClient.connectionName">GxPCEF</stringProp>
            <stringProp name="DiameterClient.LOAD_SERVER_REQUEST_TEXT"></stringProp>
            <boolProp name="DiameterClient.LOAD_SERVER_REQUEST_CHECKBOX">false</boolProp>
            <stringProp name="DiameterSampler.message">Credit-Control-Request</stringProp>
            <stringProp name="DiameterSampler.flagP">true</stringProp>
            <stringProp name="DiameterSampler.flagE">false</stringProp>
            <stringProp name="DiameterSampler.flagT">false</stringProp>
            <stringProp name="DiameterSampler.appID">16777238</stringProp>
            <stringProp name="DiameterSampler.HBHID">-1</stringProp>
            <stringProp name="DiameterSampler.ETEID">-1</stringProp>
            <stringProp name="DiameterSampler.avpName.0">Subscription-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.0">2</stringProp>
            <stringProp name="DiameterSampler.avpName.1">Subscription-Id-Data</stringProp>
            <stringProp name="DiameterSampler.avpData.1">${msisdn}</stringProp>
            <stringProp name="DiameterSampler.avpName.2">Subscription-Id-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.2">0</stringProp>
            <stringProp name="DiameterSampler.avpName.3">Session-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.3">${sessionid}</stringProp>
            <stringProp name="DiameterSampler.avpName.4">Auth-Application-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.4">16777238</stringProp>
            <stringProp name="DiameterSampler.avpName.5">Origin-Host</stringProp>
            <stringProp name="DiameterSampler.avpData.5">${originhost}</stringProp>
            <stringProp name="DiameterSampler.avpName.6">Origin-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.6">${originrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.7">Destination-Realm</stringProp>
            <stringProp name="DiameterSampler.avpData.7">${destinationrealm}</stringProp>
            <stringProp name="DiameterSampler.avpName.8">CC-Request-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.8">3</stringProp>
            <stringProp name="DiameterSampler.avpName.9">CC-Request-Number</stringProp>
            <stringProp name="DiameterSampler.avpData.9">6</stringProp>
            <stringProp name="DiameterSampler.avpName.10">User-Equipment-Info</stringProp>
            <stringProp name="DiameterSampler.avpData.10">2</stringProp>
            <stringProp name="DiameterSampler.avpName.11">User-Equipment-Info-Type</stringProp>
            <stringProp name="DiameterSampler.avpData.11">0</stringProp>
            <stringProp name="DiameterSampler.avpName.12">User-Equipment-Info-Value</stringProp>
            <stringProp name="DiameterSampler.avpData.12">33353831383230363236303232383031</stringProp>
            <stringProp name="DiameterSampler.avpName.13">Called-Station-Id</stringProp>
            <stringProp name="DiameterSampler.avpData.13">internet</stringProp>
            <stringProp name="DiameterSampler.avpCounter">14</stringProp>
          </com.computaris.jmeter.protocol.diameter.sampler.DiameterSampler>
          <hashTree>
            <com.computaris.jmeter.assertions.DiameterAssertion guiclass="com.computaris.jmeter.assertions.gui.DiameterAssertionGui" testclass="com.computaris.jmeter.assertions.DiameterAssertion" testname="CCR-U Diameter Assertion" enabled="true">
              <boolProp name="DiameterAssertion.ASSERT_ON_RESPONSE">true</boolProp>
              <stringProp name="DiameterAssertion.responseCode">200</stringProp>
              <stringProp name="DiameterAssertion.message">Credit-Control-Answer</stringProp>
              <stringProp name="DiameterAssertion.avpCounter">1</stringProp>
              <boolProp name="DiameterAssertion.caseEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.loadEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagP">true</boolProp>
              <boolProp name="DiameterAssertion.flagE">false</boolProp>
              <boolProp name="DiameterAssertion.flagT">false</boolProp>
              <stringProp name="DiameterAssertion.applicationID">16777238</stringProp>
              <stringProp name="DiameterAssertion.hopbyhopID"></stringProp>
              <stringProp name="DiameterAssertion.endtoendID"></stringProp>
              <boolProp name="DiameterAssertion.containsEnabled">true</boolProp>
              <stringProp name="DiameterAssertion.ASSERTION_MODE">CONTAINS</stringProp>
              <boolProp name="DiameterAssertion.ignoreStatusEnabled">false</boolProp>
              <boolProp name="DiameterAssertion.flagAppID">true</boolProp>
              <boolProp name="DiameterAssertion.flagHbhID">false</boolProp>
              <boolProp name="DiameterAssertion.flagE2eID">false</boolProp>
              <stringProp name="DiameterAssertion.avpName.0">Result-Code</stringProp>
              <stringProp name="DiameterAssertion.avpData.0">2001</stringProp>
              <stringProp name="DiameterAssertion.avpIsReg.0">false</stringProp>
              <stringProp name="DiameterAssertion.avpFlagM.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagP.0"></stringProp>
              <stringProp name="DiameterAssertion.avpFlagV.0"></stringProp>
            </com.computaris.jmeter.assertions.DiameterAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Post Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop pcap and logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-720136512">Stop Pcap</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-632654166">Stop NV log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-592019242">Stop PD log</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Module Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">	</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="com.computaris.jmeter.visualizers.gui.DiameterDispatcherVizualizer" testclass="ResultCollector" testname="Diameter Messages" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Functions" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1454995107000</longProp>
        <longProp name="ThreadGroup.end_time">1454995107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PCAP" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Pcap" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of Tcpdump Command " enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PcapPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Pcap" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop PCAP On Server" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PcapPID</stringProp>
              <stringProp name="DiameterLoadvalue">PcapPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start NV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">LogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PD log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start PD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${pdhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-policy-designer.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PDPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop NV log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopNV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">LogPID</stringProp>
              <stringProp name="DiameterLoadvalue">LogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop PD log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopPD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${PDPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PDPID</stringProp>
              <stringProp name="DiameterLoadvalue">PDPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Tomcat log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>/bin/mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${tomcat_home}/logs/catalina.out&gt;${logpath}/${pcapdir}/${tomcatlogs}.log &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Tomcat log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${TomcatLogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterLoadvalue">TomcatLogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart (shut immediate)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070394255">Usage statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-737073625">SPR cache statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear cache spr-cache -all REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=cache spr-cache -all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1923322074">spr cache flushed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Tomcat Restart " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Tomcat Restart " enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ; sleep 3</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; rm -rf ../work/*&quot; </__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh startup.sh&quot; ; sleep 15</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = false/spr.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="serverinitiated.destination-host = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set serverinitiated.destination-host = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="set -Drevalidationtime.delta=0" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="-Drevalidationtime.delta=0" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/bin/netvertex.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000 -Drevalidationtime.delta=0 -Drevalidationtime.delta=0/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="end sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PD: Reload Policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/policy/reload/policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RConf" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI RConf REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">20000</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/rconf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1770785172">Server Configuration Successfully Reloaded for NetVertex</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify PCRF Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify PCRF Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2024504540">PCRF.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify OfflineRnC Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify OfflineRnC Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-399345633">OfflineRnC.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Diameter Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Diameter Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="533546614">DIAMETER.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Radius Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Radius Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1062068207">RADIUS.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
