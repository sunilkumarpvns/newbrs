<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Automation_plan_6622" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Mapping Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mapping_file_name" elementType="Argument">
            <stringProp name="Argument.name">mapping_file_name</stringProp>
            <stringProp name="Argument.value">PCC_Radius_Mapping.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Load Global Variable" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">global.variables</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">::</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="REST Default Parameters" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
        <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Basic YWRtaW46YWRtaW4=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter_plugins.radius_client.config.RadiusClientConfigGui" testclass="ConfigTestElement" testname="TTS Radius Client Configuration" enabled="true">
        <stringProp name="RadiusClientSampler.SERVER_ADDRESS">${serverip}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_AUTH">${radiusport}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_ACC">${radiusport}</stringProp>
        <stringProp name="RadiusClientSampler.SERVER_PORT_DM_CoA"></stringProp>
        <stringProp name="RadiusClientSampler..AUTH_USERNAME">${radiusshared}</stringProp>
        <stringProp name="RadiusClientSampler..SAUTH_PASSWORD">${radiusshared}</stringProp>
        <stringProp name="RadiusClientSampler..AUTH_SHARED_SECRED">${radiusshared}</stringProp>
        <stringProp name="TestPlan.comments">netvertex is client so provide ip of netvertex in hostname</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter_plugins.radius_server.config.RadiusServerConfigGui" testclass="ConfigTestElement" testname="TTS Radius Server Configuration" enabled="true">
        <stringProp name="RadiusServerSampler.SERVER_ADDRESS">${jmeterip}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_AUTH">${jmeterport}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_ACC">${jmeterport}</stringProp>
        <stringProp name="RadiusServerSampler.SERVER_PORT_COA_DM"></stringProp>
        <stringProp name="RadiusServerSampler.AUTH_USERNAME"></stringProp>
        <stringProp name="RadiusServerSampler.SAUTH_PASSWORD"></stringProp>
        <stringProp name="RadiusServerSampler.AUTH_SHARED_SECRED">${radiusshared}</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Oracle Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@${dbserverip}:${dbserverport}/${dbserversid}</stringProp>
        <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbpassword}</stringProp>
        <stringProp name="poolMax">5</stringProp>
        <stringProp name="timeout">1000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbusername}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Truncate in Oracle" enabled="false">
        <stringProp name="TestPlan.comments">To Clear </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1476949438000</longProp>
        <longProp name="ThreadGroup.end_time">1476949438000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_ALTERNATE_IDENTITY" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_ALTERNATE_IDENTITY</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_MONETARY_BALANCE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_MONETARY_BALANCE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_DATA_BALANCE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_DATA_BALANCE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_SUB_SESSION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SUB_SESSION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_SESSION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SESSION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate CRBN" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">update tblm_charging_rule_base_name set status=&apos;DELETED&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="TestPlan.comments">Data, Addon, Topup, Emergency, Promotional</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_PACKAGE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">update tblm_package set status=&apos;DELETED&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="TestPlan.comments">Data, Addon, Topup, Emergency, Promotional</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_IMS_PACKAGE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">update TBLM_IMS_PACKAGE set status=&apos;DELETED&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_PCC_RULE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">update TBLM_PCC_RULE set status=&apos;DELETED&apos; where SCOPE=&apos;GLOBAL&apos;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_SUBSCRIBER" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">truncate table tblm_subscriber</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_SUBSCRIPTION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SUBSCRIPTION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_USAGE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_USAGE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_PRDCT_OFR_SRV_PKG_REL" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">DELETE FROM TBLM_PRDCT_OFR_SRV_PKG_REL</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_PRODUCT_OFFER" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">DELETE FROM TBLM_PRODUCT_OFFER</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_USAGE_NOTIFICATION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">DELETE FROM TBLM_USAGE_NOTIFICATION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_NOTIFICATION_TEMPLATE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">DELETE FROM TBLM_NOTIFICATION_TEMPLATE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Update Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1020" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for Unlimited (Volume) HSQ RnC Quota Profile </stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1020" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for Unlimited (Volume) HSQ RnC Quota Profile </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1020_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1020_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1020_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1020_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1020</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61755</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;607fdf58-d31b-4eee-a09e-af51ed8e95ac&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;rtc_${id}_hsq_pcc&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_HSQ_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_HSQ_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 400 MB HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 400 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 400MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by  Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-420619019">DAILY_VOLUME
419430400
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; 
and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;999999999580569599&apos; 
and   
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;999999999580569599&apos;]  and   
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;999999999580569599&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;999999999999999999&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1021" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify  Call flow for (Volume) RnC Quota for Two Level FUP</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1021" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify  Call flow for (Volume) RnC Quota for Two Level FUP</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.121</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1021_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1021_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1021_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1021_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1021</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61756</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;3&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;3&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;FUP2&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;1000&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;20&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;500&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;1&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;10&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;250&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;2&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;5&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;1835008000&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;1048576000&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;1048576000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]

</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 400 MB HSQ Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 400 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 400MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-768452695">DAILY_VOLUME
419430400
0
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;1415577600&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;629145600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;629145600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]

</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 900 MB HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 900 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 900MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1361389850">DAILY_VOLUME
943718400
0
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;891289600&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1100 MB HSQ+FUP1 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1100 MB HSQ + FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">576716800</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">576716800</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1100 MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="811444788">DAILY_VOLUME
1153433600
0
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;681574400&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1500 MB FUP1 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1500 MB FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1500 MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1025201755">DAILY_VOLUME
1153433600
419430400
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;262144000&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1700 MB FUP1+FUP2 Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1700 MB FUP1 + FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">891289600</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">891289600</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1700 MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="506028163">DAILY_VOLUME
1153433600
629145600
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;52428800&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1900 MB FUP2 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1900 MB FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">996147200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">996147200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1900 MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="767757121">DAILY_VOLUME
1153433600
629145600
209715200
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;-157286400&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;52428800&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;52428800&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 2000 MB FUP2 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 2000 MB FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1048576000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">1048576000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen DM request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
                <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer DM" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 2000 MB " enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Volume desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1328815093">DAILY_VOLUME
1153433600
629145600
314572800
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;-262144000&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-104857600&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;-52428800&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;-52428800&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1022" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for unlimited (Time) HSQ RnC Quota Profile </stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1022" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for unlimited (Time) HSQ RnC Quota Profile </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.122</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1022_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1022_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1022_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1022_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1022</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61757</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;TIME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 3600 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 3600 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3600</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 3600 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by DAILY_TIME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-459812336">DAILY_TIME
3600
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQTimeBalance/text()=&apos;999999999999996399&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;999999999999996399&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;999999999999996399&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;999999999999999999&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1023" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Time) RnC Quota Profile for Two Level FUP</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1023" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Time) RnC Quota Profile for Two Level FUP</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.123</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1023_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1023_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1023_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1023_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1023</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61758</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;3&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;3&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;FUP2&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;TIME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;1000&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;20&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;20&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;2000&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;500&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;1&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;10&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;10&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;1000&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;250&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;2&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;5&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;5&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;500&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and  //quotaprofileBalance/availableHSQTimeBalance/text()=&apos;3500&apos; and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;2000&apos;]  and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1000 SEC HSQ Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1000 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1000</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1000 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Time from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Time desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1182376952">DAILY_TIME
1000
0
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and  //quotaprofileBalance/availableHSQTimeBalance/text()=&apos;2500&apos; and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 2030 SEC HSQ + FUP1 Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 2030 SEC HSQ + FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">2030</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 2020 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Time from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Time desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1214824053">DAILY_TIME
2020
0
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and  //quotaprofileBalance/availableHSQTimeBalance/text()=&apos;1480&apos; and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;-20&apos;]  and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;-20&apos;] and  //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 3020 SEC FUP1 Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 3020 SEC HSQ + FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3020</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 3020 Previous SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Time from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Time desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="547627758">DAILY_TIME
2020
1000
0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and  //quotaprofileBalance/availableHSQTimeBalance/text()=&apos;480&apos; and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;-20&apos;]  and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;-20&apos;] and  //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;0&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;0&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 3540 SEC  FUP2 Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 3540 SEC HSQ + FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3540</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen DM request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
                <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer DM" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 3540 Previous SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Time from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by Daily_Time desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2010513077">DAILY_TIME
2020
1000
520
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and  //quotaprofileBalance/availableHSQTimeBalance/text()=&apos;-40&apos; and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;-20&apos;]  and   //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;-20&apos;] and  //dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;0&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;0&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;-20&apos;]  and   //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;-20&apos;] and  //dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1024" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for Unlimited (Hybrid) HSQ RnC Quota Profile </stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1024" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for Unlimited (Hybrid) HSQ RnC Quota Profile </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.124</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1024_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1024_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1024_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1024_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1024</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61759</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;rtc_${id}_hsq_pcc&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_HSQ_PCC&lt;/name&gt;&#xd;
                                    &lt;precedence&gt;999&lt;/precedence&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_HSQ_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;gbrdlUnit&gt;Kbps&lt;/gbrdlUnit&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;HYBRID&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 350 MB and 2000 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 350 MB and 2000 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">2000</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">183500800</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">183500800</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 350 MB and 2000 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by DAILY_VOLUME,DAILY_TIME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="426120878">DAILY_VOLUME	DAILY_TIME
367001600	2000
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQTimeBalance/text()=&apos;999999999999997999&apos; and
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;999999999632998399&apos; and   
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;999999999999997999&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;999999999999997999&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;999999999999999999&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;999999999632998399&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;999999999632998399&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;999999999999999999&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1025" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify  Call flow for (Hybrid) RnC Quota for Two Level FUP</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1025" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify  Call flow for (Hybrid) RnC Quota for Two Level FUP</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.125</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1025_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1025_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1025_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1025_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1025</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">61760</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;3&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;3&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;FUP2&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;HYBRID&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;1000&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;20&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;20&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;2000&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;500&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;1&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;10&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;10&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;1000&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;250&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;2&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTime&gt;5&lt;/pulseTime&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;5&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalance&gt;500&lt;/timeBalance&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQTimeBalance/text()=&apos;3500&apos; and
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;1835008000&apos; and   
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;2000&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;2000&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;1048576000&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;1048576000&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 400 MB + 1000 SEC HSQ Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 400 MB + 1000 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1000</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 400 MB + 1000 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos; order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="439632729">DAILY_VOLUME	DAILY_TIME
419430400	1000
0	0
0	0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQTimeBalance/text()=&apos;2500&apos; and
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;1415577600&apos; and   
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/time[text()=&apos;2000&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;629145600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;629145600&apos;] and 
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;1048576000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/time[text()=&apos;1000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/time[text()=&apos;1000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/time[text()=&apos;1000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;524288000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;524288000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level1&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;524288000&apos;] and
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/time[text()=&apos;500&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/time[text()=&apos;500&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/time[text()=&apos;500&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;262144000&apos;]  and  
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;262144000&apos;] and 
//dataServiceTypeBalance[level=&apos;FUP Level2&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;262144000&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 900 MB + 1650 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 900 MB + 1650 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1650</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 900MB + 1640SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1761334202">DAILY_VOLUME	DAILY_TIME
943718400	1640
0	0
0	0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1100 MB + 1900 SEC HSQ+FUP1 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1100 MB + 1900 SEC HSQ + FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1900</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">576716800</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">576716800</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1100 MB + 1900 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1593599309">DAILY_VOLUME	DAILY_TIME
1153433600	1900
0	0
0	0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1500 MB + 2800 SEC FUP1 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1500 MB + 2800 SEC FUP1" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">2800</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1500 MB + 2800 SEC " enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-947024171">DAILY_VOLUME	DAILY_TIME
1153433600	1900
419430400	900
0	0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1650 MB + 2950 SEC FUP1+FUP2 Usage " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1650 MB + 2950 SEC FUP1 + FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">2950</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">865075200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">865075200</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1650 MB + 2950 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1017610371">DAILY_VOLUME	DAILY_TIME
1153433600	1900
576716800	1050
0	0
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1850 MB + 3400 SEC FUP2 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1850 MB + 3400 SEC FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3400</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">969932800</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">969932800</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1850 MB + 3400 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-380491454">DAILY_VOLUME	DAILY_TIME
1153433600	1900
576716800	1050
209715200	450
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1950 MB + 3450 SEC FUP2 Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1950 MB + 3450 SEC FUP2" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3450</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">1022361600</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.4">1022361600</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.7">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.7">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">8</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen DM request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="DM request received" enabled="true">
                <stringProp name="RadiusAssertion.message">Disconnect-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer DM" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">Disconnect-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 1950 MB + 3450 SEC" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select DAILY_VOLUME,DAILY_TIME from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;  order by DAILY_VOLUME desc</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-710663792">DAILY_VOLUME	DAILY_TIME
1153433600	1900
576716800	1050
314572800	500
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1026" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Volume) Rate Card having different Rate and Pulse unit </stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1026" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Volume) Rate Card having different Rate and Pulse unit </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.126</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1026_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1026_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1026_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1026_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1026</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">471868</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;rate-card-id&gt;rtc_${id}_rate_card&lt;/rate-card-id&gt;&#xd;
                    &lt;rate-card-name&gt;RTC_${id}_RATE_CARD&lt;/rate-card-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rate-cards&gt;&#xd;
                &lt;rate-card&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_rate_card&lt;/id&gt;&#xd;
                    &lt;data-rate-card-versions&gt;&#xd;
                        &lt;data-rate-card-version&gt;&#xd;
                            &lt;data-rate-card-version-details&gt;&#xd;
                                &lt;data-rate-card-version-detail&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;pulse-1&gt;100&lt;/pulse-1&gt;&#xd;
                                    &lt;rate-1&gt;1&lt;/rate-1&gt;&#xd;
                                    &lt;rate-type&gt;FLAT&lt;/rate-type&gt;&#xd;
                                &lt;/data-rate-card-version-detail&gt;&#xd;
                            &lt;/data-rate-card-version-details&gt;&#xd;
                            &lt;effective-from-date&gt;1533307766000&lt;/effective-from-date&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;version-name&gt;1&lt;/version-name&gt;&#xd;
                        &lt;/data-rate-card-version&gt;&#xd;
                    &lt;/data-rate-card-versions&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_RATE_CARD&lt;/name&gt;&#xd;
                    &lt;pkgId&gt;rtc_${id}_gy_base&lt;/pkgId&gt;&#xd;
                    &lt;pulse-unit&gt;BYTE&lt;/pulse-unit&gt;&#xd;
                    &lt;rate-unit&gt;KB&lt;/rate-unit&gt;&#xd;
                &lt;/rate-card&gt;&#xd;
            &lt;/rate-cards&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Add 12 Rs Monetory Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddMonetaryBalance&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;alternateId&gt; &lt;/alternateId&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;serviceName&gt;All Service&lt;/serviceName&gt;
         &lt;totalBalance&gt;12&lt;/totalBalance&gt;
         &lt;validFromDate&gt;1524638063000&lt;/validFromDate&gt;
         &lt;validToDate&gt;2543986260000&lt;/validToDate&gt;
         &lt;parameter1&gt; &lt;/parameter1&gt;
         &lt;parameter2&gt; &lt;/parameter2&gt;
      &lt;/sub:wsAddMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;12.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;12.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 10100 Byte HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 10100 Byte HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.0">5050</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.1">5050</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">3</stringProp>
              <stringProp name="RadiusSampler.avpName.3">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and  //monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  //monetaryBalanceData/availBalance&gt;&apos;2.13&apos; and //monetaryBalanceData/availBalance&lt;&apos;2.14&apos; and //monetaryBalanceData/currency/text()=&apos;INR&apos; and //monetaryBalanceData/actualBalance&gt;&apos;2.13&apos; and //monetaryBalanceData/actualBalance&lt;&apos;2.14&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 12100 Byte HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 12100 Byte HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.0">6050</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.1">6050</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">3</stringProp>
              <stringProp name="RadiusSampler.avpName.3">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and  //monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  //monetaryBalanceData/availBalance&gt;&apos;0.18&apos; and //monetaryBalanceData/availBalance&lt;&apos;0.19&apos; and //monetaryBalanceData/currency/text()=&apos;INR&apos; and //monetaryBalanceData/actualBalance&gt;&apos;0.18&apos; and //monetaryBalanceData/actualBalance&lt;&apos;0.19&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1027" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Time) Rate Card having different Rate and Pulse unit </stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1027" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow for (Time) Rate Card having different Rate and Pulse unit </stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.127</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1027_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1027_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1027_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1027_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1027</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">471869 </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;rate-card-id&gt;rtc_${id}_rate_card&lt;/rate-card-id&gt;&#xd;
                    &lt;rate-card-name&gt;RTC_${id}_RATE_CARD&lt;/rate-card-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rate-cards&gt;&#xd;
                &lt;rate-card&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_rate_card&lt;/id&gt;&#xd;
                    &lt;data-rate-card-versions&gt;&#xd;
                        &lt;data-rate-card-version&gt;&#xd;
                            &lt;data-rate-card-version-details&gt;&#xd;
                                &lt;data-rate-card-version-detail&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;pulse-1&gt;60&lt;/pulse-1&gt;&#xd;
                                    &lt;rate-1&gt;1&lt;/rate-1&gt;&#xd;
                                    &lt;rate-type&gt;FLAT&lt;/rate-type&gt;&#xd;
                                &lt;/data-rate-card-version-detail&gt;&#xd;
                            &lt;/data-rate-card-version-details&gt;&#xd;
                            &lt;effective-from-date&gt;1533307766000&lt;/effective-from-date&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;version-name&gt;1&lt;/version-name&gt;&#xd;
                        &lt;/data-rate-card-version&gt;&#xd;
                    &lt;/data-rate-card-versions&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_RATE_CARD&lt;/name&gt;&#xd;
                    &lt;pkgId&gt;rtc_${id}_gy_base&lt;/pkgId&gt;&#xd;
                    &lt;pulse-unit&gt;SECOND&lt;/pulse-unit&gt;&#xd;
                    &lt;rate-unit&gt;MINUTE&lt;/rate-unit&gt;&#xd;
                &lt;/rate-card&gt;&#xd;
            &lt;/rate-cards&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Add 12 Rs Monetory Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddMonetaryBalance&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;alternateId&gt; &lt;/alternateId&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;serviceName&gt;All Service&lt;/serviceName&gt;
         &lt;totalBalance&gt;12&lt;/totalBalance&gt;
         &lt;validFromDate&gt;1524638063000&lt;/validFromDate&gt;
         &lt;validToDate&gt;2543986260000&lt;/validToDate&gt;
         &lt;parameter1&gt; &lt;/parameter1&gt;
         &lt;parameter2&gt; &lt;/parameter2&gt;
      &lt;/sub:wsAddMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;12.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;12.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">17</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 600 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 600 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">600</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and  //monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  //monetaryBalanceData/availBalance=&apos;2.0&apos;  and //monetaryBalanceData/currency/text()=&apos;INR&apos; and //monetaryBalanceData/actualBalance=&apos;2.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 720 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 720 SEC SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">720</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and  //monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  //monetaryBalanceData/availBalance=&apos;0.0&apos; and //monetaryBalanceData/currency/text()=&apos;INR&apos; and //monetaryBalanceData/actualBalance=&apos;0.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1028" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow when Monetary Balance is less than default grant unit</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1028" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify  Call flow when Monetary Balance is less than default grant unit</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.128</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1028_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1028_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1028_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1028_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1028</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">62902</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;rate-card-id&gt;rtc_${id}_rate_card&lt;/rate-card-id&gt;&#xd;
                    &lt;rate-card-name&gt;RTC_${id}_RATE_CARD&lt;/rate-card-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rate-cards&gt;&#xd;
                &lt;rate-card&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_rate_card&lt;/id&gt;&#xd;
                    &lt;data-rate-card-versions&gt;&#xd;
                        &lt;data-rate-card-version&gt;&#xd;
                            &lt;data-rate-card-version-details&gt;&#xd;
                                &lt;data-rate-card-version-detail&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;pulse-1&gt;10&lt;/pulse-1&gt;&#xd;
                                    &lt;rate-1&gt;1&lt;/rate-1&gt;&#xd;
                                    &lt;rate-type&gt;FLAT&lt;/rate-type&gt;&#xd;
                                &lt;/data-rate-card-version-detail&gt;&#xd;
                            &lt;/data-rate-card-version-details&gt;&#xd;
                            &lt;effective-from-date&gt;1533307766000&lt;/effective-from-date&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;version-name&gt;1&lt;/version-name&gt;&#xd;
                        &lt;/data-rate-card-version&gt;&#xd;
                    &lt;/data-rate-card-versions&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_RATE_CARD&lt;/name&gt;&#xd;
                    &lt;pkgId&gt;rtc_${id}_gy_base&lt;/pkgId&gt;&#xd;
                    &lt;pulse-unit&gt;MB&lt;/pulse-unit&gt;&#xd;
                    &lt;rate-unit&gt;MB&lt;/rate-unit&gt;&#xd;
                &lt;/rate-card&gt;&#xd;
            &lt;/rate-cards&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Add 12 Rs Monetory Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddMonetaryBalance&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;alternateId&gt; &lt;/alternateId&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;serviceName&gt;All Service&lt;/serviceName&gt;
         &lt;totalBalance&gt;12&lt;/totalBalance&gt;
         &lt;validFromDate&gt;1524638063000&lt;/validFromDate&gt;
         &lt;validToDate&gt;2543986260000&lt;/validToDate&gt;
         &lt;parameter1&gt; &lt;/parameter1&gt;
         &lt;parameter2&gt; &lt;/parameter2&gt;
      &lt;/sub:wsAddMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;12.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;12.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;12.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">Service-Type</stringProp>
                <stringProp name="RadiusAssertion.avpData.0"></stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1029" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify concurrency with configured Rate and Pulse</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1029" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify concurrency with configured Rate and Pulse</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.129</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1029_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1029_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1029_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1029_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1029</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">62903</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip1" elementType="Argument">
                <stringProp name="Argument.name">framedip1</stringProp>
                <stringProp name="Argument.value">192.168.21.129</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;rate-card-id&gt;rtc_${id}_rate_card&lt;/rate-card-id&gt;&#xd;
                    &lt;rate-card-name&gt;RTC_${id}_RATE_CARD&lt;/rate-card-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rate-cards&gt;&#xd;
                &lt;rate-card&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_rate_card&lt;/id&gt;&#xd;
                    &lt;data-rate-card-versions&gt;&#xd;
                        &lt;data-rate-card-version&gt;&#xd;
                            &lt;data-rate-card-version-details&gt;&#xd;
                                &lt;data-rate-card-version-detail&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;pulse-1&gt;1&lt;/pulse-1&gt;&#xd;
                                    &lt;rate-1&gt;1&lt;/rate-1&gt;&#xd;
                                    &lt;rate-type&gt;FLAT&lt;/rate-type&gt;&#xd;
                                &lt;/data-rate-card-version-detail&gt;&#xd;
                            &lt;/data-rate-card-version-details&gt;&#xd;
                            &lt;effective-from-date&gt;1533307766000&lt;/effective-from-date&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;version-name&gt;1&lt;/version-name&gt;&#xd;
                        &lt;/data-rate-card-version&gt;&#xd;
                    &lt;/data-rate-card-versions&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_RATE_CARD&lt;/name&gt;&#xd;
                    &lt;pkgId&gt;rtc_${id}_gy_base&lt;/pkgId&gt;&#xd;
                    &lt;pulse-unit&gt;MINUTE&lt;/pulse-unit&gt;&#xd;
                    &lt;rate-unit&gt;MINUTE&lt;/rate-unit&gt;&#xd;
                &lt;/rate-card&gt;&#xd;
            &lt;/rate-cards&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Add 30 Rs Monetory Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddMonetaryBalance&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;alternateId&gt; &lt;/alternateId&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;serviceName&gt;All Service&lt;/serviceName&gt;
         &lt;totalBalance&gt;30&lt;/totalBalance&gt;
         &lt;validFromDate&gt;1524638063000&lt;/validFromDate&gt;
         &lt;validToDate&gt;2543986260000&lt;/validToDate&gt;
         &lt;parameter1&gt; &lt;/parameter1&gt;
         &lt;parameter2&gt; &lt;/parameter2&gt;
      &lt;/sub:wsAddMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;30.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;30.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;30.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 600 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 600 SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">600</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;30.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;20.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;20.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1200 SEC HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 600 SEC SEC HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1200</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.1">3</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;30.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;10.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;10.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting for another user" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">111111110291</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip1}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting with 1800 MB  and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Time</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1800</stringProp>
              <stringProp name="RadiusSampler.avpName.1">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.3">2</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">2000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Verify Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetMonetaryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceId&gt;&lt;/serviceId&gt;
         &lt;!--Optional:--&gt;
         &lt;serviceName&gt;&lt;/serviceName&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetMonetaryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
            <stringProp name="SoapSampler.xml_data_file"></stringProp>
            <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
            <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          </SoapSampler>
          <hashTree>
            <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Balance Found" enabled="true">
              <boolProp name="XPath.negate">false</boolProp>
              <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos;  and 
//monetaryBalanceData/currency/text()=&apos;INR&apos; and 
//monetaryBalanceData/totalBalance/text()=&apos;30.0&apos; and  
//monetaryBalanceData/availBalance/text()=&apos;0.0&apos; and 
//monetaryBalanceData/actualBalance/text()=&apos;0.0&apos;</stringProp>
              <boolProp name="XPath.validate">false</boolProp>
              <boolProp name="XPath.whitespace">false</boolProp>
              <boolProp name="XPath.tolerant">false</boolProp>
              <boolProp name="XPath.namespace">false</boolProp>
            </XPathAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1030" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow when RnC Based AddOn is Exhausted and have to continue with RnC Based Base Package</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1030" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Cumulative | Verify Call flow when RnC Based AddOn is Exhausted and have to continue with Usage Metering Based Base Package</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.130</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1030_RNC_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">RTC_1030_RNC_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1030_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1030_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addonpackage" elementType="Argument">
                <stringProp name="Argument.name">addonpackage</stringProp>
                <stringProp name="Argument.value">RTC_1030_GY_ADDON</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addonpackage_id" elementType="Argument">
                <stringProp name="Argument.name">addonpackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1030_gy_addon</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addonproductoffer" elementType="Argument">
                <stringProp name="Argument.name">addonproductoffer</stringProp>
                <stringProp name="Argument.value">RTC_1030_ADDON_PO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="addonproductoffer_id" elementType="Argument">
                <stringProp name="Argument.name">addonproductoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1030_ADDON_PO_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1030</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">62904</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID IN (&apos;${productoffer_id}&apos;, &apos;${addonproductoffer_id}&apos;)
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete addon Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${addonproductoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID IN (&apos;${datapackage_id}&apos;, &apos;${addonpackage_id}&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create  Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;RTC_${id}_RNC_BASE&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_RNC_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin &lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_PCC_PROFILE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_RULE&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_RULE&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Static&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_QUOTA&lt;/name&gt;&#xd;
                &lt;proration&gt;false&lt;/proration&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;100&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC AddOn Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_addon&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_ADDON&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;ADDON&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;RTC_${id}_ADDON_QOS&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_ADDON_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_HSQ_ADDON_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_HSQ_ADDON_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;RTC_${id}_GY_QUOTA&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;100&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolume&gt;10&lt;/pulseVolume&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_addon_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Addon Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Addon Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${addonproductoffer_id}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;name&quot;: &quot;${addonproductoffer}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by Automation&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;type&quot;: &quot;ADDON&quot;,&#xd;
  &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;subscriptionPrice&quot;: null,&#xd;
  &quot;balance&quot;: null,&#xd;
  &quot;availabilityStartDate&quot;: null,&#xd;
  &quot;availabilityEndDate&quot;: null,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;emailTemplateId&quot;: null,&#xd;
  &quot;smsTemplateId&quot;: null,&#xd;
  &quot;productOfferServicePkgRelDataList&quot;: [],&#xd;
  &quot;productOfferAutoSubscriptionRelDatas&quot;: [],&#xd;
  &quot;dataServicePkgId&quot;: &quot;${addonpackage_id}&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="887420182">&quot;id&quot;:&quot;${addonproductoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Addon Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addonproductoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="887420182">&quot;id&quot;:&quot;${addonproductoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addonproductoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${addonproductoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscribe RnC AddOn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsSubscribeAddOnProductOffer&gt;&#xd;
         &lt;parentId&gt;&lt;/parentId&gt;          &#xd;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;          &#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;          &#xd;
         &lt;updateAction&gt;0&lt;/updateAction&gt;          &#xd;
         &lt;cui&gt;&lt;/cui&gt;          &#xd;
         &lt;addOnProductOfferId&gt;${addonproductoffer_id}&lt;/addOnProductOfferId&gt;          &#xd;
         &lt;addOnProductOfferName&gt;&lt;/addOnProductOfferName&gt;          &#xd;
         &lt;subscriptionStatusValue&gt;0&lt;/subscriptionStatusValue&gt;          &#xd;
         &lt;subscriptionStatusName&gt;&lt;/subscriptionStatusName&gt;          &#xd;
         &lt;startTime&gt;&lt;/startTime&gt;          &#xd;
         &lt;endTime&gt;&lt;/endTime&gt;&#xd;
         &lt;priority&gt;1&lt;/priority&gt;          &#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;          &#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsSubscribeAddOnProductOffer&gt;&#xd;
   &lt;/soap:Body&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/services/SubscriptionService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">r	n</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1890876606">&lt;productOfferId&gt;${addonproductoffer_id}&lt;/productOfferId&gt;&lt;productOfferName&gt;${addonproductoffer}&lt;/productOfferName&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
              <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 100 MB AddOn HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 100 MB AddOn HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.0">52428800</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.1">52428800</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">3</stringProp>
              <stringProp name="RadiusSampler.avpName.3">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">2000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;104857600&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;104857600&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;104857600&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;104857600&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 200 MB Base HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 200 MB Base HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.0">104857600</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.1">104857600</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">3</stringProp>
              <stringProp name="RadiusSampler.avpName.3">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;0&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;0&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;0&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;104857600&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="XPath Assertion" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;0&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;0&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;0&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;104857600&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1032" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Radius-Gy | Session Management API</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_1032" enabled="true">
          <stringProp name="TestPlan.comments">Radius-Gy | Session Management API</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriberidentity" elementType="Argument">
                <stringProp name="Argument.name">subscriberidentity</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="password" elementType="Argument">
                <stringProp name="Argument.name">password</stringProp>
                <stringProp name="Argument.value">1111111032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">192.168.2.120</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage" elementType="Argument">
                <stringProp name="Argument.name">datapackage</stringProp>
                <stringProp name="Argument.value">RTC_1032_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="datapackage_id" elementType="Argument">
                <stringProp name="Argument.name">datapackage_id</stringProp>
                <stringProp name="Argument.value">rtc_1032_gy_base</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer" elementType="Argument">
                <stringProp name="Argument.name">productoffer</stringProp>
                <stringProp name="Argument.value">RTC_1032_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="productoffer_id" elementType="Argument">
                <stringProp name="Argument.name">productoffer_id</stringProp>
                <stringProp name="Argument.value">RTC_1032_PRODUCT_OFFER_111111111</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-Gy-RTC_1032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapfilename" elementType="Argument">
                <stringProp name="Argument.name">pcapfilename</stringProp>
                <stringProp name="Argument.value">RTC_1032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="logfilename" elementType="Argument">
                <stringProp name="Argument.name">logfilename</stringProp>
                <stringProp name="Argument.value">RTC_1032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1032</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">76259</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Cleanup" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change PO status to DESIGN" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PRODUCT_OFFER SET PACKAGE_MODE=&apos;DESIGN&apos; where ID =&apos;${productoffer_id}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Base Product Offer" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url_without_ext}/${productoffer_id}.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Change package status to deleted" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">UPDATE TBLM_PACKAGE SET STATUS=&apos;DELETED&apos; where ID =&apos;${datapackage_id}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete subscriber session" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_SESSION WHERE SUBSCRIBER_IDENTITY=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete data balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_DATA_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete UM balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLT_USAGE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Delete monetary balance" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">DELETE FROM TBLM_MONETARY_BALANCE WHERE SUBSCRIBER_ID=&apos;${subscriberidentity}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Deleter Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsDeleteSubscriberProfile&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;parameter1&gt;&lt;/parameter1&gt;&#xd;
         &lt;parameter2&gt;&lt;/parameter2&gt;&#xd;
      &lt;/sub:wsDeleteSubscriberProfile&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Purge Subscriber" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;&#xd;
   &lt;soap:Header/&gt;&#xd;
   &lt;soap:Body&gt;&#xd;
      &lt;sub:wsPurgeSubscriber&gt;&#xd;
         &lt;subscriberID&gt;${subscriberidentity}&lt;/subscriberID&gt;&#xd;
         &lt;alternateId&gt;&lt;/alternateId&gt;&#xd;
         &lt;param1&gt;&lt;/param1&gt;&#xd;
         &lt;param2&gt;&lt;/param2&gt;&#xd;
      &lt;/sub:wsPurgeSubscriber&gt;&#xd;
   &lt;/soap:Body&gt;&#xd;
&lt;/soap:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RTC_${id} Pre_Processing" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create RnC Data Package" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;rtc_${id}_gy_base&lt;/id&gt;&#xd;
            &lt;name&gt;RTC_${id}_GY_BASE&lt;/name&gt;&#xd;
            &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;rtc_${id}_gy_qos&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_GY_QOS&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;607fdf58-d31b-4eee-a09e-af51ed8e95ac&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;rtc_${id}_hsq_pcc&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_HSQ_PCC&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_HSQ_PCC&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;100&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;rtc_${id}_gy_hsq&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_GY_QUOTA&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;rtc_${id}_gy_hsq&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by Automation&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_GY_QUOTA&lt;/name&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval&gt;1&lt;/renewal-interval&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Base Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Create Base Product Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${productoffer_id}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${productoffer}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by Automation&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${datapackage_id}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Get above created Base Product Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="725851598">&quot;id&quot;:&quot;${productoffer_id}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy for Policy Designer" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${id} Change ProductOffer To Live Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${productoffer_id}/updateMode?_method=put&amp;pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy from Policy Designer" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Create Subscriber ${username}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD_CHECK&lt;/key&gt;
                  &lt;value&gt;TRUE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;Active&lt;/value&gt;
               &lt;/entry&gt;
                &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${productoffer}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
                  &lt;value&gt;${cui}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                  &lt;value&gt;${imsi}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                  &lt;value&gt;${msisdn}&lt;/value&gt;
               &lt;/entry&gt;
             &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1149187101">SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="true">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session wsGetSessionsBySubscriberIdentity" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wsGetSessionsBySubscriberIdentity" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/session/search/byIdentity?subscriberIdentity=&amp;alternateId=${imsi}&amp;sessionType=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1724258691">&quot;responseCode&quot;:200,&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session wsGetSessionsByIP" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wsGetSessionsByIP" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/session/search/bySessionIP?sessionIP=${framedip}&amp;sessionType=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1724258691">&quot;responseCode&quot;:200,&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 400 MB HSQ Usage" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 400 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">209715200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Reported Quota 400MB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="query">select Daily_Volume from tblm_data_balance where SUBSCRIBER_ID = &apos;${username}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verification of usage in DB " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-420619019">DAILY_VOLUME
419430400
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Data Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriptionService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscription.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsGetNonMonitoryBalance&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriberId&gt;${subscriberidentity}&lt;/subscriberId&gt;
         &lt;!--Optional:--&gt;
         &lt;alternateId&gt;&lt;/alternateId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageId&gt;&lt;/packageId&gt;
         &lt;!--Optional:--&gt;
         &lt;packageName&gt;${datapackage}&lt;/packageName&gt;
         &lt;!--Optional:--&gt;
         &lt;subscriptionId&gt;&lt;/subscriptionId&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsGetNonMonitoryBalance&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <XPathAssertion guiclass="XPathAssertionGui" testclass="XPathAssertion" testname="Usage Found" enabled="true">
                <boolProp name="XPath.negate">false</boolProp>
                <stringProp name="XPath.xpath">//responseCode/text()=&apos;200&apos; and 
//quotaprofileBalance/availableHSQVolumeBalance/text()=&apos;999999999580569599&apos; and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/actual/totalOctets[text()=&apos;999999999580569599&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/remaining/totalOctets[text()=&apos;999999999580569599&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/billingCycleBalance/total/totalOctets[text()=&apos;999999999999999999&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/weeklyBalance/actual/totalOctets[text()=&apos;999999999580569599&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/weeklyBalance/remaining/totalOctets[text()=&apos;999999999580569599&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/weeklyBalance/total/totalOctets[text()=&apos;999999999999999999&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/dailyBalance/actual/totalOctets[text()=&apos;999999999580569599&apos;]  and  
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/dailyBalance/remaining/totalOctets[text()=&apos;999999999580569599&apos;] and
//dataServiceTypeBalance[level=&apos;HSQ&apos;]/dailyBalance/total/totalOctets[text()=&apos;999999999999999999&apos;]</stringProp>
                <boolProp name="XPath.validate">false</boolProp>
                <boolProp name="XPath.whitespace">false</boolProp>
                <boolProp name="XPath.tolerant">false</boolProp>
                <boolProp name="XPath.namespace">false</boolProp>
              </XPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session wsReauthSessionsByCoreSessionId" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wsReauthSessionsByCoreSessionId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/session/reAuth/byCoreSessionId?coreSessionId=${sessionid}:RADIUS:netvertexfull.elitecore.com&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1724258691">&quot;responseCode&quot;:200,&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Get Session wsReauthSessionsBySubscriberIdentity" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </com.computaris.jmeter.ext.controls.ParameterizedController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="wsReauthSessionsBySubscriberIdentity" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/session/reAuth/byIdentity?subscriberIdentity=${subscriberidentity}&amp;alternateId=&amp;parameter1=&amp;parameter2=&amp;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1724258691">&quot;responseCode&quot;:200,&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Listen COA request" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
            <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
            <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
            <stringProp name="RadiusSampler.avpData.0">1</stringProp>
            <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
            <stringProp name="RadiusSampler.avpData.1">1</stringProp>
            <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
            <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
            <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
            <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
            <stringProp name="RadiusSampler.avpCounter">4</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="TTS Radius Assertion" enabled="true">
              <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
              <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
              <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
            </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="Answer CoA" enabled="false">
            <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
            <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
            <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
            <stringProp name="RadiusSampler.avpCounter">0</stringProp>
          </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
            <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">3000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="Verification of Terminated Session" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </com.computaris.jmeter.ext.controls.ParameterizedController>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session is Terminated using Web Service" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1276722528">&lt;responseMessage&gt;NOT FOUND. Reason: No session found with sessionIP: ${framedip}&lt;/responseMessage&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1034" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">RADIUS | Verify end to end call flow were user have Base Package , Multiple Spare and Data Topups</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_${id}" enabled="true">
          <stringProp name="TestPlan.comments">Verify end to end call flow were user have Base Package , Multiple Spare and Data Topups</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriber_id" elementType="Argument">
                <stringProp name="Argument.name">subscriber_id</stringProp>
                <stringProp name="Argument.value">1111111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="alternate_id" elementType="Argument">
                <stringProp name="Argument.name">alternate_id</stringProp>
                <stringProp name="Argument.value">1311111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111034_gy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">10.121.21.53</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">RADIUS-RTC_1034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="base_data_package_1" elementType="Argument">
                <stringProp name="Argument.name">base_data_package_1</stringProp>
                <stringProp name="Argument.value">RTC_1034_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="base_product_offer_1" elementType="Argument">
                <stringProp name="Argument.name">base_product_offer_1</stringProp>
                <stringProp name="Argument.value">RTC_1034_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data_topup_1" elementType="Argument">
                <stringProp name="Argument.name">data_topup_1</stringProp>
                <stringProp name="Argument.value">RTC_1034_DATA_SPARE_TOP_UP1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data_topup_2" elementType="Argument">
                <stringProp name="Argument.name">data_topup_2</stringProp>
                <stringProp name="Argument.value">RTC_1034_DATA_TOP_UP1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data_topup_3" elementType="Argument">
                <stringProp name="Argument.name">data_topup_3</stringProp>
                <stringProp name="Argument.value">RTC_1034_DATA_SPARE_TOP_UP2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data_topup_4" elementType="Argument">
                <stringProp name="Argument.name">data_topup_4</stringProp>
                <stringProp name="Argument.value">RTC_1034_DATA_TOP_UP2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">92055</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1034</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id}-Pre Processing" enabled="true"/>
          <hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="CleanUp Sampler" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriber-id" elementType="Argument">
                    <stringProp name="Argument.name">subscriber-id</stringProp>
                    <stringProp name="Argument.value">${subscriber_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="product-offer-id" elementType="Argument">
                    <stringProp name="Argument.name">product-offer-id</stringProp>
                    <stringProp name="Argument.value">${base_product_offer_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="data-package-id" elementType="Argument">
                    <stringProp name="Argument.name">data-package-id</stringProp>
                    <stringProp name="Argument.value">${base_data_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rnc-package-id" elementType="Argument">
                    <stringProp name="Argument.name">rnc-package-id</stringProp>
                    <stringProp name="Argument.value">${base_rnc_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="data-topup-id" elementType="Argument">
                    <stringProp name="Argument.name">data-topup-id</stringProp>
                    <stringProp name="Argument.value">${data_topup_1},${data_topup_2},${data_topup_3},${data_topup_4}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bod-package-id" elementType="Argument">
                    <stringProp name="Argument.name">bod-package-id</stringProp>
                    <stringProp name="Argument.value">${bod_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="email-template-id" elementType="Argument">
                    <stringProp name="Argument.name">email-template-id</stringProp>
                    <stringProp name="Argument.value">${email_template_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sms-template-id" elementType="Argument">
                    <stringProp name="Argument.name">sms-template-id</stringProp>
                    <stringProp name="Argument.value">${sms_template_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.sterlite.netvertex.nvsampler.cleanup.sampler.CleanUpSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Data Package" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;${base_data_package_1}&lt;/id&gt;&#xd;
            &lt;name&gt;${base_data_package_1}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_PCC_PROFILE2&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;2&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;2&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                     &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_RULE2&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_RULE2&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;50&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA_PROFILE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_PCC_PROFILE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;2&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;2&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;2&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_RULE1&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_RULE1&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;50&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA_PROFILE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_QUOTA_PROFILE&lt;/name&gt;&#xd;
                &lt;proration&gt;false&lt;/proration&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;500&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;TIME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${base_product_offer_1}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${base_product_offer_1}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${base_data_package_1}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1401564903">&quot;id&quot;:&quot;${base_product_offer_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1401564903">&quot;id&quot;:&quot;${base_product_offer_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Spare Top Up with PCC Profile" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Spare  Top-up with PCC Profile" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${data_topup_1}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;${data_topup_1}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;price&quot;: null,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;multipleSubscription&quot;: true,&#xd;
  &quot;availabilityStartDate&quot;: 1536085800000,&#xd;
  &quot;availabilityEndDate&quot;: 2546078335000,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;topupType&quot;: &quot;SPARE_TOP_UP&quot;,&#xd;
  &quot;quotaType&quot;: &quot;VOLUME&quot;,&#xd;
  &quot;unitType&quot;: &quot;TOTAL&quot;,&#xd;
  &quot;volumeBalance&quot;: 500,&#xd;
  &quot;volumeBalanceUnit&quot;: &quot;MB&quot;,&#xd;
  &quot;timeBalance&quot;: 100,&#xd;
  &quot;timeBalanceUnit&quot;: &quot;SECOND&quot;,&#xd;
  &quot;topUpNotificationList&quot;: [],&#xd;
  &quot;applicablePCCProfiles&quot;: &quot;RTC_${id}_PCC_PROFILE&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${data_topup_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307571798">&quot;id&quot;:&quot;${data_topup_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Spare  Topup with PCC Profile mode to TEST" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_1}/updateMode.json?pkgMode=DESIGN</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307571798">&quot;id&quot;:&quot;${data_topup_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Spare  Topup with PCC Profile mode to LIVE" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_1}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307571798">&quot;id&quot;:&quot;${data_topup_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Top Up with PCC Profile" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Data Top-up with PCC Profile" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${data_topup_2}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;${data_topup_2}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;price&quot;: null,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;multipleSubscription&quot;: true,&#xd;
  &quot;availabilityStartDate&quot;: 1536085800000,&#xd;
  &quot;availabilityEndDate&quot;: 2546078335000,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;topupType&quot;: &quot;TOP_UP&quot;,&#xd;
  &quot;quotaType&quot;: &quot;VOLUME&quot;,&#xd;
  &quot;unitType&quot;: &quot;TOTAL&quot;,&#xd;
  &quot;volumeBalance&quot;: 500,&#xd;
  &quot;volumeBalanceUnit&quot;: &quot;MB&quot;,&#xd;
  &quot;timeBalance&quot;: 100,&#xd;
  &quot;timeBalanceUnit&quot;: &quot;SECOND&quot;,&#xd;
  &quot;topUpNotificationList&quot;: [],&#xd;
  &quot;applicablePCCProfiles&quot;: &quot;RTC_${id}_PCC_PROFILE2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${data_topup_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307572759">&quot;id&quot;:&quot;${data_topup_2}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup with PCC Profile mode to TEST" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_2}/updateMode.json?pkgMode=DESIGN</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307572759">&quot;id&quot;:&quot;${data_topup_2}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup with PCC Profile mode to LIVE" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_2}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307572759">&quot;id&quot;:&quot;${data_topup_2}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Spare Top Up without PCC Profile" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Spare  Top-up without PCC Profile" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${data_topup_3}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;${data_topup_3}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;price&quot;: null,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;multipleSubscription&quot;: true,&#xd;
  &quot;availabilityStartDate&quot;: 1536085800000,&#xd;
  &quot;availabilityEndDate&quot;: 2546078335000,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;topupType&quot;: &quot;SPARE_TOP_UP&quot;,&#xd;
  &quot;quotaType&quot;: &quot;VOLUME&quot;,&#xd;
  &quot;unitType&quot;: &quot;TOTAL&quot;,&#xd;
  &quot;volumeBalance&quot;: 500,&#xd;
  &quot;volumeBalanceUnit&quot;: &quot;MB&quot;,&#xd;
  &quot;timeBalance&quot;: 100,&#xd;
  &quot;timeBalanceUnit&quot;: &quot;SECOND&quot;,&#xd;
  &quot;topUpNotificationList&quot;: [],&#xd;
  &quot;applicablePCCProfiles&quot;: null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${data_topup_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307573720">&quot;id&quot;:&quot;${data_topup_3}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Spare  Topup without PCC Profile mode to TEST" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_3}/updateMode.json?pkgMode=DESIGN</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307573720">&quot;id&quot;:&quot;${data_topup_3}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Spare  Topup without PCC Profile mode to LIVE" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_3}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307573720">&quot;id&quot;:&quot;${data_topup_3}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Top Up withanother PCC Profile" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Data Top-up without PCC Profile" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${data_topup_4}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;${data_topup_4}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;price&quot;: null,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;multipleSubscription&quot;: true,&#xd;
  &quot;availabilityStartDate&quot;: 1536085800000,&#xd;
  &quot;availabilityEndDate&quot;: 2546078335000,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;topupType&quot;: &quot;TOP_UP&quot;,&#xd;
  &quot;quotaType&quot;: &quot;VOLUME&quot;,&#xd;
  &quot;unitType&quot;: &quot;TOTAL&quot;,&#xd;
  &quot;volumeBalance&quot;: 500,&#xd;
  &quot;volumeBalanceUnit&quot;: &quot;MB&quot;,&#xd;
  &quot;timeBalance&quot;: 100,&#xd;
  &quot;timeBalanceUnit&quot;: &quot;SECOND&quot;,&#xd;
  &quot;topUpNotificationList&quot;: [],&#xd;
  &quot;applicablePCCProfiles&quot;:&quot;RTC_${id}_PCC_PROFILE2&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${data_topup_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307574681">&quot;id&quot;:&quot;${data_topup_4}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup without PCC Profile mode to TEST" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_4}/updateMode.json?pkgMode=DESIGN</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307574681">&quot;id&quot;:&quot;${data_topup_4}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup without PCC Profile mode to LIVE" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup_4}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1307574681">&quot;id&quot;:&quot;${data_topup_4}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Add Subscriber" enabled="true"/>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;ACTIVE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
                  &lt;value&gt;24124&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
                  &lt;value&gt;abcd&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
                  &lt;value&gt;0&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                 &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                 &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${base_product_offer_1}&lt;/value&gt;
               &lt;/entry&gt;
            &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alternate Id ${alternate_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${subscriber_id}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${alternate_id}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Add Subscriptions to Subscriber" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Spare Topup 1 to ${subscriber_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;subscriberId&quot;: &quot;${subscriber_id}&quot;,&#xd;
        &quot;alternateId&quot;: null,&#xd;
        &quot;updateAction&quot;: &quot;0&quot;,&#xd;
        &quot;topUpPackageName&quot;: &quot;${data_topup_1}&quot;,&#xd;
        &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
        &quot;priority&quot;: &quot;999&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeTopUp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                    <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Spare Topup 2 to ${subscriber_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;subscriberId&quot;: &quot;${subscriber_id}&quot;,&#xd;
        &quot;alternateId&quot;: null,&#xd;
        &quot;updateAction&quot;: &quot;0&quot;,&#xd;
        &quot;topUpPackageName&quot;: &quot;${data_topup_3}&quot;,&#xd;
        &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
        &quot;priority&quot;: &quot;999&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeTopUp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                    <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Data Topup 1 to ${subscriber_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;subscriberId&quot;: &quot;${subscriber_id}&quot;,&#xd;
        &quot;alternateId&quot;: null,&#xd;
        &quot;updateAction&quot;: &quot;0&quot;,&#xd;
        &quot;topUpPackageName&quot;: &quot;${data_topup_2}&quot;,&#xd;
        &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
        &quot;priority&quot;: &quot;999&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeTopUp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                    <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Data Topup 2 to ${subscriber_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
        &quot;subscriberId&quot;: &quot;${subscriber_id}&quot;,&#xd;
        &quot;alternateId&quot;: null,&#xd;
        &quot;updateAction&quot;: &quot;0&quot;,&#xd;
        &quot;topUpPackageName&quot;: &quot;${data_topup_4}&quot;,&#xd;
        &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
        &quot;priority&quot;: &quot;999&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeTopUp</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                    <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="false">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 500 MB Topup 2" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 500 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1000 MB Topup 1" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1000 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">524288000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">524288000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1500 MB Base Package" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1500 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">786432000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 2000 MB Spare Topup 1" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 2000 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1048576000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">1048576000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 2500 MB Spare Topup 2" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 2500 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1310720000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">1310720000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="RADIUS-Gy-RTC_1035" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1446104853000</longProp>
        <longProp name="ThreadGroup.end_time">1446104853000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Verify Topup when base package is reached at FUP Level and Topup is been subscribed with valid Applicable PCC Profile</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="RADIUS-RTC_${id}" enabled="true">
          <stringProp name="TestPlan.comments">Verify Topup when base package is reached at FUP Level and Topup is been subscribed with valid Applicable PCC Profile</stringProp>
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="subscriber_id" elementType="Argument">
                <stringProp name="Argument.name">subscriber_id</stringProp>
                <stringProp name="Argument.value">1111111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="alternate_id" elementType="Argument">
                <stringProp name="Argument.name">alternate_id</stringProp>
                <stringProp name="Argument.value">1311111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msisdn" elementType="Argument">
                <stringProp name="Argument.name">msisdn</stringProp>
                <stringProp name="Argument.value">1111111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="imsi" elementType="Argument">
                <stringProp name="Argument.name">imsi</stringProp>
                <stringProp name="Argument.value">1111111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="cui" elementType="Argument">
                <stringProp name="Argument.name">cui</stringProp>
                <stringProp name="Argument.value">1111111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="username" elementType="Argument">
                <stringProp name="Argument.name">username</stringProp>
                <stringProp name="Argument.value">1111111035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sessionid" elementType="Argument">
                <stringProp name="Argument.name">sessionid</stringProp>
                <stringProp name="Argument.value">1111111035_gy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="framedip" elementType="Argument">
                <stringProp name="Argument.name">framedip</stringProp>
                <stringProp name="Argument.value">10.121.21.53</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Gx+Gy-RTC_1035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="base_data_package_1" elementType="Argument">
                <stringProp name="Argument.name">base_data_package_1</stringProp>
                <stringProp name="Argument.value">RTC_1035_GY_BASE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="base_product_offer_1" elementType="Argument">
                <stringProp name="Argument.name">base_product_offer_1</stringProp>
                <stringProp name="Argument.value">RTC_1035_PRODUCT_OFFER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="data_topup" elementType="Argument">
                <stringProp name="Argument.name">data_topup</stringProp>
                <stringProp name="Argument.value">RTC_1035_DATA_TOP_UP</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="test_case_id" elementType="Argument">
                <stringProp name="Argument.name">test_case_id</stringProp>
                <stringProp name="Argument.value">92054</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="id" elementType="Argument">
                <stringProp name="Argument.name">id</stringProp>
                <stringProp name="Argument.value">1035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id}-Pre Processing" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="Start of RTC_${id}" enabled="true"/>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import org.apache.jmeter.services.FileServer;

// Get the variable(s) from the JMeter script
mapping_file_name= vars.get(&quot;mapping_file_name&quot;);
jMeterTCName= ctx.getThreadGroup().getName();
testRailTCID = vars.get(&quot;test_case_id&quot;);

// Open File(s)
//f = new FileOutputStream(FileServer.getFileServer().getBaseDir()+&quot;\\tmp.csv&quot;, true); 
f = new FileOutputStream(mapping_file_name, true); 
p = new PrintStream(f); 

// Write data to file 

p.println(jMeterTCName + &apos;,&apos; + testRailTCID);

// Close File(s)
p.close();f.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Pcap and Logs" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Pcap" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872118812">Capture PCAP</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="872996374">Capture log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Capture PD Log" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="764597751">Automation_plan_6622</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="1033451790">Capture PD log </stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="CleanUp Sampler" enabled="true">
              <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subscriber-id" elementType="Argument">
                    <stringProp name="Argument.name">subscriber-id</stringProp>
                    <stringProp name="Argument.value">${subscriber_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="product-offer-id" elementType="Argument">
                    <stringProp name="Argument.name">product-offer-id</stringProp>
                    <stringProp name="Argument.value">${base_product_offer_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="data-package-id" elementType="Argument">
                    <stringProp name="Argument.name">data-package-id</stringProp>
                    <stringProp name="Argument.value">${base_data_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="rnc-package-id" elementType="Argument">
                    <stringProp name="Argument.name">rnc-package-id</stringProp>
                    <stringProp name="Argument.value">${base_rnc_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="data-topup-id" elementType="Argument">
                    <stringProp name="Argument.name">data-topup-id</stringProp>
                    <stringProp name="Argument.value">${data_topup}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="bod-package-id" elementType="Argument">
                    <stringProp name="Argument.name">bod-package-id</stringProp>
                    <stringProp name="Argument.value">${bod_package_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="email-template-id" elementType="Argument">
                    <stringProp name="Argument.name">email-template-id</stringProp>
                    <stringProp name="Argument.value">${email_template_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="sms-template-id" elementType="Argument">
                    <stringProp name="Argument.name">sms-template-id</stringProp>
                    <stringProp name="Argument.value">${sms_template_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="classname">com.sterlite.netvertex.nvsampler.cleanup.sampler.CleanUpSampler</stringProp>
            </JavaSampler>
            <hashTree/>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Data Package" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;${base_data_package_1}&lt;/id&gt;&#xd;
            &lt;name&gt;${base_data_package_1}&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;currency&gt;${currency}&lt;/currency&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                    &lt;name&gt;RTC_${id}_PCC_PROFILE&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;2&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;2&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;2&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Mbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Mbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_RULE&lt;/name&gt;&#xd;
                                    &lt;precedence&gt;999&lt;/precedence&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_RULE&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;2&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;2&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;50&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;1&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Mbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;1&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Mbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;1&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_FUP1_RULE&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_FUP1_RULE&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Mbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Mbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;25&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl&gt;512&lt;/aambrdl&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul&gt;512&lt;/aambrul&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;2&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules&gt;&#xd;
                                &lt;pcc-rule&gt;&#xd;
                                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                    &lt;id&gt;&lt;/id&gt;&#xd;
                                    &lt;dataServiceType&gt;&#xd;
                                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                                    &lt;/dataServiceType&gt;&#xd;
                                    &lt;name&gt;RTC_${id}_PCC_FUP2_RULE&lt;/name&gt;&#xd;
                                    &lt;chargingMode&gt;0&lt;/chargingMode&gt;&#xd;
                                    &lt;monitoringKey&gt;RTC_${id}_PCC_FUP2_RULE&lt;/monitoringKey&gt;&#xd;
                                    &lt;flowStatus&gt;2&lt;/flowStatus&gt;&#xd;
                                    &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                                    &lt;qci&gt;6&lt;/qci&gt;&#xd;
                                    &lt;arp&gt;1&lt;/arp&gt;&#xd;
                                    &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                                    &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                                    &lt;mbrdl&gt;512&lt;/mbrdl&gt;&#xd;
                                    &lt;mbrdlUnit&gt;Kbps&lt;/mbrdlUnit&gt;&#xd;
                                    &lt;mbrul&gt;512&lt;/mbrul&gt;&#xd;
                                    &lt;mbrulUnit&gt;Kbps&lt;/mbrulUnit&gt;&#xd;
                                    &lt;type&gt;Dynamic&lt;/type&gt;&#xd;
                                    &lt;sliceTotal&gt;15&lt;/sliceTotal&gt;&#xd;
                                    &lt;sliceTotalUnit&gt;MB&lt;/sliceTotalUnit&gt;&#xd;
                                    &lt;sliceUploadUnit&gt;MB&lt;/sliceUploadUnit&gt;&#xd;
                                    &lt;sliceDownloadUnit&gt;MB&lt;/sliceDownloadUnit&gt;&#xd;
                                    &lt;sliceTimeUnit&gt;MINUTE&lt;/sliceTimeUnit&gt;&#xd;
                                    &lt;chargingKey&gt;RATING_GROUP_1&lt;/chargingKey&gt;&#xd;
                                    &lt;chargingKeyName&gt;Default_Rating_Group&lt;/chargingKeyName&gt;&#xd;
                                    &lt;service-data-flows&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit in&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                        &lt;service-data-flow&gt;&#xd;
                                            &lt;destinationIP&gt;any&lt;/destinationIP&gt;&#xd;
                                            &lt;flowAccess&gt;permit out&lt;/flowAccess&gt;&#xd;
                                            &lt;protocol&gt;ip&lt;/protocol&gt;&#xd;
                                            &lt;serviceDataFlowId&gt;&lt;/serviceDataFlowId&gt;&#xd;
                                            &lt;sourceIP&gt;any&lt;/sourceIP&gt;&#xd;
                                        &lt;/service-data-flow&gt;&#xd;
                                    &lt;/service-data-flows&gt;&#xd;
                                &lt;/pcc-rule&gt;&#xd;
                            &lt;/pcc-rules&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;false&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;RTC_${id}_QUOTA_PROFILE&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;quota-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by admin&lt;/description&gt;&#xd;
                &lt;name&gt;RTC_${id}_QUOTA_PROFILE&lt;/name&gt;&#xd;
                &lt;proration&gt;false&lt;/proration&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;500&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;TIME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;SECOND&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;250&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;1&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balance&gt;150&lt;/balance&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;2&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${pdcontextpath}/${rest_data_package_url}?${replace}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/xml</stringProp>
                    </elementProp>
                  </collectionProp>
                  <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Product Offer" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Offer" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;${base_product_offer_1}&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;${base_product_offer_1}&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 05/23/2018 10:12:03&quot;,&#xd;
   &quot;type&quot;:&quot;BASE&quot;,&#xd;
   &quot;currency&quot;:&quot;${currency}&quot;,&#xd;
   &quot;packageMode&quot;:&quot;DESIGN&quot;,&#xd;
   &quot;dataServicePkgId&quot;:&quot;${base_data_package_1}&quot;,&#xd;
   &quot;validityPeriod&quot;:null,&#xd;
   &quot;validityPeriodUnit&quot;:&quot;DAY&quot;,&#xd;
   &quot;subscriptionPrice&quot;:null,&#xd;
   &quot;balance&quot;:null,&#xd;
   &quot;availabilityStartDate&quot;:null,&#xd;
   &quot;availabilityEndDate&quot;:null,&#xd;
   &quot;param1&quot;:null,&#xd;
   &quot;param2&quot;:null&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/${product_offer_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1401564903">&quot;id&quot;:&quot;${base_product_offer_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}.json</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1401564903">&quot;id&quot;:&quot;${base_product_offer_1}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To TEST Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change ProductOffer To LIVE Mode" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${pd}/productoffer/product-offer/${base_product_offer_1}/updateMode.json?pkgMode=LIVE</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Top Up with PCC Profile" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Data Top-up with PCC Profile" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;${data_topup}&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;${data_topup}&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;,&#xd;
  &quot;packageMode&quot;: &quot;DESIGN&quot;,&#xd;
  &quot;price&quot;: null,&#xd;
  &quot;validityPeriod&quot;: 30,&#xd;
  &quot;validityPeriodUnit&quot;: &quot;DAY&quot;,&#xd;
  &quot;multipleSubscription&quot;: true,&#xd;
  &quot;availabilityStartDate&quot;: 1536085800000,&#xd;
  &quot;availabilityEndDate&quot;: 2546078335000,&#xd;
  &quot;param1&quot;: null,&#xd;
  &quot;param2&quot;: null,&#xd;
  &quot;topupType&quot;: &quot;TOP_UP&quot;,&#xd;
  &quot;quotaType&quot;: &quot;VOLUME&quot;,&#xd;
  &quot;unitType&quot;: &quot;TOTAL&quot;,&#xd;
  &quot;volumeBalance&quot;: 500,&#xd;
  &quot;volumeBalanceUnit&quot;: &quot;MB&quot;,&#xd;
  &quot;timeBalance&quot;: 100,&#xd;
  &quot;timeBalanceUnit&quot;: &quot;SECOND&quot;,&#xd;
  &quot;topUpNotificationList&quot;: [],&#xd;
  &quot;applicablePCCProfiles&quot;: &quot;RTC_${id}_PCC_PROFILE&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/${data_topup_url}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1741653276">&quot;id&quot;:&quot;${data_topup}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup with PCC Profile mode to TEST" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup}/updateMode.json?pkgMode=DESIGN</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1741653276">&quot;id&quot;:&quot;${data_topup}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Change Data Topup with PCC Profile mode to LIVE" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/pd/datatopup/data-topup/${data_topup}/updateMode.json?pkgMode=TEST</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1741653276">&quot;id&quot;:&quot;${data_topup}&quot;</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD : Reload Policy" enabled="true"/>
              <hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD : Policy -Reload" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="764597751">Automation_plan_6622</stringProp>
                    <stringProp name="18059174">Common Functions</stringProp>
                    <stringProp name="-803016769">PD: Reload Policy</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Add Subscriber" enabled="true"/>
            <hashTree>
              <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="Subscriber Provisioning Request" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SubscriberProvisioningService</stringProp>
                <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:sub=&quot;http://subscriberprovisioning.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;sub:wsAddSubscriberProfile&gt;
         &lt;!--Optional:--&gt;
        &lt;subscriberProfile&gt;
               &lt;entry&gt;
                  &lt;key&gt;SUBSCRIBER_IDENTITY&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;USERNAME&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PASSWORD&lt;/key&gt;
                  &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUSTOMER_TYPE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;STATUS&lt;/key&gt;
                  &lt;value&gt;ACTIVE&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMS_PACKAGE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EXPIRY_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;AREA&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CITY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM1&lt;/key&gt;
                  &lt;value&gt;24124&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM2&lt;/key&gt;
                  &lt;value&gt;abcd&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM3&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM4&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PARAM5&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ZONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COUNTRY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;BIRTH_DATE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ROLE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;COMPANY&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;DEPARTMENT&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;ARPU&lt;/key&gt;
                  &lt;value&gt;0&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CADRE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;EMAIL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PHONE&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;SIP_URL&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;CUI&lt;/key&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;IMSI&lt;/key&gt;
                 &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;MSISDN&lt;/key&gt;
                 &lt;value&gt;${username}&lt;/value&gt;
               &lt;/entry&gt;
               &lt;entry&gt;
                  &lt;key&gt;PRODUCT_OFFER&lt;/key&gt;
                 &lt;value&gt;${base_product_offer_1}&lt;/value&gt;
               &lt;/entry&gt;
            &lt;/subscriberProfile&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/sub:wsAddSubscriberProfile&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
                <stringProp name="SoapSampler.xml_data_file"></stringProp>
                <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
                <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              </SoapSampler>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Alternate Id ${alternate_id}" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;subscriberId&quot;:&quot;${subscriber_id}&quot;,&#xd;
&quot;alternateId&quot;:&quot;${alternate_id}&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
                <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${smcontextpath}/rest/restful/subscriberProvisioning/addAlternateId?</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1149187101">SUCCESS</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Authenticate the User" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Authenticate Request" enabled="true">
              <stringProp name="TestPlan.comments">step 1</stringProp>
              <stringProp name="RadiusSampler.message">Access-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.2">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Password</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${password}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="User is Authenticated" enabled="false">
                <stringProp name="RadiusAssertion.message">Access-Accept</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">1</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
                <stringProp name="RadiusAssertion.avpName.0">User-Name</stringProp>
                <stringProp name="RadiusAssertion.avpData.0">${username}</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Initaite Accounting and Verify Session " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Start" enabled="true">
              <stringProp name="TestPlan.comments">step 2</stringProp>
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">1</stringProp>
              <stringProp name="RadiusSampler.avpName.3">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">NAS-Port</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${nasport}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">6</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Started" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Listen COA request" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">true</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">false</boolProp>
              <stringProp name="RadiusSampler.message">Access-Accept</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Service-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">1</stringProp>
              <stringProp name="RadiusSampler.avpName.1">Login-Service</stringProp>
              <stringProp name="RadiusSampler.avpData.1">1</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Login-IP-Host</stringProp>
              <stringProp name="RadiusSampler.avpData.2">192.168.96.150</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Reply-Message</stringProp>
              <stringProp name="RadiusSampler.avpData.3">access granted</stringProp>
              <stringProp name="RadiusSampler.avpCounter">4</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="COA Recieved" enabled="true">
                <stringProp name="RadiusAssertion.message">CoA-Request</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler guiclass="com.computaris.jmeter_plugins.radius_server.sampler.gui.RadiusServerSamplerGui" testclass="com.computaris.jmeter_plugins.radius_server.sampler.RadiusServerSampler" testname="${id} Answer CoA" enabled="false">
              <boolProp name="RadiusServerSampler.LISTENING_SERVER_BUTTON_STATUS">false</boolProp>
              <boolProp name="RadiusServerSampler.SENDING_SERVER_BUTTON_STATUS">true</boolProp>
              <stringProp name="RadiusSampler.message">CoA-ACK</stringProp>
              <stringProp name="RadiusSampler.avpCounter">0</stringProp>
            </com.computaris.jmeter__plugins.radius__server.sampler.RadiusServerSampler>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <SoapSampler guiclass="SoapSamplerGui" testclass="SoapSampler" testname="${id} Verify Session using Web Service" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SoapSampler.URL_DATA">http://${serverip}:${smserverport}/${pdcontextpath}/services/SessionManagementService</stringProp>
              <stringProp name="HTTPSamper.xml_data">&lt;soap:Envelope xmlns:soap=&quot;http://www.w3.org/2003/05/soap-envelope&quot; xmlns:ses=&quot;http://sessionmanagement.ws.nvsmx.elitecore.com/&quot;&gt;
   &lt;soap:Header/&gt;
   &lt;soap:Body&gt;
      &lt;ses:wsGetSessionsByIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionIP&gt;${framedip}&lt;/sessionIP&gt;
         &lt;!--Optional:--&gt;
         &lt;sessionType&gt;&lt;/sessionType&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter1&gt;&lt;/parameter1&gt;
         &lt;!--Optional:--&gt;
         &lt;parameter2&gt;&lt;/parameter2&gt;
      &lt;/ses:wsGetSessionsByIP&gt;
   &lt;/soap:Body&gt;
&lt;/soap:Envelope&gt;</stringProp>
              <stringProp name="SoapSampler.xml_data_file"></stringProp>
              <stringProp name="SoapSampler.SOAP_ACTION"></stringProp>
              <stringProp name="SoapSampler.SEND_SOAP_ACTION">true</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            </SoapSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session availability" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1495407398">&lt;responseMessage&gt;SUCCESS&lt;/responseMessage&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${id} Verify Session in DB" enabled="true">
              <stringProp name="dataSource">${jdbcvar}</stringProp>
              <stringProp name="query">select CORE_SESSION_ID from TBLT_SESSION where SUBSCRIBER_IDENTITY = &apos;${username}&apos;
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session available in DB" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1711692424">CORE_SESSION_ID
${sessionid}:RADIUS:${nasidentifier}
</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 500 MB HSQ of Base Package" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 500 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">262144000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">262144000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 750 MB FUP1 of Base Package" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 750 MB FUP1 of Base Package" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">393216000</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">393216000</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Add Subscriptions to Subscriber" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subscriber Topup to ${subscriber_id}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;subscriberId&quot;: &quot;${subscriber_id}&quot;,&#xd;
        &quot;alternateId&quot;: null,&#xd;
        &quot;updateAction&quot;: &quot;1&quot;,&#xd;
        &quot;topUpPackageName&quot;: &quot;${data_topup}&quot;,&#xd;
        &quot;subscriptionStatusValue&quot;: &quot;2&quot;,&#xd;
        &quot;priority&quot;: &quot;999&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/subscription/subscribeTopUp</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Success Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1641253226">&quot;responseCode&quot;:200</stringProp>
                  <stringProp name="-282579259">&quot;responseMessage&quot;:&quot;SUCCESS&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 900 MB FUP2 of Base Package" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 900 MB FUP2 of Base Package" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">471859200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Reporting and Verification 1400 MB Topup 1" enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Update with 1400 MB HSQ" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.0">3</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Input-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.2">734003200</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Output-Octets</stringProp>
              <stringProp name="RadiusSampler.avpData.3">734003200</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.5">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.5">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.6">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.6">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">7</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Interim Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Accounting and Verify Session are Terminated " enabled="true"/>
          <hashTree>
            <com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler guiclass="com.computaris.jmeter_plugins.radius_client.sampler.gui.RadiusClientSamplerGui" testclass="com.computaris.jmeter_plugins.radius_client.sampler.RadiusClientSampler" testname="${id} Accounting Stop" enabled="true">
              <stringProp name="RadiusSampler.message">Accounting-Request</stringProp>
              <stringProp name="radiusSampler.auth_type">Passphrase Authentication Protocol (PAP)</stringProp>
              <stringProp name="RadiusSampler.avpName.0">User-Name</stringProp>
              <stringProp name="RadiusSampler.avpData.0">${username}</stringProp>
              <stringProp name="RadiusSampler.avpName.1">NAS-Identifier</stringProp>
              <stringProp name="RadiusSampler.avpData.1">${nasidentifier}</stringProp>
              <stringProp name="RadiusSampler.avpName.2">Acct-Status-Type</stringProp>
              <stringProp name="RadiusSampler.avpData.2">2</stringProp>
              <stringProp name="RadiusSampler.avpName.3">Acct-Session-Id</stringProp>
              <stringProp name="RadiusSampler.avpData.3">${sessionid}</stringProp>
              <stringProp name="RadiusSampler.avpName.4">Framed-IP-Address</stringProp>
              <stringProp name="RadiusSampler.avpData.4">${framedip}</stringProp>
              <stringProp name="RadiusSampler.avpCounter">5</stringProp>
            </com.computaris.jmeter__plugins.radius__client.sampler.RadiusClientSampler>
            <hashTree>
              <com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion guiclass="com.computaris.jmeter_plugins.radius_client.assertion.gui.RadiusAssertionGui" testclass="com.computaris.jmeter_plugins.radius_client.assertion.RadiusAssertion" testname="Accounting Stop Success" enabled="true">
                <stringProp name="RadiusAssertion.message">Accounting-Response</stringProp>
                <stringProp name="RadiusAssertion.avpCounter">0</stringProp>
                <stringProp name="RadiusAssertion.ASSERT_ON_RESPONSE">true</stringProp>
              </com.computaris.jmeter__plugins.radius__client.assertion.RadiusAssertion>
              <hashTree/>
            </hashTree>
            <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="${id} Wait for a Second" enabled="true">
              <stringProp name="SimpleTimer.TIMEOUT">1000</stringProp>
            </com.computaris.jmeter.ext.timer.SimpleTimer>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RTC_${id} Post Processing" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="stop Pcap" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-720136512">Stop Pcap</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop NV log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-632654166">Stop NV log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD log" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="-1829425330">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-592019242">Stop PD log</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
          <com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler guiclass="com.computaris.jmeter.ext.sampler.dummy.preferred.gui.TtsDummySamplerGui" testclass="com.computaris.jmeter.ext.sampler.dummy.preferred.TtsDummySampler" testname="End of RTC_${id}" enabled="true"/>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="End Sampler Simple Controller" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="764597751">Automation_plan_6622</stringProp>
                <stringProp name="18059174">Common Functions</stringProp>
                <stringProp name="-2119522963">End Sampler Simple Controller</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="com.computaris.jmeter_plugins.radius_client.visualizers.RadiusTreeListener" testclass="ResultCollector" testname="TTS Radius Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="com.computaris.jmeter_plugins.radius_client.visualizers.RadiusTreeMessageListener" testclass="ResultCollector" testname="TTS Radius Message Listener" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Functions" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1454995107000</longProp>
        <longProp name="ThreadGroup.end_time">1454995107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PCAP" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Pcap" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of Tcpdump Command " enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PcapPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Pcap" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop PCAP On Server" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PcapPID</stringProp>
              <stringProp name="DiameterLoadvalue">PcapPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start NV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">LogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PD log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start PD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${pdhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-policy-designer.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PDPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop NV log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopNV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">LogPID</stringProp>
              <stringProp name="DiameterLoadvalue">LogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop PD log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopPD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${PDPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PDPID</stringProp>
              <stringProp name="DiameterLoadvalue">PDPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Tomcat log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>/bin/mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${tomcat_home}/logs/catalina.out&gt;${logpath}/${pcapdir}/${tomcatlogs}.log &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Tomcat log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${TomcatLogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterLoadvalue">TomcatLogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart (shut immediate)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070394255">Usage statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-737073625">SPR cache statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear cache spr-cache -all REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=cache spr-cache -all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1923322074">spr cache flushed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Tomcat Restart " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Tomcat Restart " enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ; sleep 3</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; rm -rf ../work/*&quot; </__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh startup.sh&quot; ; sleep 15</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = false/spr.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="serverinitiated.destination-host = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set serverinitiated.destination-host = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="set -Drevalidationtime.delta=0" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="-Drevalidationtime.delta=0" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/bin/netvertex.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000 -Drevalidationtime.delta=0 -Drevalidationtime.delta=0/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="end sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PD: Reload Policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/policy/reload/policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="-1829425330">Automation_plan_6622</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RConf" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI RConf REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">20000</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/rconf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1770785172">Server Configuration Successfully Reloaded for NetVertex</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify PCRF Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify PCRF Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2024504540">PCRF.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify OfflineRnC Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify OfflineRnC Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-399345633">OfflineRnC.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Diameter Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Diameter Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="533546614">DIAMETER.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Radius Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Radius Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1062068207">RADIUS.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
