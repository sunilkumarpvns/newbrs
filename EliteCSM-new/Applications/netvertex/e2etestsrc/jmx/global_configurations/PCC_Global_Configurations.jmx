<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Global_Configurations" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Global Variable Definition" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="originhost" elementType="Argument">
            <stringProp name="Argument.name">originhost</stringProp>
            <stringProp name="Argument.value">gx.elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Origin Host of Gx Gateway</stringProp>
          </elementProp>
          <elementProp name="originrealm" elementType="Argument">
            <stringProp name="Argument.name">originrealm</stringProp>
            <stringProp name="Argument.value">elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Origin Realm of Gx Gateway</stringProp>
          </elementProp>
          <elementProp name="destinationhost" elementType="Argument">
            <stringProp name="Argument.name">destinationhost</stringProp>
            <stringProp name="Argument.value">netvertex.elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="destinationrealm" elementType="Argument">
            <stringProp name="Argument.name">destinationrealm</stringProp>
            <stringProp name="Argument.value">elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverip" elementType="Argument">
            <stringProp name="Argument.name">serverip</stringProp>
            <stringProp name="Argument.value">192.168.11.199</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="smserverport" elementType="Argument">
            <stringProp name="Argument.name">smserverport</stringProp>
            <stringProp name="Argument.value">7001</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Tomcat Startup port on which SM and PD will be displayed</stringProp>
          </elementProp>
          <elementProp name="smshutdownport" elementType="Argument">
            <stringProp name="Argument.name">smshutdownport</stringProp>
            <stringProp name="Argument.value">5782</stringProp>
            <stringProp name="Argument.desc">**Tomcat Shutdown port</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="diameterport" elementType="Argument">
            <stringProp name="Argument.name">diameterport</stringProp>
            <stringProp name="Argument.value">3868</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**change it after manual configuration</stringProp>
          </elementProp>
          <elementProp name="smcontextpath" elementType="Argument">
            <stringProp name="Argument.name">smcontextpath</stringProp>
            <stringProp name="Argument.value">netvertexsm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**sm+username</stringProp>
          </elementProp>
          <elementProp name="smapplicationname" elementType="Argument">
            <stringProp name="Argument.name">smapplicationname</stringProp>
            <stringProp name="Argument.value">sm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pdcontextpath" elementType="Argument">
            <stringProp name="Argument.name">pdcontextpath</stringProp>
            <stringProp name="Argument.value">netvertexsm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**pd+username</stringProp>
          </elementProp>
          <elementProp name="nvuser" elementType="Argument">
            <stringProp name="Argument.name">nvuser</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">** os username</stringProp>
          </elementProp>
          <elementProp name="nvhome" elementType="Argument">
            <stringProp name="Argument.name">nvhome</stringProp>
            <stringProp name="Argument.value">/home/trunk/server</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Dont&apos; provide too long Name</stringProp>
          </elementProp>
          <elementProp name="pdhome" elementType="Argument">
            <stringProp name="Argument.name">pdhome</stringProp>
            <stringProp name="Argument.value">/home/trunk/netvertexsm/sm</stringProp>
            <stringProp name="Argument.desc">for PD logs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="73_origin_host_primary" elementType="Argument">
            <stringProp name="Argument.name">73_origin_host_primary</stringProp>
            <stringProp name="Argument.value">23_gx.elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="73_origin_host_secondary" elementType="Argument">
            <stringProp name="Argument.name">73_origin_host_secondary</stringProp>
            <stringProp name="Argument.value">73_secondary.elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="73_origin_realm" elementType="Argument">
            <stringProp name="Argument.name">73_origin_realm</stringProp>
            <stringProp name="Argument.value">elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="origin_host_rx" elementType="Argument">
            <stringProp name="Argument.name">origin_host_rx</stringProp>
            <stringProp name="Argument.value">af.elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="origin_realm_rx" elementType="Argument">
            <stringProp name="Argument.name">origin_realm_rx</stringProp>
            <stringProp name="Argument.value">elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="origin_host" elementType="Argument">
            <stringProp name="Argument.name">origin_host</stringProp>
            <stringProp name="Argument.value">gx.elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="origin_realm" elementType="Argument">
            <stringProp name="Argument.name">origin_realm</stringProp>
            <stringProp name="Argument.value">elite.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="destination_realm" elementType="Argument">
            <stringProp name="Argument.name">destination_realm</stringProp>
            <stringProp name="Argument.value">elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="destination_host" elementType="Argument">
            <stringProp name="Argument.name">destination_host</stringProp>
            <stringProp name="Argument.value">netvertex.elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbserverip" elementType="Argument">
            <stringProp name="Argument.name">dbserverip</stringProp>
            <stringProp name="Argument.value">192.168.11.199</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*</stringProp>
          </elementProp>
          <elementProp name="dbserversid" elementType="Argument">
            <stringProp name="Argument.name">dbserversid</stringProp>
            <stringProp name="Argument.value">orcl12c</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*Output of &apos;echo $ORACLE_SERVICE&apos;</stringProp>
          </elementProp>
          <elementProp name="dbserverport" elementType="Argument">
            <stringProp name="Argument.name">dbserverport</stringProp>
            <stringProp name="Argument.value">1521</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*</stringProp>
          </elementProp>
          <elementProp name="dbusername" elementType="Argument">
            <stringProp name="Argument.name">dbusername</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Provide DB Username with Prefix NETVERTEX</stringProp>
          </elementProp>
          <elementProp name="dbpassword" elementType="Argument">
            <stringProp name="Argument.name">dbpassword</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Provide DB Password with Prefix NETVERTEX</stringProp>
          </elementProp>
          <elementProp name="serverinstancename" elementType="Argument">
            <stringProp name="Argument.name">serverinstancename</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Dont&apos; provide too long Name</stringProp>
          </elementProp>
          <elementProp name="logpath" elementType="Argument">
            <stringProp name="Argument.name">logpath</stringProp>
            <stringProp name="Argument.value">trunk_build</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**Dont&apos; provide too long Name</stringProp>
          </elementProp>
          <elementProp name="rootpassword" elementType="Argument">
            <stringProp name="Argument.name">rootpassword</stringProp>
            <stringProp name="Argument.value">root#10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*</stringProp>
          </elementProp>
          <elementProp name="dbserverip_for_sp_interface" elementType="Argument">
            <stringProp name="Argument.name">dbserverip_for_sp_interface</stringProp>
            <stringProp name="Argument.value">192.168.11.199</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Do not change</stringProp>
          </elementProp>
          <elementProp name="sp_dbusername" elementType="Argument">
            <stringProp name="Argument.name">sp_dbusername</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.desc">**DB Username for SP Interface</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sp_dbpassword" elementType="Argument">
            <stringProp name="Argument.name">sp_dbpassword</stringProp>
            <stringProp name="Argument.value">trunk</stringProp>
            <stringProp name="Argument.desc">**DB Password for SP Interface</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcat_home" elementType="Argument">
            <stringProp name="Argument.name">tomcat_home</stringProp>
            <stringProp name="Argument.value">/home/trunk/netvertexsm</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**</stringProp>
          </elementProp>
          <elementProp name="sy_root_pwd" elementType="Argument">
            <stringProp name="Argument.name">sy_root_pwd</stringProp>
            <stringProp name="Argument.value">root#10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*</stringProp>
          </elementProp>
          <elementProp name="sy_serverip" elementType="Argument">
            <stringProp name="Argument.name">sy_serverip</stringProp>
            <stringProp name="Argument.value">192.168.11.199</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="syport" elementType="Argument">
            <stringProp name="Argument.name">syport</stringProp>
            <stringProp name="Argument.value">3782</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**</stringProp>
          </elementProp>
          <elementProp name="buildsourcefolder" elementType="Argument">
            <stringProp name="Argument.name">buildsourcefolder</stringProp>
            <stringProp name="Argument.value">/eliteaaa/share/netvertexbuilds/QA-Builds/6.8.2/6.8.2.2</stringProp>
            <stringProp name="Argument.desc">**Specifies path From where to take all binaries</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="oracleuserpath" elementType="Argument">
            <stringProp name="Argument.name">oracleuserpath</stringProp>
            <stringProp name="Argument.value">/home/oracle</stringProp>
            <stringProp name="Argument.desc">Oracle User&apos;s Home Directory</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="oraclehome" elementType="Argument">
            <stringProp name="Argument.name">oraclehome</stringProp>
            <stringProp name="Argument.value">/u01/app/oracle/product/12c/db_1</stringProp>
            <stringProp name="Argument.desc">*Output of &apos;echo $ORACLE_HOME&apos;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="elapsed_time" elementType="Argument">
            <stringProp name="Argument.name">elapsed_time</stringProp>
            <stringProp name="Argument.value">120</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Elapsed Time is in Minutes</stringProp>
          </elementProp>
          <elementProp name="checked_version" elementType="Argument">
            <stringProp name="Argument.name">checked_version</stringProp>
            <stringProp name="Argument.value">12</stringProp>
            <stringProp name="Argument.desc">6.8.2.1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="checked_revision" elementType="Argument">
            <stringProp name="Argument.name">checked_revision</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**24284 was release version of 6.8.2.1</stringProp>
          </elementProp>
          <elementProp name="test_run_id" elementType="Argument">
            <stringProp name="Argument.name">test_run_id</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.desc">Test Run ID in Test Rail (e.g. R196)</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rest_data_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_data_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/pkgs</stringProp>
            <stringProp name="Argument.desc">REST URL to create Data Pacakge</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rest_addon_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_addon_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/pkgs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">REST URL to create Addon Pacakge</stringProp>
          </elementProp>
          <elementProp name="rest_ims_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_ims_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/imsPkgs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">REST URL to create IMS Pacakge</stringProp>
          </elementProp>
          <elementProp name="rest_emergency_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_emergency_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/emergencyPkgs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">REST URL to create Emergency Pacakge</stringProp>
          </elementProp>
          <elementProp name="rest_topup_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_topup_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/pkgs</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">REST URL to create Topup Pacakge</stringProp>
          </elementProp>
          <elementProp name="rest_global_pcc_url" elementType="Argument">
            <stringProp name="Argument.name">rest_global_pcc_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/globalPCCRules</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">REST URL to create Global PCC Rule</stringProp>
          </elementProp>
          <elementProp name="rest_promotional_package_url" elementType="Argument">
            <stringProp name="Argument.name">rest_promotional_package_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/promotionalPkgs</stringProp>
            <stringProp name="Argument.desc">*REST URL to create Promotional Package</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rest_charging_rule_base_name_url" elementType="Argument">
            <stringProp name="Argument.name">rest_charging_rule_base_name_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/chargingRuleBaseNames</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*REST URL to create CRBN</stringProp>
          </elementProp>
          <elementProp name="rest_service_type_url" elementType="Argument">
            <stringProp name="Argument.name">rest_service_type_url</stringProp>
            <stringProp name="Argument.value">rest/restful/import/import/dataServiceTypes</stringProp>
            <stringProp name="Argument.desc">*REST_URL to create Service Type</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="replace" elementType="Argument">
            <stringProp name="Argument.name">replace</stringProp>
            <stringProp name="Argument.value">action=REPLACE</stringProp>
            <stringProp name="Argument.desc">Import Action with Replace</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fail" elementType="Argument">
            <stringProp name="Argument.name">fail</stringProp>
            <stringProp name="Argument.value">action=FAIL</stringProp>
            <stringProp name="Argument.desc">Import Action with Fail</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="script_location" elementType="Argument">
            <stringProp name="Argument.name">script_location</stringProp>
            <stringProp name="Argument.value">/opt/scripts/6.8</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">*Location on server where script is kept</stringProp>
          </elementProp>
          <elementProp name="adminport" elementType="Argument">
            <stringProp name="Argument.name">adminport</stringProp>
            <stringProp name="Argument.value">3782</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**admin port to be configured in netvertex.sh file</stringProp>
          </elementProp>
          <elementProp name="jdbcvar" elementType="Argument">
            <stringProp name="Argument.name">jdbcvar</stringProp>
            <stringProp name="Argument.value">DB</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Jdbc connection variable bound to pool</stringProp>
          </elementProp>
          <elementProp name="sy_origin_host" elementType="Argument">
            <stringProp name="Argument.name">sy_origin_host</stringProp>
            <stringProp name="Argument.value">pocs.elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">configured in ocs_gateway</stringProp>
          </elementProp>
          <elementProp name="sy_origin_realm" elementType="Argument">
            <stringProp name="Argument.name">sy_origin_realm</stringProp>
            <stringProp name="Argument.value">elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">configured in ocs_gateway</stringProp>
          </elementProp>
          <elementProp name="jmeterip" elementType="Argument">
            <stringProp name="Argument.name">jmeterip</stringProp>
            <stringProp name="Argument.value">192.168.11.199</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">ip of server where jmeter is running</stringProp>
          </elementProp>
          <elementProp name="radiusport" elementType="Argument">
            <stringProp name="Argument.name">radiusport</stringProp>
            <stringProp name="Argument.value">2821</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">**radius listener port</stringProp>
          </elementProp>
          <elementProp name="jmeterport" elementType="Argument">
            <stringProp name="Argument.name">jmeterport</stringProp>
            <stringProp name="Argument.value">3636</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Any free port can be used by jmeter</stringProp>
          </elementProp>
          <elementProp name="radiusshared" elementType="Argument">
            <stringProp name="Argument.name">radiusshared</stringProp>
            <stringProp name="Argument.value">secret</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">shared secret</stringProp>
          </elementProp>
          <elementProp name="nasip" elementType="Argument">
            <stringProp name="Argument.name">nasip</stringProp>
            <stringProp name="Argument.value">127.0.0.1 </stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">NAS-IP-ADDRESS (4)</stringProp>
          </elementProp>
          <elementProp name="nasport" elementType="Argument">
            <stringProp name="Argument.name">nasport</stringProp>
            <stringProp name="Argument.value">3589</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">NAS-PORT (5)</stringProp>
          </elementProp>
          <elementProp name="server_group_url" elementType="Argument">
            <stringProp name="Argument.name">server_group_url</stringProp>
            <stringProp name="Argument.value">servergroup/server-group.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="server_instance_url" elementType="Argument">
            <stringProp name="Argument.name">server_instance_url</stringProp>
            <stringProp name="Argument.value">serverinstance/server-instance.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="session_url" elementType="Argument">
            <stringProp name="Argument.name">session_url</stringProp>
            <stringProp name="Argument.value">sessionconfiguration/session-configuration/SESSION_CONFIG_1.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="diameter_gw_profile_url" elementType="Argument">
            <stringProp name="Argument.name">diameter_gw_profile_url</stringProp>
            <stringProp name="Argument.value">gatewayprofile/diameter-gateway-profile.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="diameter_gw_url" elementType="Argument">
            <stringProp name="Argument.name">diameter_gw_url</stringProp>
            <stringProp name="Argument.value">gateway/diameter-gateway.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="default_db_datasource_url" elementType="Argument">
            <stringProp name="Argument.name">default_db_datasource_url</stringProp>
            <stringProp name="Argument.value">database/database.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spr_url" elementType="Argument">
            <stringProp name="Argument.name">spr_url</stringProp>
            <stringProp name="Argument.value">spr/spr.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sp_interface_url" elementType="Argument">
            <stringProp name="Argument.name">sp_interface_url</stringProp>
            <stringProp name="Argument.value">spinterface/db-sp-interface.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ddf_url" elementType="Argument">
            <stringProp name="Argument.name">ddf_url</stringProp>
            <stringProp name="Argument.value">ddf/ddf/DDF_TABLE_1.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="db_cdr_url" elementType="Argument">
            <stringProp name="Argument.name">db_cdr_url</stringProp>
            <stringProp name="Argument.value">driver/db-cdr-driver.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="csv_cdr_url" elementType="Argument">
            <stringProp name="Argument.name">csv_cdr_url</stringProp>
            <stringProp name="Argument.value">driver/csv-driver.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="device_url" elementType="Argument">
            <stringProp name="Argument.name">device_url</stringProp>
            <stringProp name="Argument.value">device/device.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="network_url" elementType="Argument">
            <stringProp name="Argument.name">network_url</stringProp>
            <stringProp name="Argument.value">network/network.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="region_url" elementType="Argument">
            <stringProp name="Argument.name">region_url</stringProp>
            <stringProp name="Argument.value">region/region.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="city_url" elementType="Argument">
            <stringProp name="Argument.name">city_url</stringProp>
            <stringProp name="Argument.value">city/city.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="area_url" elementType="Argument">
            <stringProp name="Argument.name">area_url</stringProp>
            <stringProp name="Argument.value">area/area.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="pcc_service_policy" elementType="Argument">
            <stringProp name="Argument.name">pcc_service_policy</stringProp>
            <stringProp name="Argument.value">pccservicepolicy/pcc-service-policy.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="radius_gw_profile_url" elementType="Argument">
            <stringProp name="Argument.name">radius_gw_profile_url</stringProp>
            <stringProp name="Argument.value">gatewayprofile/radius-gateway-profile.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="radius_gw_url" elementType="Argument">
            <stringProp name="Argument.name">radius_gw_url</stringProp>
            <stringProp name="Argument.value">gateway/radius-gateway.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="packet_mapping_url" elementType="Argument">
            <stringProp name="Argument.name">packet_mapping_url</stringProp>
            <stringProp name="Argument.value">packetmapping/radius-packet-mapping.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="nasidentifier" elementType="Argument">
            <stringProp name="Argument.name">nasidentifier</stringProp>
            <stringProp name="Argument.value">netvertexfull.elitecore.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mapping_file_name" elementType="Argument">
            <stringProp name="Argument.name">mapping_file_name</stringProp>
            <stringProp name="Argument.value">PCC_Global_Configuration_Mapping.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prefix" elementType="Argument">
            <stringProp name="Argument.name">prefix</stringProp>
            <stringProp name="Argument.value">prefix/prefix.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lrn" elementType="Argument">
            <stringProp name="Argument.name">lrn</stringProp>
            <stringProp name="Argument.value">lrn/lrn.json</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="diameter_packet_mapping_url" elementType="Argument">
            <stringProp name="Argument.name">diameter_packet_mapping_url</stringProp>
            <stringProp name="Argument.value">packetmapping/diameter-packet-mapping</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">User Defined Variables</stringProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Mapping Variable" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="mapping_file_name" elementType="Argument">
            <stringProp name="Argument.name">mapping_file_name</stringProp>
            <stringProp name="Argument.value">PCC_Global_Configuration_Mapping.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Load Global Variable" enabled="true">
        <collectionProp name="Arguments.arguments"/>
        <stringProp name="filename">global.variables</stringProp>
        <stringProp name="variablesPrefix"></stringProp>
        <stringProp name="delimiter">::</stringProp>
        <intProp name="skipLines">0</intProp>
        <boolProp name="storeSysProp">false</boolProp>
      </kg.apc.jmeter.config.VariablesFromCSV>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="REST Default Parameters" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
        <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
      </ConfigTestElement>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Basic YWRtaW46YWRtaW4=</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="com.computaris.jmeter.protocol.diameter.config.gui.DiameterConfigGui" testclass="ConfigTestElement" testname="Diameter Stack" enabled="true">
        <stringProp name="GxPCEFDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="GxPCEFDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="GxPCEFDiameterClient.timeout.0">10000</stringProp>
        <stringProp name="GxPCEFDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFCERGxPCEFCERDiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.0">Supported-Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.0">10415</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.1">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.1">11</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.2">Origin-Host</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.2">${originhost}</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.3">Origin-Realm</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.3">${originrealm}</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.4">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.4">10.106.1.88</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.9">Product-Name</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.9">Jmeter</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.11">Auth-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.11">16777238</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.12">Acct-Application-Id</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.12">0</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="GxPCEFCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFDPRGxPCEFDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.0">${origin_host}</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.1">${originrealm}</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="GxPCEFDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.flagP">false</stringProp>
        <stringProp name="GxPCEFDWAGxPCEFDWADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.1">gx.elite.com</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.2">elite.com</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.3">10.106.1.142</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.4">10415</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpData.5">Jmeter</stringProp>
        <stringProp name="GxPCEFDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRAAGxPCEFRAADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.appID">16777238</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.HBHID">${__diamGetHopId(var)}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.ETEID">${__diamGetEndId(var)}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.0">${origin_host}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.1">${origin_realm}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.2">10.106.1.142</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.4">Jmeter</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.5">Result-Code</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.5">2001</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpName.6">Session-Id</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpData.6">${sessionid}</stringProp>
        <stringProp name="GxPCEFRAADiameterClient.avpCounter">7</stringProp>
        <stringProp name="GxPCEFASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="GxPCEFASADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFASAGxPCEFASADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFASADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFASADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFCLAGxPCEFCLADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFIDAGxPCEFIDADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFDSAGxPCEFDSADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRSAGxPCEFRSADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFRTAGxPCEFRTADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFPPAGxPCEFPPADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFSLAGxPCEFSLADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFSLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.flagP">true</stringProp>
        <stringProp name="GxPCEFSTAGxPCEFSTADiameterClient.flagE">false</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.flagT">false</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.appID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.0"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.1"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.2"></stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="GxPCEFSTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="GxPCEFDiameterClient.overrideStack">true</boolProp>
        <boolProp name="GxPCEFDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="GxPCEFDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="73_PCEF_primaryDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="73_PCEF_primaryDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryCER73_PCEF_primaryCERDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.0">Supported-Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.0">10415</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.1">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.3">10.106.1.88</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.4">11</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.9">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.9">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.11">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.11">16777238</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.12">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.12">0</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="73_PCEF_primaryCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryDPR73_PCEF_primaryDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="73_PCEF_primaryDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_primaryDWA73_PCEF_primaryDWADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.1">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.3">127.0.0.1</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRAA73_PCEF_primaryRAADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryASA73_PCEF_primaryASADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.0">${73_origin_host_primary}</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryCLA73_PCEF_primaryCLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryIDA73_PCEF_primaryIDADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryDSA73_PCEF_primaryDSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRSA73_PCEF_primaryRSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryRTA73_PCEF_primaryRTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primaryPPA73_PCEF_primaryPPADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primaryPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primarySLA73_PCEF_primarySLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primarySLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_primarySTA73_PCEF_primarySTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_primarySTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="73_PCEF_primaryDiameterClient.overrideStack">true</boolProp>
        <boolProp name="73_PCEF_primaryDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="73_PCEF_primaryDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="73_PCEF_secondaryDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryCER73_PCEF_secondaryCERDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.appID">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.3">Supported-Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.3">10415</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.4">11</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.5">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.5">3</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.6">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.6">0</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.7">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.7">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.8">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.8">10415</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.9">Origin-State-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.9">1094807040</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.10">Auth-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.10">16777238</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.11">Acct-Application-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.11">0</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.12">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.12">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="73_PCEF_secondaryCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPR73_PCEF_secondaryDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="73_PCEF_secondaryDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.flagP">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWA73_PCEF_secondaryDWADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.1">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.2">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.3">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRAA73_PCEF_secondaryRAADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryASA73_PCEF_secondaryASADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.0">${73_origin_host_secondary}</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.1">${73_origin_realm}</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryASADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryCLA73_PCEF_secondaryCLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryIDA73_PCEF_secondaryIDADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryDSA73_PCEF_secondaryDSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRSA73_PCEF_secondaryRSADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryRTA73_PCEF_secondaryRTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondaryPPA73_PCEF_secondaryPPADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondaryPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondarySLA73_PCEF_secondarySLADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.flagP">true</stringProp>
        <stringProp name="73_PCEF_secondarySTA73_PCEF_secondarySTADiameterClient.flagE">false</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.flagT">false</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.appID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.0"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.1"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.2"></stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="73_PCEF_secondarySTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.overrideStack">true</boolProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="73_PCEF_secondaryDiameterClient.enablePeerStateMachine">true</boolProp>
        <stringProp name="RxPCEFDiameterClient.server.0">${serverip}</stringProp>
        <stringProp name="RxPCEFDiameterClient.port.0">${diameterport}</stringProp>
        <stringProp name="RxPCEFDiameterClient.timeout.0">3000</stringProp>
        <stringProp name="RxPCEFDiameterClient.protocol.0">TCP</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.message">Capabilities-Exchange-Request</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFCERRxPCEFCERDiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.appID">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.0">Auth-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.0">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.1">Acct-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.1">0</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.2">Vendor-Specific-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.2">3</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.3">Acct-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.4">Auth-Application-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.4">16777236</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.5">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.5">10415</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.6">Supported-Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.6">10415</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.7">Origin-Host</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.7">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.8">Origin-Realm</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.8">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.9">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.9">10.106.1.172</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.10">Origin-State-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.10">1094807040</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.11">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.11">11</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.12">Product-Name</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.12">Applicaion Function</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpName.13">Firmware-Revision</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpData.13">267</stringProp>
        <stringProp name="RxPCEFCERDiameterClient.avpCounter">14</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.message">Disconnect-Peer-Request</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFDPRRxPCEFDPRDiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpName.2">Disconnect-Cause</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpData.2">2</stringProp>
        <stringProp name="RxPCEFDPRDiameterClient.avpCounter">3</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.message">Device-Watchdog-Answer</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.flagP">false</stringProp>
        <stringProp name="RxPCEFDWARxPCEFDWADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.0">Result-Code</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.0">2001</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.1">Origin-Host</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.1">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.2">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.2">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.3">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.3">127.0.0.1</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.4">Vendor-Id</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.4">0</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpName.5">Product-Name</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpData.5">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFDWADiameterClient.avpCounter">6</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.message">Re-Auth-Answer</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRAARxPCEFRAADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRAADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFASADiameterClient.message">Abort-Session-Answer</stringProp>
        <stringProp name="RxPCEFASADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFASARxPCEFASADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFASADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFASADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.0">${origin_host_rx}</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.1">${origin_realm_rx}</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.2">10.106.1.172</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpName.5">Result-Code</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpData.5">2001</stringProp>
        <stringProp name="RxPCEFASADiameterClient.avpCounter">6</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.message">Cancel-Location-Answer</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFCLARxPCEFCLADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFCLADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.message">Insert-Subscriber-Data-Answer</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFIDARxPCEFIDADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFIDADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.message">Delete-Subscriber-Data-Answer</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFDSARxPCEFDSADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFDSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.message">Reset-Answer</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRSARxPCEFRSADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRSADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.message">Registration-Termination-Answer</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFRTARxPCEFRTADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFRTADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.message">Push-Profile-Answer</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFPPARxPCEFPPADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFPPADiameterClient.avpCounter">5</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.message">Spending-Limit-Answer</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFSLARxPCEFSLADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFSLADiameterClient.avpCounter">0</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.message">Session-Termination-Answer</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.flagP">true</stringProp>
        <stringProp name="RxPCEFSTARxPCEFSTADiameterClient.flagE">false</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.flagT">false</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.appID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.HBHID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.ETEID">-1</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.0">Origin-Host</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.0"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.1">Origin-Realm</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.1"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.2">Host-IP-Address</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.2"></stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.3">Vendor-Id</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.3">0</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpName.4">Product-Name</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpData.4">Diameter Test Tool</stringProp>
        <stringProp name="RxPCEFSTADiameterClient.avpCounter">5</stringProp>
        <boolProp name="RxPCEFDiameterClient.overrideStack">true</boolProp>
        <boolProp name="RxPCEFDiameterClient.disableAutomaticBgResponder">false</boolProp>
        <boolProp name="RxPCEFDiameterClient.enablePeerStateMachine">true</boolProp>
        <objProp>
          <name>DiameterClient.CONNECTION_IDS</name>
          <value class="java.util.ArrayList">
            <java.lang.String>GxPCEF</java.lang.String>
            <java.lang.String>73_PCEF_primary</java.lang.String>
            <java.lang.String>73_PCEF_secondary</java.lang.String>
            <java.lang.String>RxPCEF</java.lang.String>
          </value>
        </objProp>
      </ConfigTestElement>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="ConfigurationDB" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1 from dual</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">DB</stringProp>
        <stringProp name="dbUrl">jdbc:oracle:thin:@${dbserverip}:${dbserverport}/${dbserversid}</stringProp>
        <stringProp name="driver">oracle.jdbc.driver.OracleDriver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbpassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${dbusername}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="Setup Thread (Truncate Tables)" enabled="false">
        <stringProp name="TestPlan.comments">To Truncate Subscriber, Subscription &amp; Usage tables</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1476949438000</longProp>
        <longProp name="ThreadGroup.end_time">1476949438000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_SUBSCRIBER" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_SUBSCRIBER</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_SUB_SESSION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SUB_SESSION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_ALTERNATE_IDENTITY" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_ALTERNATE_IDENTITY</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_SUBSCRIPTION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SUBSCRIPTION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_USAGE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_USAGE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLT_SESSION" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLT_SESSION</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Truncate TBLM_DEVICE_PROFILE" enabled="true">
          <stringProp name="dataSource">DB</stringProp>
          <stringProp name="query">TRUNCATE TABLE TBLM_DEVICE_PROFILE</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="queryType">Callable Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Update Deployment Mode" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1528899449000</longProp>
        <longProp name="ThreadGroup.end_time">1528899449000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Update_System_Parameter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Deployment Mode to OCS" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;systemParameters&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Date Format&quot;,&#xd;
      &quot;description&quot;: &quot;dd : Day, MM : Month, yy : Year, hh : Hour, mm : Minutes, ss : Seconds&quot;,&#xd;
      &quot;alias&quot;: &quot;DATE_FORMAT&quot;,&#xd;
      &quot;value&quot;: &quot;MM/dd/yyyy HH:mm:ss&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Short Date Format&quot;,&#xd;
      &quot;description&quot;: &quot;dd : Day, MM : Month, yy : Year&quot;,&#xd;
      &quot;alias&quot;: &quot;SHORT_DATE_FORMAT&quot;,&#xd;
      &quot;value&quot;: &quot;MM/dd/yyyy&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Datasource Max Row&quot;,&#xd;
      &quot;description&quot;: &quot;Total Number of Row Display in Search&quot;,&#xd;
      &quot;alias&quot;: &quot;TOTAL_ROW&quot;,&#xd;
      &quot;value&quot;: &quot;50&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Update Action For WS&quot;,&#xd;
      &quot;description&quot;: &quot;Update Action on Subscription or Subscriber policy change. Possible options: 0(No_Action), 1(ReAuth_Session), 2(Disconnect Session)&quot;,&#xd;
      &quot;alias&quot;: &quot;UPDATE_ACTION&quot;,&#xd;
      &quot;value&quot;: &quot;0&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Country&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines Country.&quot;,&#xd;
      &quot;alias&quot;: &quot;COUNTRY&quot;,&#xd;
      &quot;value&quot;: &quot;103&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Currency&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines the Currency.&quot;,&#xd;
      &quot;alias&quot;: &quot;CURRENCY&quot;,&#xd;
      &quot;value&quot;: &quot;INR&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Operator&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines Operator.&quot;,&#xd;
      &quot;alias&quot;: &quot;OPERATOR&quot;,&#xd;
      &quot;value&quot;: &quot;101&quot;&#xd;
    },&#xd;
    {&#xd;
    	&quot;name&quot;:&quot;Deployment Mode&quot;,&#xd;
    	&quot;description&quot;:&quot;Deployment mode is used to manage policy where PCC is used for Quota metering and QoS metering, PCRF is used for Quota metering and OCS is used for QoS metering. Note: System restart in required to apply this configuration&quot;,&#xd;
    	&quot;alias&quot;:&quot;DEPLOYMENT_MODE&quot;,&#xd;
    	&quot;value&quot;:&quot;${deployment_mode}&quot;&#xd;
    },&#xd;
    {&#xd;
            &quot;name&quot;: &quot;Tax(%)&quot;,&#xd;
            &quot;description&quot;: &quot;This parameter defines the value of the tax that should be applied on monetary recharge price. &quot;,&#xd;
            &quot;alias&quot;: &quot;TAX&quot;,&#xd;
            &quot;value&quot;: &quot;10&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;packageParameters&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Param 1 Field Label&quot;,&#xd;
      &quot;description&quot;: &quot;Label of package param1 attribute. Default Param 1 if no label is configured.&quot;,&#xd;
      &quot;alias&quot;: &quot;PARAM_1&quot;,&#xd;
      &quot;value&quot;: &quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Param 2 Field Label&quot;,&#xd;
      &quot;description&quot;: &quot;Label of package param2 attribute. Default Param 2 if no label is configured.&quot;,&#xd;
      &quot;alias&quot;: &quot;PARAM_2&quot;,&#xd;
      &quot;value&quot;: &quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/systemparameter/system-parameter/*.json</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-490428393">${deployment_mode}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Update_System_Parameter" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1528899449000</longProp>
        <longProp name="ThreadGroup.end_time">1528899449000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Update_System_Parameter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Disable Password Change" enabled="true">
            <stringProp name="dataSource">DB</stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="query">update tblm_staff set PASSWORD_CHANGE_DATE = SYSDATE</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
          </JDBCSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update System Currency" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;systemParameters&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Date Format&quot;,&#xd;
      &quot;description&quot;: &quot;dd : Day, MM : Month, yy : Year, hh : Hour, mm : Minutes, ss : Seconds&quot;,&#xd;
      &quot;alias&quot;: &quot;DATE_FORMAT&quot;,&#xd;
      &quot;value&quot;: &quot;MM/dd/yyyy HH:mm:ss&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Short Date Format&quot;,&#xd;
      &quot;description&quot;: &quot;dd : Day, MM : Month, yy : Year&quot;,&#xd;
      &quot;alias&quot;: &quot;SHORT_DATE_FORMAT&quot;,&#xd;
      &quot;value&quot;: &quot;MM/dd/yyyy&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Datasource Max Row&quot;,&#xd;
      &quot;description&quot;: &quot;Total Number of Row Display in Search&quot;,&#xd;
      &quot;alias&quot;: &quot;TOTAL_ROW&quot;,&#xd;
      &quot;value&quot;: &quot;50&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Update Action For WS&quot;,&#xd;
      &quot;description&quot;: &quot;Update Action on Subscription or Subscriber policy change. Possible options: 0(No_Action), 1(ReAuth_Session), 2(Disconnect Session)&quot;,&#xd;
      &quot;alias&quot;: &quot;UPDATE_ACTION&quot;,&#xd;
      &quot;value&quot;: &quot;0&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Country&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines Country.&quot;,&#xd;
      &quot;alias&quot;: &quot;COUNTRY&quot;,&#xd;
      &quot;value&quot;: &quot;103&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Currency&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines the Currency.&quot;,&#xd;
      &quot;alias&quot;: &quot;CURRENCY&quot;,&#xd;
      &quot;value&quot;: &quot;INR&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Operator&quot;,&#xd;
      &quot;description&quot;: &quot;This parameter defines Operator.&quot;,&#xd;
      &quot;alias&quot;: &quot;OPERATOR&quot;,&#xd;
      &quot;value&quot;: &quot;101&quot;&#xd;
    },&#xd;
    {&#xd;
            &quot;name&quot;: &quot;Tax(%)&quot;,&#xd;
            &quot;description&quot;: &quot;This parameter defines the value of the tax that should be applied on monetary recharge price. &quot;,&#xd;
            &quot;alias&quot;: &quot;TAX&quot;,&#xd;
            &quot;value&quot;: &quot;10&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;packageParameters&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Param 1 Field Label&quot;,&#xd;
      &quot;description&quot;: &quot;Label of package param1 attribute. Default Param 1 if no label is configured.&quot;,&#xd;
      &quot;alias&quot;: &quot;PARAM_1&quot;,&#xd;
      &quot;value&quot;: &quot;&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;name&quot;: &quot;Param 2 Field Label&quot;,&#xd;
      &quot;description&quot;: &quot;Label of package param2 attribute. Default Param 2 if no label is configured.&quot;,&#xd;
      &quot;alias&quot;: &quot;PARAM_2&quot;,&#xd;
      &quot;value&quot;: &quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/systemparameter/system-parameter/edit.json</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="48628">103</stringProp>
                <stringProp name="72653">INR</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Rest_Setup_Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1551678267000</longProp>
        <longProp name="ThreadGroup.end_time">1551678267000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Rest_setup_Thread</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create Notification templates and data package" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Add email notification templates" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">Insert into TBLM_NOTIFICATION_TEMPLATE (ID,NAME,STATUS,SUBJECT,TEMPLATE_DATA,TEMPLATE_TYPE,GROUPS,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY) values (&apos;email-template-id-11111111&apos;,&apos;Email-Template&apos;,&apos;ACTIVE&apos;,&apos;Threshold Reached&apos;,&apos;&lt;p&gt;Dear Customer,&lt;/p&gt;&lt;p&gt;Your account balance reached threshold limit.&lt;/p&gt;
&apos;,&apos;EMAIL&apos;,&apos;GROUP_1&apos;,to_timestamp(&apos;24-05-18 05:04:47.705000000 PM&apos;,&apos;DD-MM-RR HH12:MI:SSXFF AM&apos;),&apos;STAFF_1&apos;,to_timestamp(&apos;24-05-18 05:07:14.630000000 PM&apos;,&apos;DD-MM-RR HH12:MI:SSXFF AM&apos;),&apos;STAFF_1&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Add sms notification templates" enabled="true">
              <stringProp name="dataSource">DB</stringProp>
              <stringProp name="query">Insert into TBLM_NOTIFICATION_TEMPLATE (ID,NAME,STATUS,SUBJECT,TEMPLATE_DATA,TEMPLATE_TYPE,GROUPS,CREATED_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY) values (&apos;sms-template-id-11111111&apos;,&apos;SMS-Template&apos;,&apos;ACTIVE&apos;,null,&apos; Dear Customer, Your account balance reached threshold limit. &apos;,&apos;SMS&apos;,&apos;GROUP_1&apos;,to_timestamp(&apos;24-05-18 05:05:03.462000000 PM&apos;,&apos;DD-MM-RR HH12:MI:SSXFF AM&apos;),&apos;STAFF_1&apos;,to_timestamp(&apos;24-05-18 05:07:27.813000000 PM&apos;,&apos;DD-MM-RR HH12:MI:SSXFF AM&apos;),&apos;STAFF_1&apos;)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create DataPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;Dummy_base_package_11111111&lt;/id&gt;&#xd;
            &lt;name&gt;Dummy_base_package&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 04/26/2018 15:32:20&lt;/description&gt;&#xd;
            &lt;type&gt;BASE&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;RnC_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles/&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;description&gt;Created by admin on 04/26/2018 15:33:31&lt;/description&gt;&#xd;
                    &lt;name&gt;Dummy_PCC_Profile&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;id&gt;&lt;/id&gt;&#xd;
                            &lt;mbrdl&gt;1&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;1&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;Dummy_Quota_Profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;rncProfileDatas&gt;&#xd;
                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                &lt;id&gt;&lt;/id&gt;&#xd;
                &lt;balanceLevel&gt;HSQ&lt;/balanceLevel&gt;&#xd;
                &lt;description&gt;Created by admin on 04/26/2018 15:32:50&lt;/description&gt;&#xd;
                &lt;name&gt;Dummy_Quota_Profile&lt;/name&gt;&#xd;
                &lt;quotaType&gt;VOLUME&lt;/quotaType&gt;&#xd;
                &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                &lt;rncProfileDetailDatas&gt;&#xd;
                    &lt;balanceUnit&gt;MB&lt;/balanceUnit&gt;&#xd;
                    &lt;dataServiceType&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                        &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                    &lt;/dataServiceType&gt;&#xd;
                    &lt;fupLevel&gt;0&lt;/fupLevel&gt;&#xd;
                    &lt;id&gt;&lt;/id&gt;&#xd;
                    &lt;pulseTimeUnit&gt;SECOND&lt;/pulseTimeUnit&gt;&#xd;
                    &lt;pulseVolumeUnit&gt;MB&lt;/pulseVolumeUnit&gt;&#xd;
                    &lt;rateUnit&gt;VOLUME&lt;/rateUnit&gt;&#xd;
                    &lt;ratingGroupData&gt;&#xd;
                        &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                        &lt;id&gt;RATING_GROUP_1&lt;/id&gt;&#xd;
                        &lt;name&gt;Default_Rating_Group&lt;/name&gt;&#xd;
                    &lt;/ratingGroupData&gt;&#xd;
                    &lt;timeBalanceUnit&gt;DAY&lt;/timeBalanceUnit&gt;&#xd;
                    &lt;timeLimitUnit&gt;SECOND&lt;/timeLimitUnit&gt;&#xd;
                    &lt;usageLimitUnit&gt;MB&lt;/usageLimitUnit&gt;&#xd;
                &lt;/rncProfileDetailDatas&gt;&#xd;
                &lt;unitType&gt;TOTAL&lt;/unitType&gt;&#xd;
            &lt;/rncProfileDatas&gt;&#xd;
            &lt;currency&gt;INR&lt;/currency&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">netvertexsm/rest/restful/import/import/pkgs?action=REPLACE</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1832949337">Global_Configurations</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create AddOnPackage" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;pkg-container&gt;&#xd;
    &lt;pkgDatas&gt;&#xd;
        &lt;pkgData&gt;&#xd;
            &lt;groupNames&gt;DefaultGroup&lt;/groupNames&gt;&#xd;
            &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
            &lt;id&gt;Dummy_addon_package_11111111&lt;/id&gt;&#xd;
            &lt;name&gt;Dummy_Add_On_Package&lt;/name&gt;&#xd;
            &lt;description&gt;Created by admin on 05/30/2018 10:59:43&lt;/description&gt;&#xd;
            &lt;type&gt;ADDON&lt;/type&gt;&#xd;
            &lt;status&gt;ACTIVE&lt;/status&gt;&#xd;
            &lt;packageMode&gt;LIVE&lt;/packageMode&gt;&#xd;
            &lt;validityPeriod&gt;30&lt;/validityPeriod&gt;&#xd;
            &lt;validityPeriodUnit&gt;DAY&lt;/validityPeriodUnit&gt;&#xd;
            &lt;exclusiveAddOn&gt;false&lt;/exclusiveAddOn&gt;&#xd;
            &lt;multipleSubscription&gt;true&lt;/multipleSubscription&gt;&#xd;
            &lt;quotaProfileType&gt;USAGE_METERING_BASED&lt;/quotaProfileType&gt;&#xd;
            &lt;quota-profiles&gt;&#xd;
                &lt;quota-Profile&gt;&#xd;
                    &lt;id&gt;dummy_quota_profile_11111111&lt;/id&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;balance-level&gt;HSQ&lt;/balance-level&gt;&#xd;
                    &lt;description&gt;Created by admin on 05/30/2018 11:00:04&lt;/description&gt;&#xd;
                    &lt;quota-profile-name&gt;Dummy_Quota_Profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;quota-profile-details&gt;&#xd;
                        &lt;quota-profile-detail&gt;&#xd;
                            &lt;aggregation-key&gt;BILLING_CYCLE&lt;/aggregation-key&gt;&#xd;
                            &lt;dataServiceType&gt;&#xd;
                                &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                                &lt;id&gt;DATA_SERVICE_TYPE_1&lt;/id&gt;&#xd;
                                &lt;name&gt;All-Service&lt;/name&gt;&#xd;
                            &lt;/dataServiceType&gt;&#xd;
                            &lt;download-unit&gt;MB&lt;/download-unit&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;time-unit&gt;DAY&lt;/time-unit&gt;&#xd;
                            &lt;total-unit&gt;MB&lt;/total-unit&gt;&#xd;
                            &lt;upload-unit&gt;MB&lt;/upload-unit&gt;&#xd;
                        &lt;/quota-profile-detail&gt;&#xd;
                    &lt;/quota-profile-details&gt;&#xd;
                    &lt;renewal-interval-unit&gt;MONTH&lt;/renewal-interval-unit&gt;&#xd;
                    &lt;usage-presence&gt;1&lt;/usage-presence&gt;&#xd;
                &lt;/quota-Profile&gt;&#xd;
            &lt;/quota-profiles&gt;&#xd;
            &lt;qos-profiles&gt;&#xd;
                &lt;qos-profile&gt;&#xd;
                    &lt;groups&gt;GROUP_1&lt;/groups&gt;&#xd;
                    &lt;description&gt;Created by admin on 05/30/2018 11:00:12&lt;/description&gt;&#xd;
                    &lt;name&gt;Dummy_PCC_Profile&lt;/name&gt;&#xd;
                    &lt;orderNo&gt;1&lt;/orderNo&gt;&#xd;
                    &lt;qos-profile-details&gt;&#xd;
                        &lt;qos-profile-detail&gt;&#xd;
                            &lt;aambrdl-unit&gt;Kbps&lt;/aambrdl-unit&gt;&#xd;
                            &lt;aambrul-unit&gt;Kbps&lt;/aambrul-unit&gt;&#xd;
                            &lt;action&gt;0&lt;/action&gt;&#xd;
                            &lt;charging-rule-base-names/&gt;&#xd;
                            &lt;fup-level&gt;0&lt;/fup-level&gt;&#xd;
                            &lt;global-pcc-rules/&gt;&#xd;
                            &lt;mbrdl&gt;100&lt;/mbrdl&gt;&#xd;
                            &lt;mbrdl-unit&gt;Kbps&lt;/mbrdl-unit&gt;&#xd;
                            &lt;mbrul&gt;100&lt;/mbrul&gt;&#xd;
                            &lt;mbrul-unit&gt;Kbps&lt;/mbrul-unit&gt;&#xd;
                            &lt;pcc-rules/&gt;&#xd;
                            &lt;preCapability&gt;true&lt;/preCapability&gt;&#xd;
                            &lt;preVulnerability&gt;true&lt;/preVulnerability&gt;&#xd;
                            &lt;priority-level&gt;1&lt;/priority-level&gt;&#xd;
                            &lt;qci&gt;6&lt;/qci&gt;&#xd;
                            &lt;slice-download-unit&gt;MB&lt;/slice-download-unit&gt;&#xd;
                            &lt;slice-time-unit&gt;MINUTE&lt;/slice-time-unit&gt;&#xd;
                            &lt;slice-total&gt;25&lt;/slice-total&gt;&#xd;
                            &lt;slice-total-unit&gt;MB&lt;/slice-total-unit&gt;&#xd;
                            &lt;slice-upload-unit&gt;MB&lt;/slice-upload-unit&gt;&#xd;
                            &lt;usageMonitoring&gt;true&lt;/usageMonitoring&gt;&#xd;
                        &lt;/qos-profile-detail&gt;&#xd;
                    &lt;/qos-profile-details&gt;&#xd;
                    &lt;quota-profile-id&gt;dummy_quota_profile_11111111&lt;/quota-profile-id&gt;&#xd;
                    &lt;quota-profile-name&gt;Dummy_Quota_Profile&lt;/quota-profile-name&gt;&#xd;
                    &lt;time-periods/&gt;&#xd;
                &lt;/qos-profile&gt;&#xd;
            &lt;/qos-profiles&gt;&#xd;
            &lt;sy-quota-profiles/&gt;&#xd;
            &lt;alwaysPreferPromotionalQoS&gt;false&lt;/alwaysPreferPromotionalQoS&gt;&#xd;
            &lt;usgae-notifications/&gt;&#xd;
            &lt;tariffSwitchSupport&gt;true&lt;/tariffSwitchSupport&gt;&#xd;
            &lt;currency&gt;INR&lt;/currency&gt;&#xd;
            &lt;rate-cards/&gt;&#xd;
        &lt;/pkgData&gt;&#xd;
    &lt;/pkgDatas&gt;&#xd;
&lt;/pkg-container&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">netvertexsm/rest/restful/import/import/pkgs?action=REPLACE</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1777808594">&lt;messages&gt;SUCCESS&lt;/messages&gt;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="xml content type" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/xml</stringProp>
                  </elementProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Header Manager for REST API</stringProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="PD: policy -reload" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1832949337">Global_Configurations</stringProp>
                  <stringProp name="18059174">Common Functions</stringProp>
                  <stringProp name="-803016769">PD: Reload Policy</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Default_Database_Datasource" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Default_DD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Default Database Datasource" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;DATABASE_DS_2&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: null,&#xd;
    &quot;name&quot;: &quot;DefaultDatabaseDatasource_2&quot;,&#xd;
    &quot;connectionUrl&quot;: &quot;jdbc:oracle:thin:@${dbserverip}:${dbserverport}/${dbserversid}&quot;,&#xd;
    &quot;userName&quot;: &quot;${dbusername}&quot;,&#xd;
    &quot;password&quot;: &quot;${dbusername}&quot;,&#xd;
    &quot;minimumPool&quot;: 1,&#xd;
    &quot;maximumPool&quot;: 15,&#xd;
    &quot;queryTimeout&quot;: 1000,&#xd;
    &quot;statusCheckDuration&quot;: 1,&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${default_db_datasource_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1056488887">&quot;id&quot;:&quot;DATABASE_DS_2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_SPR_Database_Datasource" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Default_DD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create SPR Database Datasource" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;DATABASE_DS_3&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: null,&#xd;
    &quot;name&quot;: &quot;SPRDBDatasource&quot;,&#xd;
    &quot;connectionUrl&quot;: &quot;${spr_db_url}&quot;,&#xd;
    &quot;userName&quot;: &quot;${spr_db_username}&quot;,&#xd;
    &quot;password&quot;: &quot;${spr_db_password}&quot;,&#xd;
    &quot;minimumPool&quot;: 1,&#xd;
    &quot;maximumPool&quot;: 15,&#xd;
    &quot;queryTimeout&quot;: 1000,&#xd;
    &quot;statusCheckDuration&quot;: 1,&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${default_db_datasource_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1056488856">&quot;id&quot;:&quot;DATABASE_DS_3&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Server_Group_And_Server_Instance" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Server</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Server Group" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Server_Group_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;DefaultGroup&quot;,&#xd;
        &quot;sessionDataSourceId&quot;: &quot;DATABASE_DS_2&quot;,&#xd;
        &quot;notificationDataSourceId&quot;: &quot;DATABASE_DS_2&quot;,&#xd;
        &quot;serverInstanceIds&quot;: [&#xd;
            &quot;Server_Instance_11111111&quot;&#xd;
        ],&#xd;
        &quot;serverGroupType&quot;: &quot;PCC&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${server_group_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-361795601">&quot;id&quot;:&quot;Server_Group_11111111</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Server Instance" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Server_Instance_11111111&quot;,&#xd;
        &quot;name&quot;: &quot;ngt70&quot;,&#xd;
        &quot;description&quot;: &quot;Server Instance created successfully&quot;,&#xd;
        &quot;snmpUrl&quot;: &quot;${snmp_ip}:${snmp_port}&quot;,&#xd;
        &quot;restApiUrl&quot;: &quot;${serverip}:${server_rest_port}&quot;,&#xd;
        &quot;diameterEnabled&quot;: true,&#xd;
        &quot;diameterUrl&quot;: &quot;${serverip}:${diameterport}&quot;,&#xd;
        &quot;diameterOriginHost&quot;: &quot;netvertex.elitecore.com&quot;,&#xd;
        &quot;diameterOriginRealm&quot;: &quot;elitecore.com&quot;,&#xd;
        &quot;radiusEnabled&quot;: true,&#xd;
        &quot;radiusUrl&quot;: &quot;${serverip}:${radiusport}&quot;,&#xd;
        &quot;emailAgentId&quot;: null,&#xd;
        &quot;smsAgentId&quot;: null,&#xd;
        &quot;serverGroupId&quot;: &quot;Server_Group_11111111&quot;,&#xd;
        &quot;offlineRncService&quot;: null&#xd;
    }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${server_instance_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="424591015">&quot;id&quot;:&quot;Server_Instance_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Server Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;SERVER_PROFILE_1&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;pcrfServiceQueueSize&quot;: 10000,&#xd;
  &quot;pcrfServiceMinThreads&quot;: 5,&#xd;
  &quot;pcrfServiceMaxThreads&quot;: 10,&#xd;
  &quot;pcrfServiceWorkerThreadPriority&quot;: 7,&#xd;
  &quot;diameterQueueSize&quot;: 10000,&#xd;
  &quot;diameterMinThreads&quot;: 5,&#xd;
  &quot;diameterMaxThreads&quot;: 10,&#xd;
  &quot;diameterDwInterval&quot;: 60,&#xd;
  &quot;diameterDuplicateReqCheckEnabled&quot;: false,&#xd;
  &quot;diameterDuplicateReqPurgeInterval&quot;: 15,&#xd;
  &quot;diameterSessionCleanupInterval&quot;: 86400,&#xd;
  &quot;diameterSessionTimeout&quot;: 86400,&#xd;
  &quot;radiusQueueSize&quot;: 10000,&#xd;
  &quot;radiusMinThreads&quot;: 5,&#xd;
  &quot;radiusMaxThreads&quot;: 10,&#xd;
  &quot;radiusDuplicateReqCheckEnabled&quot;: false,&#xd;
  &quot;radiusDuplicateReqPurgeInterval&quot;: 15,&#xd;
  &quot;logLevel&quot;: &quot;DEBUG&quot;,&#xd;
  &quot;rollingType&quot;: 1,&#xd;
  &quot;rollingUnits&quot;: 5,&#xd;
  &quot;maxRolledUnits&quot;: 1,&#xd;
  &quot;notificationServiceExecutionPeriod&quot;: 30,&#xd;
  &quot;maxParallelExecution&quot;: 5,&#xd;
  &quot;batchSize&quot;: 10&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${server_profile_url}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-484603466">&quot;id&quot;:&quot;SERVER_PROFILE_1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Service Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Server</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create SMS Service" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;SMS&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;Sms&quot;,&#xd;
        &quot;description&quot;: &quot;Sms Service&quot;,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/pd/service/service.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1096486006">&quot;id&quot;:&quot;SMS&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Update Slice Configuration" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Update volume and time maximum slice configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Update_Slice_Configuration</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Slice Configuration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;id&quot;:&quot;SLICE_CONFIG_1&quot;,&#xd;
&quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
&quot;groups&quot;:null,&#xd;
&quot;monetaryReservation&quot;:10,&#xd;
&quot;volumeSlicePercentage&quot;:10,&#xd;
&quot;volumeSliceThreshold&quot;:80,&#xd;
&quot;volumeMinimumSlice&quot;:10,&#xd;
&quot;volumeMaximumSlice&quot;:400,&#xd;
&quot;volumeMinimumSliceUnit&quot;:&quot;MB&quot;,&#xd;
&quot;volumeMaximumSliceUnit&quot;:&quot;MB&quot;,&#xd;
&quot;timeSlicePercentage&quot;:10,&#xd;
&quot;timeSliceThreshold&quot;:80,&#xd;
&quot;timeMinimumSlice&quot;:10,&#xd;
&quot;timeMaximumSlice&quot;:60,&#xd;
&quot;timeMinimumSliceUnit&quot;:&quot;MINUTE&quot;,&#xd;
&quot;timeMaximumSliceUnit&quot;:&quot;MINUTE&quot;,&#xd;
&quot;dynamicSlicing&quot;:null,&#xd;
&quot;groupNames&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/${pd}/${slice_config_url}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">Update volume max slice to 400 MB and time max slice to 1 hour</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-782454508">&quot;id&quot;:&quot;SLICE_CONFIG_1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Revenue_detail" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Revenue_Details</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Revenue Detail 1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;REVENUE_DETAIL1&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;REVENUE_DETAIL1&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin on 02/18/2019 08:47:08&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/${pd}/${revenue_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-925906446">&quot;id&quot;:&quot;REVENUE_DETAIL1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Revenue Detail 2" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;REVENUE_DETAIL2&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;REVENUE_DETAIL2&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin on 02/18/2019 08:47:08&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/${pd}/${revenue_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-925906415">&quot;id&quot;:&quot;REVENUE_DETAIL2&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Revenue Detail 3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;REVENUE_DETAIL3&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;REVENUE_DETAIL3&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin on 02/18/2019 08:47:08&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/${pd}/${revenue_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-925906384">&quot;id&quot;:&quot;REVENUE_DETAIL3&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Diameter_Gy_Packet_Mapping" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Server</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Gateway To PCC Packet Mapping For CCR" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;Gateway_to_PCC_mapping_CCR_id&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;Gateway_to_PCC_mapping_CCR&quot;,&#xd;
   &quot;description&quot;:null,&#xd;
   &quot;commProtocol&quot;:&quot;DIAMETER&quot;,&#xd;
   &quot;packetType&quot;:&quot;CREDIT_CONTROL_REQUEST&quot;,&#xd;
   &quot;type&quot;:&quot;GATEWAY_TO_PCC&quot;,&#xd;
   &quot;attributeMappingData&quot;:{  &#xd;
      &quot;id&quot;:&quot;Username_mapping_CCR_id&quot;,&#xd;
      &quot;mappings&quot;:[  &#xd;
         &quot;{\&quot;id\&quot;:\&quot;Username_CCR_id\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;defaultvalue\&quot;:\&quot;sterlite\&quot;,\&quot;valuemapping\&quot;:\&quot;sterlite=value_mapping\&quot;}&quot;,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null&#xd;
      ],&#xd;
      &quot;orderNumber&quot;:null&#xd;
   },&#xd;
   &quot;applicationType&quot;:null,&#xd;
   &quot;groupNames&quot;:&quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_packet_mapping_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="113274238">&quot;id&quot;:&quot;Gateway_to_PCC_mapping_CCR_id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC To Gateway Packet Mapping For CCA" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;PCC_to_Gateway_mapping_CCA_id&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;PCC_to_Gateway_mapping_CCA&quot;,&#xd;
   &quot;description&quot;:null,&#xd;
   &quot;commProtocol&quot;:&quot;DIAMETER&quot;,&#xd;
   &quot;packetType&quot;:&quot;CREDIT_CONTROL_RESPONSE&quot;,&#xd;
   &quot;type&quot;:&quot;PCC_TO_GATEWAY&quot;,&#xd;
   &quot;attributeMappingData&quot;:{  &#xd;
      &quot;id&quot;:&quot;Username_mapping_CCA_id&quot;,&#xd;
      &quot;mappings&quot;:[  &#xd;
         &quot;{\&quot;id\&quot;:\&quot;Username_CCA_id\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;sterlite\&quot;,\&quot;valuemapping\&quot;:\&quot;sterlite=value_mapping\&quot;}&quot;,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null&#xd;
      ],&#xd;
      &quot;orderNumber&quot;:null&#xd;
   },&#xd;
   &quot;applicationType&quot;:null,&#xd;
   &quot;groupNames&quot;:&quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_packet_mapping_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2141445589">&quot;id&quot;:&quot;PCC_to_Gateway_mapping_CCA_id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC To Gateway Packet Mapping For RAR" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;PCC_to_Gateway_mapping_RAR_id&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;PCC_to_Gateway_mapping_RAR&quot;,&#xd;
   &quot;description&quot;:null,&#xd;
   &quot;commProtocol&quot;:&quot;DIAMETER&quot;,&#xd;
   &quot;packetType&quot;:&quot;RE_AUTH_REQUEST&quot;,&#xd;
   &quot;type&quot;:&quot;PCC_TO_GATEWAY&quot;,&#xd;
   &quot;attributeMappingData&quot;:{  &#xd;
      &quot;id&quot;:&quot;Username_mapping_RAR_id&quot;,&#xd;
      &quot;mappings&quot;:[  &#xd;
         &quot;{\&quot;id\&quot;:\&quot;Username_RAR_id\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;sterlite\&quot;,\&quot;valuemapping\&quot;:\&quot;sterlite=value_mapping\&quot;}&quot;,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null&#xd;
      ],&#xd;
      &quot;orderNumber&quot;:null&#xd;
   },&#xd;
   &quot;applicationType&quot;:null,&#xd;
   &quot;groupNames&quot;:&quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_packet_mapping_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1767426825">&quot;id&quot;:&quot;PCC_to_Gateway_mapping_RAR_id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Gateway To PCC Packet Mapping For RAA" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;Gateway_to_PCC_mapping_RAA_id&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;Gateway_to_PCC_mapping_RAA&quot;,&#xd;
   &quot;description&quot;:null,&#xd;
   &quot;commProtocol&quot;:&quot;DIAMETER&quot;,&#xd;
   &quot;packetType&quot;:&quot;RE_AUTH_RESPONSE&quot;,&#xd;
   &quot;type&quot;:&quot;GATEWAY_TO_PCC&quot;,&#xd;
   &quot;attributeMappingData&quot;:{  &#xd;
      &quot;id&quot;:&quot;Username_mapping_RAA_id&quot;,&#xd;
      &quot;mappings&quot;:[  &#xd;
         &quot;{\&quot;id\&quot;:\&quot;Username_RAA_id\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;defaultvalue\&quot;:\&quot;sterlite\&quot;,\&quot;valuemapping\&quot;:\&quot;sterlite=value_mapping\&quot;}&quot;,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null,&#xd;
         null&#xd;
      ],&#xd;
      &quot;orderNumber&quot;:null&#xd;
   },&#xd;
   &quot;applicationType&quot;:null,&#xd;
   &quot;groupNames&quot;:&quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_packet_mapping_url}.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="467969406">&quot;id&quot;:&quot;Gateway_to_PCC_mapping_RAA_id&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Diameter_GW_for_Gx_Rx_Sy_and_Gy" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Diameter_GW_for_Gx_Rx_Sy_and_Gy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{  &#xd;
   &quot;id&quot;:&quot;Diameter_GW_Profile_11111111&quot;,&#xd;
   &quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
   &quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
   &quot;name&quot;:&quot;Diameter_GW_Profile&quot;,&#xd;
   &quot;description&quot;:&quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
   &quot;gatewayType&quot;:&quot;ACCESS_GATEWAY&quot;,&#xd;
   &quot;vendorId&quot;:&quot;999999999999&quot;,&#xd;
   &quot;firmware&quot;:null,&#xd;
   &quot;usageReportingType&quot;:&quot;NON_CUMULATIVE&quot;,&#xd;
   &quot;revalidationMode&quot;:&quot;ServerInitiated&quot;,&#xd;
   &quot;timeout&quot;:3000,&#xd;
   &quot;gxApplicationId&quot;:&quot;10415:16777238&quot;,&#xd;
   &quot;gyApplicationId&quot;:&quot;10415:4&quot;,&#xd;
   &quot;rxApplicationId&quot;:&quot;10415:16777236&quot;,&#xd;
   &quot;s9ApplicationId&quot;:&quot;10415:16777267&quot;,&#xd;
   &quot;syApplicationId&quot;:&quot;10415:16777302&quot;,&#xd;
   &quot;dwInterval&quot;:60,&#xd;
   &quot;supportedVendorList&quot;:null,&#xd;
   &quot;supportedStandard&quot;:&quot;RELEASE_9&quot;,&#xd;
   &quot;chargingRuleInstallMode&quot;:&quot;GROUPED&quot;,&#xd;
   &quot;sessionCleanUpCER&quot;:false,&#xd;
   &quot;sessionCleanUpDPR&quot;:false,&#xd;
   &quot;cerAvps&quot;:null,&#xd;
   &quot;dprAvps&quot;:null,&#xd;
   &quot;dwrAvps&quot;:null,&#xd;
   &quot;socketReceiveBufferSize&quot;:-1,&#xd;
   &quot;sendDPRCloseEvent&quot;:false,&#xd;
   &quot;socketSendBufferSize&quot;:-1,&#xd;
   &quot;tcpNagleAlgorithm&quot;:true,&#xd;
   &quot;initConnectionDuration&quot;:0,&#xd;
   &quot;groovyScriptDatas&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;umStandard&quot;:&quot;TGPPR9&quot;,&#xd;
   &quot;sessionLookUpKey&quot;:&quot;CS.SessionIPv4, CS.SessionIPv6&quot;,&#xd;
   &quot;diameterGwProfilePCCRuleMappings&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;serviceGuidingDatas&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;vendorData&quot;:{  &#xd;
      &quot;id&quot;:&quot;999999999999&quot;,&#xd;
      &quot;name&quot;:&quot;Other&quot;,&#xd;
      &quot;description&quot;:&quot;Other&quot;&#xd;
   },&#xd;
   &quot;pccToGWGxPacketMappings&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;gwToPccGxPacketMappings&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;pccToGWGyPacketMappings&quot;:[  &#xd;
      {  &#xd;
         &quot;id&quot;:&quot;PCC_to_GW_mapping_CCA_Profile_id&quot;,&#xd;
         &quot;orderNumber&quot;:1,&#xd;
         &quot;packetMappingId&quot;:&quot;PCC_to_Gateway_mapping_CCA_id&quot;,&#xd;
         &quot;applicationType&quot;:&quot;GY&quot;,&#xd;
         &quot;condition&quot;:null&#xd;
      },&#xd;
      {  &#xd;
         &quot;id&quot;:&quot;PCC_to_GW_mapping_RAR_Profile_id&quot;,&#xd;
         &quot;orderNumber&quot;:2,&#xd;
         &quot;packetMappingId&quot;:&quot;PCC_to_Gateway_mapping_RAR_id&quot;,&#xd;
         &quot;applicationType&quot;:&quot;GY&quot;,&#xd;
         &quot;condition&quot;:null&#xd;
      }&#xd;
   ],&#xd;
   &quot;gwToPccGyPacketMappings&quot;:[  &#xd;
      {  &#xd;
         &quot;id&quot;:&quot;GW_to_PCC_mapping_CCR_Profile_id&quot;,&#xd;
         &quot;orderNumber&quot;:1,&#xd;
         &quot;packetMappingId&quot;:&quot;Gateway_to_PCC_mapping_CCR_id&quot;,&#xd;
         &quot;applicationType&quot;:&quot;GY&quot;,&#xd;
         &quot;condition&quot;:null&#xd;
      },&#xd;
      {  &#xd;
         &quot;id&quot;:&quot;GW_to_PCC_mapping_RAA_Profile_id&quot;,&#xd;
         &quot;orderNumber&quot;:2,&#xd;
         &quot;packetMappingId&quot;:&quot;Gateway_to_PCC_mapping_RAA_id&quot;,&#xd;
         &quot;applicationType&quot;:&quot;GY&quot;,&#xd;
         &quot;condition&quot;:null&#xd;
      }&#xd;
   ],&#xd;
   &quot;pccToGWRxPacketMappings&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;gwToPccRxPacketMappings&quot;:[  &#xd;
&#xd;
   ],&#xd;
   &quot;groupNames&quot;:&quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="575832418">&quot;id&quot;:&quot;Diameter_GW_Profile_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Diameter_GW_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;Diameter_GW&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;gx.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;Diameter_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 3,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-777825640">&quot;id&quot;:&quot;Diameter_GW_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for Rx" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_14_AF_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_14_AF_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;APPLICATION_FUNCTION&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 0,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;TGPPR9&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-776224378">&quot;id&quot;:&quot;RTC_14_AF_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_14_AF_Gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_14_AF_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;af.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;RTC_14_AF_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 3,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1469002434">&quot;id&quot;:&quot;RTC_14_AF_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for RTC_21" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_21_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_21_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;ACCESS_GATEWAY&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 0,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;TGPPR9&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="235127762">&quot;id&quot;:&quot;RTC_21_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_21_Gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_21_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;21_gx.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;RTC_21_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 0,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1714736754">&quot;id&quot;:&quot;RTC_21_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for RTC_22" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_22_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_22_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;ACCESS_GATEWAY&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 0,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;TGPPR9&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1802928527">&quot;id&quot;:&quot;RTC_22_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_22_Gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_22_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;22_gx.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;RTC_22_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 0,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="870264883">&quot;id&quot;:&quot;RTC_22_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for RTC_23" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_23_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_23_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;ACCESS_GATEWAY&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 0,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;TGPPR9&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="453982480">&quot;id&quot;:&quot;RTC_23_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_23_Gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_23_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;23_gx.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: &quot;Diameter_GW_11111111&quot;,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;RTC_23_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 0,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="25793012">&quot;id&quot;:&quot;RTC_23_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for Sy JMX" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile for Sy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;OCS_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;OCS_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 12/27/2017 15:38:10&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;OCS&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 60,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;TGPPR9&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
    }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="229163018">&quot;id&quot;:&quot;OCS_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW for Sy" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;OCS_Gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;OCS_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 12/27/2017 16:08:05&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: &quot;&quot;,&#xd;
        &quot;hostIdentity&quot;: &quot;pocs.elitecore.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elitecore.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;OCS_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 0,&#xd;
        &quot;groupNames&quot;: null&#xd;
    }</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2138307898">&quot;id&quot;:&quot;OCS_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Create GW &amp; GW Profile for Ro" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile for Ro" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Ro_GW_Profile_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;Ro_GW_Profile&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
        &quot;gatewayType&quot;: &quot;APPLICATION_FUNCTION&quot;,&#xd;
        &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
        &quot;firmware&quot;: null,&#xd;
        &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
        &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
        &quot;timeout&quot;: 3000,&#xd;
        &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
        &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
        &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
        &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
        &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
        &quot;dwInterval&quot;: 60,&#xd;
        &quot;supportedVendorList&quot;: null,&#xd;
        &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
        &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
        &quot;sessionCleanUpCER&quot;: false,&#xd;
        &quot;sessionCleanUpDPR&quot;: false,&#xd;
        &quot;cerAvps&quot;: null,&#xd;
        &quot;dprAvps&quot;: null,&#xd;
        &quot;dwrAvps&quot;: null,&#xd;
        &quot;socketReceiveBufferSize&quot;: -1,&#xd;
        &quot;sendDPRCloseEvent&quot;: false,&#xd;
        &quot;socketSendBufferSize&quot;: -1,&#xd;
        &quot;tcpNagleAlgorithm&quot;: true,&#xd;
        &quot;initConnectionDuration&quot;: 0,&#xd;
        &quot;groovyScriptDatas&quot;: [],&#xd;
        &quot;umStandard&quot;: &quot;MSCC&quot;,&#xd;
        &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4,CS.SessionIPv6&quot;,&#xd;
        &quot;diameterGwProfilePacketMappings&quot;: [],&#xd;
        &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
        &quot;vendorData&quot;: {&#xd;
            &quot;id&quot;: &quot;999999999999&quot;,&#xd;
            &quot;name&quot;: &quot;Other&quot;,&#xd;
            &quot;description&quot;: &quot;Other&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-134823950">&quot;id&quot;:&quot;Ro_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW Profile for Ro SMS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;Ro_SMS_GW_Profile_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;Ro_SMS_GW_Profile&quot;,&#xd;
    &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:38:54&quot;,&#xd;
    &quot;gatewayType&quot;: &quot;APPLICATION_FUNCTION&quot;,&#xd;
    &quot;vendorId&quot;: &quot;999999999999&quot;,&#xd;
    &quot;firmware&quot;: null,&#xd;
    &quot;usageReportingType&quot;: &quot;NON_CUMULATIVE&quot;,&#xd;
    &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
    &quot;timeout&quot;: 3000,&#xd;
    &quot;gxApplicationId&quot;: &quot;10415:16777238&quot;,&#xd;
    &quot;gyApplicationId&quot;: &quot;10415:4&quot;,&#xd;
    &quot;rxApplicationId&quot;: &quot;10415:16777236&quot;,&#xd;
    &quot;s9ApplicationId&quot;: &quot;10415:16777267&quot;,&#xd;
    &quot;syApplicationId&quot;: &quot;10415:16777302&quot;,&#xd;
    &quot;dwInterval&quot;: 60,&#xd;
    &quot;supportedVendorList&quot;: null,&#xd;
    &quot;supportedStandard&quot;: &quot;RELEASE_9&quot;,&#xd;
    &quot;chargingRuleInstallMode&quot;: &quot;GROUPED&quot;,&#xd;
    &quot;sessionCleanUpCER&quot;: false,&#xd;
    &quot;sessionCleanUpDPR&quot;: false,&#xd;
    &quot;cerAvps&quot;: null,&#xd;
    &quot;dprAvps&quot;: null,&#xd;
    &quot;dwrAvps&quot;: null,&#xd;
    &quot;socketReceiveBufferSize&quot;: -1,&#xd;
    &quot;sendDPRCloseEvent&quot;: false,&#xd;
    &quot;socketSendBufferSize&quot;: -1,&#xd;
    &quot;tcpNagleAlgorithm&quot;: true,&#xd;
    &quot;initConnectionDuration&quot;: 0,&#xd;
    &quot;groovyScriptDatas&quot;: [],&#xd;
    &quot;umStandard&quot;: &quot;MSCC&quot;,&#xd;
    &quot;sessionLookUpKey&quot;: &quot;CS.SessionIPv4, CS.SessionIPv6&quot;,&#xd;
    &quot;diameterGwProfilePCCRuleMappings&quot;: [],&#xd;
    &quot;serviceGuidingDatas&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;&quot;,&#xd;
            &quot;orderNumber&quot;: 1,&#xd;
            &quot;serviceId&quot;: &quot;SMS&quot;,&#xd;
            &quot;condition&quot;: null&#xd;
        }&#xd;
    ],&#xd;
    &quot;vendorData&quot;: {&#xd;
        &quot;id&quot;: &quot;999999999999&quot;,&#xd;
        &quot;name&quot;: &quot;Other&quot;,&#xd;
        &quot;description&quot;: &quot;Other&quot;&#xd;
    },&#xd;
    &quot;pccToGWGxPacketMappings&quot;: [],&#xd;
    &quot;gwToPccGxPacketMappings&quot;: [],&#xd;
    &quot;pccToGWGyPacketMappings&quot;: [],&#xd;
    &quot;gwToPccGyPacketMappings&quot;: [],&#xd;
    &quot;pccToGWRxPacketMappings&quot;: [],&#xd;
    &quot;gwToPccRxPacketMappings&quot;: [],&#xd;
    &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_profile_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1776077640">&quot;id&quot;:&quot;Ro_SMS_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW for Ro" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Ro_GW_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;Ro_GW&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;ro.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;Ro_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 3,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1300815576">&quot;id&quot;:&quot;Ro_GW_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Diameter GW for Ro SMS" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Ro_SMS_GW_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;1&quot;,&#xd;
        &quot;name&quot;: &quot;Ro_SMS_GW&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 10:43:46&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;STANDARD&quot;,&#xd;
        &quot;connectionURL&quot;: null,&#xd;
        &quot;hostIdentity&quot;: &quot;rosms.elite.com&quot;,&#xd;
        &quot;realm&quot;: &quot;elite.com&quot;,&#xd;
        &quot;localAddress&quot;: null,&#xd;
        &quot;alternateHostId&quot;: null,&#xd;
        &quot;diameterGatewayProfileId&quot;: &quot;Ro_SMS_GW_Profile_11111111&quot;,&#xd;
        &quot;requestTimeout&quot;: 3000,&#xd;
        &quot;retransmissionCount&quot;: 3,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${diameter_gw_url}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1894759406">&quot;id&quot;:&quot;Ro_SMS_GW_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.custom_message"></stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_SPR_and_DDF" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_SPR_and_DDF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create SPR" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Default_SPR_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;SPR&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 11/29/2017 11:41:58&quot;,&#xd;
        &quot;alternateIdField&quot;: &quot;IMSI&quot;,&#xd;
        &quot;batchSize&quot;: 1,&#xd;
        &quot;databaseId&quot;: &quot;DATABASE_DS_3&quot;,&#xd;
        &quot;spInterfaceId&quot;: null,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${spr_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1380941555">&quot;id&quot;:&quot;Default_SPR_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DDF" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;DDF_TABLE_1&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;stripPrefixes&quot;: null,&#xd;
    &quot;ddfSprRelDatas&quot;: [],&#xd;
    &quot;defaultSprDataId&quot;: &quot;Default_SPR_11111111&quot;,&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${ddf_url}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2038583816">&quot;id&quot;:&quot;DDF_TABLE_1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_CDR_Drivers_and_CSV_Drivers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_CDR_Drivers_and_CSV_Drivers</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DB CDR Driver-TC11- Need to add internal ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_11_DBCDR_Driver_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_11_DBCDR_Driver&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 01/09/2018 16:17:40&quot;,&#xd;
        &quot;driverType&quot;: &quot;DB_CDR_DRIVER&quot;,&#xd;
        &quot;csvDriverData&quot;: null,&#xd;
        &quot;dbCdrDriverData&quot;: {&#xd;
            &quot;maxQueryTimeoutCount&quot;: 100,&#xd;
            &quot;batchUpdate&quot;: &quot;false&quot;,&#xd;
            &quot;batchSize&quot;: 500,&#xd;
            &quot;batchUpdateInterval&quot;: 1,&#xd;
            &quot;batchUpdateQueryTimeout&quot;: 10,&#xd;
            &quot;tableName&quot;: &quot;TBLCDR&quot;,&#xd;
            &quot;identityField&quot;: &quot;CDRID&quot;,&#xd;
            &quot;sequenceName&quot;: &quot;SEQ_CDR&quot;,&#xd;
            &quot;storeAllCdr&quot;: &quot;false&quot;,&#xd;
            &quot;timeStampFieldName&quot;: &quot;TIMESTAMP&quot;,&#xd;
            &quot;reportingType&quot;: &quot;UM&quot;,&#xd;
            &quot;sessionIdFieldName&quot;: &quot;SESSIONID&quot;,&#xd;
            &quot;createDateFieldName&quot;: &quot;CREATEDATE&quot;,&#xd;
            &quot;lastModifiedDateFieldName&quot;: &quot;LASTMODIFIEDDATE&quot;,&#xd;
            &quot;inputOctetsFieldName&quot;: &quot;INPUTOCTETS&quot;,&#xd;
            &quot;outputOctetsFieldName&quot;: &quot;OUTPUTOCTETS&quot;,&#xd;
            &quot;totalOctetsFieldName&quot;: &quot;TOTALOCTETS&quot;,&#xd;
            &quot;usageTimeFieldName&quot;: &quot;USAGETIME&quot;,&#xd;
            &quot;usageKeyFieldName&quot;: &quot;MONITORINGKEY&quot;,&#xd;
            &quot;dbCdrDriverFieldMappingDataList&quot;: [&#xd;
                {&#xd;
                    &quot;pcrfKey&quot;: &quot;CS.MSISDN&quot;,&#xd;
                    &quot;dbField&quot;: &quot;USERNAME&quot;,&#xd;
                    &quot;dataType&quot;: &quot;0&quot;,&#xd;
                    &quot;defaultValue&quot;: null&#xd;
                }&#xd;
            ],&#xd;
            &quot;databaseId&quot;: &quot;DATABASE_DS_2&quot;&#xd;
        },&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${db_cdr_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="724137739">&quot;id&quot;:&quot;RTC_11_DBCDR_Driver_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create CSV Driver-TC12 - Need to add internal IDs" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;RTC_12_CSV_Driver_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;RTC_12_CSV_Driver&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 12/11/2017 12:32:53&quot;,&#xd;
        &quot;driverType&quot;: &quot;CSV_DRIVER&quot;,&#xd;
        &quot;csvDriverData&quot;: {&#xd;
            &#xd;
            &quot;header&quot;: &quot;true&quot;,&#xd;
            &quot;delimiter&quot;: &quot;,&quot;,&#xd;
            &quot;timeStampFormat&quot;: &quot;EEE dd MMM,yyyy,hh:mm:ss aaa&quot;,&#xd;
            &quot;fileName&quot;: &quot;CDRs.csv&quot;,&#xd;
            &quot;fileLocation&quot;: &quot;data/csvfiles&quot;,&#xd;
            &quot;prefixFileName&quot;: null,&#xd;
            &quot;defaultFolderName&quot;: null,&#xd;
            &quot;folderName&quot;: null,&#xd;
            &quot;sequenceRange&quot;: null,&#xd;
            &quot;sequencePosition&quot;: &quot;SUFFIX&quot;,&#xd;
            &quot;sequenceGlobalization&quot;: &quot;false&quot;,&#xd;
            &quot;allocatingProtocol&quot;: &quot;LOCAL&quot;,&#xd;
            &quot;address&quot;: &quot;127.0.0.1:22&quot;,&#xd;
            &quot;remoteFileLocation&quot;: null,&#xd;
            &quot;userName&quot;: null,&#xd;
            &quot;archiveLocation&quot;: &quot;data/csvfiles/archive&quot;,&#xd;
            &quot;failOverTime&quot;: 3,&#xd;
            &quot;reportingType&quot;: &quot;UM&quot;,&#xd;
            &quot;inputOctetsHeader&quot;: &quot;INPUTOCTETS&quot;,&#xd;
            &quot;outputOctetsHeader&quot;: &quot;OUTPUTOCTETS&quot;,&#xd;
            &quot;totalOctetsHeader&quot;: &quot;TOTALOCTETS&quot;,&#xd;
            &quot;usageKeyHeader&quot;: &quot;USAGE&quot;,&#xd;
            &quot;usageTimeHeader&quot;: &quot;USAGETIME&quot;,&#xd;
            &quot;timeBoundary&quot;: 1,&#xd;
            &quot;sizeBasedRollingUnit&quot;: null,&#xd;
            &quot;timeBasedRollingUnit&quot;: null,&#xd;
            &quot;recordBasedRollingUnit&quot;: null,&#xd;
            &quot;csvDriverFieldMappingDataList&quot;: [&#xd;
                {&#xd;
                    &#xd;
                    &quot;headerField&quot;: &quot;MSISDN&quot;,&#xd;
                    &quot;pcrfKey&quot;: &quot;CS.MSISDN&quot;,&#xd;
                    &quot;orderNo&quot;: 1&#xd;
                }&#xd;
            ],&#xd;
            &quot;csvDriverStripMappingDataList&quot;: [],&#xd;
            &quot;postOperation&quot;: &quot;DELETE&quot;&#xd;
        },&#xd;
        &quot;dbCdrDriverData&quot;: null,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${csv_cdr_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-413617161">&quot;id&quot;:&quot;RTC_12_CSV_Driver_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Charging CSV Driver" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;Charging_CDR_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;Charging_CDR&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 02/21/2018 12:31:48&quot;,&#xd;
        &quot;driverType&quot;: &quot;CSV_DRIVER&quot;,&#xd;
        &quot;csvDriverData&quot;: {&#xd;
            &#xd;
            &quot;header&quot;: &quot;false&quot;,&#xd;
            &quot;delimiter&quot;: &quot;,&quot;,&#xd;
            &quot;timeStampFormat&quot;: &quot;EEE dd MMM,yyyy,hh:mm:ss aaa&quot;,&#xd;
            &quot;fileName&quot;: &quot;CDRs.csv&quot;,&#xd;
            &quot;fileLocation&quot;: &quot;data/csvfiles&quot;,&#xd;
            &quot;prefixFileName&quot;: null,&#xd;
            &quot;defaultFolderName&quot;: null,&#xd;
            &quot;folderName&quot;: null,&#xd;
            &quot;sequenceRange&quot;: null,&#xd;
            &quot;sequencePosition&quot;: &quot;SUFFIX&quot;,&#xd;
            &quot;sequenceGlobalization&quot;: &quot;false&quot;,&#xd;
            &quot;allocatingProtocol&quot;: &quot;LOCAL&quot;,&#xd;
            &quot;address&quot;: &quot;127.0.0.1:22&quot;,&#xd;
            &quot;remoteFileLocation&quot;: null,&#xd;
            &quot;userName&quot;: null,&#xd;
            &quot;archiveLocation&quot;: &quot;data/csvfiles/archive&quot;,&#xd;
            &quot;failOverTime&quot;: 3,&#xd;
            &quot;reportingType&quot;: &quot;CHARGING_CDR&quot;,&#xd;
            &quot;timeBoundary&quot;: null,&#xd;
            &quot;sizeBasedRollingUnit&quot;: null,&#xd;
            &quot;timeBasedRollingUnit&quot;: null,&#xd;
            &quot;recordBasedRollingUnit&quot;: null,&#xd;
            &quot;csvDriverFieldMappingDataList&quot;: [&#xd;
                {&#xd;
            &#xd;
                    &quot;headerField&quot;: &quot;MSISDN&quot;,&#xd;
                    &quot;pcrfKey&quot;: &quot;CS.MSISDN&quot;,&#xd;
                    &quot;orderNo&quot;: 1&#xd;
                }&#xd;
            ],&#xd;
            &quot;csvDriverStripMappingDataList&quot;: [],&#xd;
            &quot;postOperation&quot;: &quot;DELETE&quot;&#xd;
        },&#xd;
        &quot;dbCdrDriverData&quot;: null,&#xd;
        &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${csv_cdr_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="14717171">&quot;id&quot;:&quot;Charging_CDR_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Field_Mappings_Session Configuration" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Field_Mappings_Session Configuration</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Field Mapping in Session Configuration" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;SESSION_CONFIG_1&quot;,&#xd;
	&quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
	&quot;groups&quot;:&quot;GROUP_1&quot;,&#xd;
	&quot;batchMode&quot;:1,&#xd;
	&quot;batchSize&quot;:null,&#xd;
	&quot;queryTimeout&quot;:null,&#xd;
	&quot;sessionConfigurationFieldMappingDatas&quot;:[&#xd;
	{&#xd;
	&quot;id&quot;:&quot;Location.Area_11111111&quot;,&#xd;
	&quot;referringAttribute&quot;:&quot;Location.Area&quot;,&#xd;
	&quot;fieldName&quot;:&quot;PARAM1&quot;,&#xd;
	&quot;dataType&quot;:0&#xd;
	},&#xd;
	&#xd;
	{&#xd;
	&quot;id&quot;:&quot;Sub.Email_11111111&quot;,&#xd;
	 &quot;referringAttribute&quot;:&quot;Sub.Email&quot;,&#xd;
	&quot;fieldName&quot;:&quot;PARAM2&quot;,&#xd;
	 &quot;dataType&quot;:0&#xd;
	 },&#xd;
&#xd;
	 {&#xd;
	&quot;id&quot;:&quot;Sub.Phone_11111111&quot;,&#xd;
	&quot;referringAttribute&quot;:&quot;Sub.Phone&quot;,&#xd;
	&quot;fieldName&quot;:&quot;PARAM3&quot;,&#xd;
	&quot;dataType&quot;:0&#xd;
	},&#xd;
	&#xd;
	{&#xd;
	&quot;id&quot;:&quot;GatewayType_11111111&quot;,&#xd;
	 &quot;referringAttribute&quot;:&quot;GatewayType&quot;,&#xd;
	&quot;fieldName&quot;:&quot;PARAM4&quot;,&#xd;
	 &quot;dataType&quot;:0&#xd;
	 },&#xd;
&#xd;
	{&#xd;
	&quot;id&quot;:&quot;UserName_11111111&quot;,&#xd;
	 &quot;referringAttribute&quot;:&quot;CS.UserName&quot;,&#xd;
	&quot;fieldName&quot;:&quot;PARAM5&quot;,&#xd;
	 &quot;dataType&quot;:0&#xd;
	 }&#xd;
 ],&#xd;
&quot;databaseId&quot;:&quot;DATABASE_DS_2&quot;,&#xd;
&quot;groupNames&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${session_url}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1722026920">&quot;id&quot;:&quot;SESSION_CONFIG_1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Network_Information" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Network_Information</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Network Information" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;Network_info_1111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;Japan&quot;,&#xd;
  &quot;mcc&quot;: 411,&#xd;
  &quot;mnc&quot;: 111,&#xd;
  &quot;technology&quot;: &quot;GSM&quot;,&#xd;
  &quot;countryId&quot;: &quot;111&quot;,&#xd;
  &quot;operatorId&quot;: &quot;101&quot;,&#xd;
  &quot;brandId&quot;: &quot;101&quot;,&#xd;
  &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${network_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2098400676">&quot;id&quot;:&quot;Network_info_1111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Prefix" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;rest_prefix_1111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;prefix&quot;: &quot;311&quot;,&#xd;
  &quot;countryId&quot;: &quot;103&quot;,&#xd;
  &quot;operatorId&quot;: &quot;101&quot;,&#xd;
  &quot;networkId&quot;: &quot;103&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${prefix}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create LRN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;rest_lrn_11111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;lrn&quot;: &quot;31123&quot;,&#xd;
  &quot;operatorId&quot;: &quot;101&quot;,&#xd;
  &quot;networkId&quot;: &quot;102&quot;,&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${lrn}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_PCC_Service_Policies" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_PCC_Service_Policies</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy-Global" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;Global_PCRF_Service_Policy_11111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;name&quot;: &quot;Global_PCRF_Service_Policy&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin on 12/18/2017 13:17:28&quot;,&#xd;
  &quot;ruleset&quot;: &quot;GatewayType=\&quot;Diameter\&quot; AND NOT (CS.MSISDN IN (\&quot;1111111111\&quot; , \&quot;1111111112\&quot; , \&quot;1111111135\&quot; , \&quot;1111111136\&quot; , \&quot;1111111172\&quot; , \&quot;1111111173\&quot; , \&quot;1111111174\&quot; , \&quot;1111111183\&quot; , \&quot;1111111184\&quot; , \&quot;1111111185\&quot; , \&quot;1111111011\&quot; , \&quot;1111111012\&quot;))&quot;,&#xd;
  &quot;action&quot;: &quot;PROCESS_REQUEST&quot;,&#xd;
  &quot;subscriberLookupOn&quot;: &quot;SUBSCRIBER_IDENTITY&quot;,&#xd;
  &quot;identityAttribute&quot;: &quot;CS.MSISDN&quot;,&#xd;
  &quot;unknownUserAction&quot;: &quot;REJECT_UNKNOWN_USER&quot;,&#xd;
  &quot;unknownUserPkgId&quot;: null,&#xd;
  &quot;syGatewayId&quot;: null,&#xd;
  &quot;syMode&quot;: &quot;PULL&quot;,&#xd;
  &quot;policyCdrDriverId&quot;: null,&#xd;
  &quot;chargingCdrDriverId&quot;: &quot;Charging_CDR_11111111&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-459918808">&quot;id&quot;:&quot;Global_PCRF_Service_Policy_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PCC Service Policy Sy JMX" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy-Sy-PULL" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;OCS_PCC_Service_Policy_PULL_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;name&quot;: &quot;OCS_PCC_Service_Policy_PULL&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 12/27/2017 16:39:42&quot;,&#xd;
        &quot;ruleset&quot;: &quot;GatewayType=\&quot;Diameter\&quot; AND CS.MSISDN IN ( \&quot;1111111135\&quot; , \&quot;1111111172\&quot; , \&quot;1111111173\&quot; , \&quot;1111111184\&quot;)&quot;,&#xd;
        &quot;action&quot;: &quot;PROCESS_REQUEST&quot;,&#xd;
        &quot;subscriberLookupOn&quot;: &quot;SUBSCRIBER_IDENTITY&quot;,&#xd;
        &quot;identityAttribute&quot;: &quot;CS.MSISDN&quot;,&#xd;
        &quot;unknownUserAction&quot;: &quot;REJECT_UNKNOWN_USER&quot;,&#xd;
        &quot;unknownUserPkgId&quot;: null,&#xd;
        &quot;syGatewayId&quot;: &quot;OCS_Gateway_11111111&quot;,&#xd;
        &quot;syMode&quot;: &quot;PULL&quot;,&#xd;
        &quot;policyCdrDriverId&quot;: null,&#xd;
        &quot;chargingCdrDriverId&quot;: &quot;Charging_CDR_11111111&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-591512785">&quot;id&quot;:&quot;OCS_PCC_Service_Policy_PULL_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy-Sy-PUSH" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;OCS_PCC_Service_Policy_PUSH_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;name&quot;: &quot;OCS_PCC_Service_Policy_PUSH&quot;,&#xd;
        &quot;description&quot;: &quot;Created by admin on 12/27/2017 16:45:24&quot;,&#xd;
        &quot;ruleset&quot;: &quot;GatewayType=\&quot;Diameter\&quot; AND CS.MSISDN IN ( \&quot;1111111136\&quot;, \&quot;1111111174\&quot; , \&quot;1111111183\&quot; , \&quot;1111111185\&quot;)&quot;,&#xd;
        &quot;action&quot;: &quot;PROCESS_REQUEST&quot;,&#xd;
        &quot;subscriberLookupOn&quot;: &quot;SUBSCRIBER_IDENTITY&quot;,&#xd;
        &quot;identityAttribute&quot;: &quot;CS.MSISDN&quot;,&#xd;
        &quot;unknownUserAction&quot;: &quot;REJECT_UNKNOWN_USER&quot;,&#xd;
        &quot;unknownUserPkgId&quot;: null,&#xd;
        &quot;syGatewayId&quot;: &quot;OCS_Gateway_11111111&quot;,&#xd;
        &quot;syMode&quot;: &quot;PUSH&quot;,&#xd;
        &quot;policyCdrDriverId&quot;: null,&#xd;
        &quot;chargingCdrDriverId&quot;: &quot;Charging_CDR_11111111&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1090062908">&quot;id&quot;:&quot;OCS_PCC_Service_Policy_PUSH_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy for RADIUS" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;Radius_Service_Policy_11111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;name&quot;: &quot;Radius_Service_Policy&quot;,&#xd;
  &quot;description&quot;: &quot;Created by REST for Automation&quot;,&#xd;
  &quot;ruleset&quot;: &quot;GatewayType=\&quot;Radius\&quot; AND NOT (CS.UserName IN (\&quot;1111111011\&quot;))&quot;,&#xd;
  &quot;action&quot;: &quot;PROCESS_REQUEST&quot;,&#xd;
  &quot;subscriberLookupOn&quot;: &quot;SUBSCRIBER_IDENTITY&quot;,&#xd;
  &quot;identityAttribute&quot;: &quot;CS.UserName&quot;,&#xd;
  &quot;unknownUserAction&quot;: &quot;REJECT_UNKNOWN_USER&quot;,&#xd;
  &quot;unknownUserPkgId&quot;: null,&#xd;
  &quot;syGatewayId&quot;: null,&#xd;
  &quot;syMode&quot;: &quot;PULL&quot;,&#xd;
  &quot;policyCdrDriverId&quot;: null,&#xd;
  &quot;chargingCdrDriverId&quot;: &quot;Charging_CDR_11111111&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="581458367">&quot;id&quot;:&quot;Radius_Service_Policy_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy-GY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;Gy_PCRF_Service_Policy_11111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;name&quot;: &quot;Gy_PCRF_Service_Policy&quot;,&#xd;
  &quot;description&quot;: &quot;Created by admin on 12/18/2017 13:17:28&quot;,&#xd;
  &quot;ruleset&quot;: &quot;CS.MSISDN=\&quot;2\&quot;&quot;,&#xd;
  &quot;action&quot;: &quot;PROCESS_REQUEST&quot;,&#xd;
  &quot;subscriberLookupOn&quot;: &quot;SUBSCRIBER_IDENTITY&quot;,&#xd;
  &quot;identityAttribute&quot;: &quot;CS.MSISDN&quot;,&#xd;
  &quot;unknownUserAction&quot;: &quot;REJECT_UNKNOWN_USER&quot;,&#xd;
  &quot;unknownUserPkgId&quot;: null,&#xd;
  &quot;syGatewayId&quot;: null,&#xd;
  &quot;syMode&quot;: &quot;PULL&quot;,&#xd;
  &quot;policyCdrDriverId&quot;: null,&#xd;
  &quot;chargingCdrDriverId&quot;: &quot;Charging_CDR_11111111&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1666749879">&quot;id&quot;:&quot;Gy_PCRF_Service_Policy_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create PCC Service Policy-Alternate Id Lookup" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;Service_Policy_Alternate_Id_Lookup&quot;,&#xd;
	&quot;status&quot;:&quot;ACTIVE&quot;,&#xd;
	&quot;name&quot;:&quot;Service_Policy_Alternate_Id_Lookup&quot;,&#xd;
	&quot;description&quot;:&quot;Created by admin on 08/06/2018 12:09:23&quot;,&#xd;
	&quot;ruleset&quot;:&quot;GatewayType=\&quot;Diameter\&quot; AND (CS.IMSI IN (\&quot;Alt_1111111172\&quot; , \&quot;Alt_4111111131_1\&quot; , \&quot;Alt_4111111131_2\&quot; , \&quot;Alt_4111111131_3\&quot; , \&quot;Alt_4111111131_4\&quot; , \&quot;Alt_4111111131_5\&quot;))&quot;,&#xd;
	&quot;action&quot;:&quot;PROCESS_REQUEST&quot;,&#xd;
	&quot;subscriberLookupOn&quot;:&quot;ALTERNATE_IDENTITY&quot;,&#xd;
	&quot;identityAttribute&quot;:&quot;CS.IMSI&quot;,&#xd;
	&quot;unknownUserAction&quot;:&quot;REJECT_UNKNOWN_USER&quot;,&#xd;
	&quot;unknownUserPkgId&quot;:null,&#xd;
	&quot;syGatewayId&quot;:null,&#xd;
	&quot;syMode&quot;:&quot;PULL&quot;,&#xd;
	&quot;policyCdrDriverId&quot;:null,&#xd;
	&quot;chargingCdrDriverId&quot;:&quot;Charging_CDR_11111111&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${pcc_service_policy}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="TestPlan.comments">create service policy for subscriber lookup on alternate identity</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1652675039">&quot;id&quot;:&quot;Service_Policy_Alternate_Id_Lookup&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_Packet_Mappings_for_RADIUS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_Packet_Mappings_for_RADIUS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS Access Request Packet Mappings" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;access_request_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;Access_Request&quot;,&#xd;
    &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;ACCESS_REQUEST&quot;,&#xd;
    &quot;type&quot;: &quot;GATEWAY_TO_PCC&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;access_request_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${packet_mapping_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS Accounting Request Packet Mappings" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;account_request_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;Accounting_Request&quot;,&#xd;
    &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;ACCOUNTING_REQUEST&quot;,&#xd;
    &quot;type&quot;: &quot;GATEWAY_TO_PCC&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;account_request_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;,&#xd;
        &quot;{\&quot;id\&quot;:\&quot;account_request_session_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;policykey\&quot;:\&quot;CS.SessionIPv4\&quot;,\&quot;attribute\&quot;:\&quot;0:8\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${packet_mapping_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS Access Accept Packet Mappings" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;access_accept_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;Access_Accept&quot;,&#xd;
    &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;ACCESS_ACCEPT&quot;,&#xd;
    &quot;type&quot;: &quot;PCC_TO_GATEWAY&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;access_accept_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: &quot;coa_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;COA&quot;,&#xd;
    &quot;description&quot;: &quot;Created by REST API&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;CHANGE_OF_AUTHORIZATION&quot;,&#xd;
    &quot;type&quot;: &quot;PCC_TO_GATEWAY&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;id&quot;: &quot;coa_mapping_11111111&quot;,&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;coa_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
  },&#xd;
  {&#xd;
    &quot;id&quot;: &quot;dm_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;DM&quot;,&#xd;
    &quot;description&quot;: &quot;Created by REST API&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;DISCONNECT_REQUEST&quot;,&#xd;
    &quot;type&quot;: &quot;PCC_TO_GATEWAY&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;id&quot;: &quot;dm_mapping_11111111&quot;,&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;dm_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${packet_mapping_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS COA Packet Mappings" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;coa_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;COA&quot;,&#xd;
    &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;CHANGE_OF_AUTHORIZATION&quot;,&#xd;
    &quot;type&quot;: &quot;PCC_TO_GATEWAY&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;mappings&quot;: [        &quot;{\&quot;id\&quot;:\&quot;coa_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;,&#xd;
              &quot;{\&quot;id\&quot;:\&quot;coa_sessionv1_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:42\&quot;,\&quot;policykey\&quot;:\&quot;SessionGsuTotal\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;,&#xd;
      &quot;{\&quot;id\&quot;:\&quot;coa_sessionv2_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:43\&quot;,\&quot;policykey\&quot;:\&quot;SessionGsuTotal\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;,&#xd;
      &quot;{\&quot;id\&quot;:\&quot;coa_sessiont1_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:46\&quot;,\&quot;policykey\&quot;:\&quot;SessionGsuTime\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${packet_mapping_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS DM Packet Mappings" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;id&quot;: &quot;dm_11111111&quot;,&#xd;
    &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
    &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
    &quot;name&quot;: &quot;DM&quot;,&#xd;
    &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
    &quot;commProtocol&quot;: &quot;RADIUS&quot;,&#xd;
    &quot;packetType&quot;: &quot;DISCONNECT_REQUEST&quot;,&#xd;
    &quot;type&quot;: &quot;PCC_TO_GATEWAY&quot;,&#xd;
    &quot;applicationType&quot;: null,&#xd;
    &quot;attributeMappingData&quot;: {&#xd;
      &quot;mappings&quot;: [&#xd;
        &quot;{\&quot;id\&quot;:\&quot;dm_username_11111111\&quot;,\&quot;pid\&quot;:\&quot;0\&quot;,\&quot;attribute\&quot;:\&quot;0:1\&quot;,\&quot;policykey\&quot;:\&quot;CS.UserName\&quot;,\&quot;defaultvalue\&quot;:\&quot;\&quot;,\&quot;valuemapping\&quot;:\&quot;\&quot;}&quot;&#xd;
      ],&#xd;
      &quot;orderNumber&quot;: null&#xd;
    },&#xd;
    &quot;groupNames&quot;: null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${packet_mapping_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create_GW_And_GW_Profile_for_RADIUS_Cumulative_Metering" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1438756094000</longProp>
        <longProp name="ThreadGroup.end_time">1438756094000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Global Entiry Configuration</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.computaris.jmeter.ext.controls.ParameterizedController guiclass="com.computaris.jmeter.ext.controls.ParameterizedControllerGui" testclass="com.computaris.jmeter.ext.controls.ParameterizedController" testname="TTS Parameterized Controller" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="pcapdir" elementType="Argument">
                <stringProp name="Argument.name">pcapdir</stringProp>
                <stringProp name="Argument.value">Create_GW_And_GW_Profile_for_RADIUS_Cumulative_Metering</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </com.computaris.jmeter.ext.controls.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Start Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="1033451790">Capture PD log </stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS GW Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;radius_gw_profile_11111111&quot;,&#xd;
  &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
  &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
  &quot;name&quot;: &quot;Radius_Gateway_Profile&quot;,&#xd;
  &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
  &quot;gatewayType&quot;: &quot;ACCESS_GATEWAY&quot;,&#xd;
  &quot;vendorId&quot;: &quot;9&quot;,&#xd;
  &quot;firmware&quot;: &quot;firmware&quot;,&#xd;
  &quot;usageReportingType&quot;: &quot;CUMULATIVE&quot;,&#xd;
  &quot;revalidationMode&quot;: &quot;ServerInitiated&quot;,&#xd;
  &quot;timeout&quot;: 1000,&#xd;
  &quot;maxRequestTimeout&quot;: 100,&#xd;
  &quot;statusCheckDuration&quot;: 120,&#xd;
  &quot;retryCount&quot;: 10,&#xd;
  &quot;icmpPingEnabled&quot;: false,&#xd;
  &quot;supportedVendorList&quot;: null,&#xd;
  &quot;sendAccountingResponse&quot;: true,&#xd;
  &quot;interimInterval&quot;: 60,&#xd;
  &quot;groovyScriptDatas&quot;: [],&#xd;
  &quot;radiusGwProfilePCCRuleMappings&quot;: [],&#xd;
  &quot;pccToGWPacketMappings&quot;: [&#xd;
    {&#xd;
      &quot;orderNumber&quot;: 1,&#xd;
      &quot;packetMappingId&quot;: &quot;access_accept_11111111&quot;,&#xd;
      &quot;condition&quot;: null&#xd;
    },&#xd;
    {&#xd;
      &quot;orderNumber&quot;: 2,&#xd;
      &quot;packetMappingId&quot;: &quot;coa_11111111&quot;,&#xd;
      &quot;condition&quot;: null&#xd;
    },&#xd;
    {&#xd;
      &quot;orderNumber&quot;: 3,&#xd;
      &quot;packetMappingId&quot;: &quot;dm_11111111&quot;,&#xd;
      &quot;condition&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;gwToPCCPacketMappings&quot;: [&#xd;
    {&#xd;
      &quot;orderNumber&quot;: 1,&#xd;
      &quot;packetMappingId&quot;: &quot;access_request_11111111&quot;,&#xd;
      &quot;condition&quot;: null&#xd;
    },&#xd;
    {&#xd;
      &quot;orderNumber&quot;: 2,&#xd;
      &quot;packetMappingId&quot;: &quot;account_request_11111111&quot;,&#xd;
      &quot;condition&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${radius_gw_profile_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="179344253">&quot;id&quot;:&quot;radius_gw_profile_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create RADIUS GW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
        &quot;id&quot;: &quot;radius_gateway_11111111&quot;,&#xd;
        &quot;status&quot;: &quot;ACTIVE&quot;,&#xd;
        &quot;groups&quot;: &quot;GROUP_1&quot;,&#xd;
        &quot;name&quot;: &quot;Radius_Gateway&quot;,&#xd;
        &quot;description&quot;: &quot;Created by Rest for Automation&quot;,&#xd;
        &quot;policyEnforcementMethod&quot;: &quot;COA&quot;,&#xd;
        &quot;connectionURL&quot;: &quot;${serverip}&quot;,&#xd;
        &quot;sharedSecret&quot;: &quot;secret&quot;,&#xd;
        &quot;minLocalPort&quot;: &quot;10&quot;,&#xd;
        &quot;radiusGatewayProfileId&quot;: &quot;radius_gw_profile_11111111&quot;,&#xd;
        &quot;groupNames&quot;: &quot;DefaultGroup&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/${radius_gw_url}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="983967463">&quot;id&quot;:&quot;radius_gateway_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">200</stringProp>
          </ConstantTimer>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Stop PD Log" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="-592019242">Stop PD log</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="com.computaris.jmeter.visualizers.gui.DiameterDispatcherVizualizer" testclass="ResultCollector" testname="Diameter Messages" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="Test-Rail Push Result JSR223 Listener" enabled="false">
        <stringProp name="TestPlan.comments">This Listener will Push Pass/Fail Result to Test Rail</stringProp>
        <stringProp name="cacheKey"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters">${test_run_id} ${test_case_id}</stringProp>
        <stringProp name="script">import java.util.HashMap;
import java.util.Map;
import org.json.simple.JSONObject;
import org.apache.jorphan.logging.LoggingManager;
import com.gurock.testrail.APIClient;
import org.apache.jmeter.samplers.*;
import org.apache.jmeter.assertions.*;


APIClient client = new APIClient(&quot;http://192.168.2.138/csmqa/&quot;);
client.setUser(&quot;nirav.modhiya@elitecore.com&quot;);
client.setPassword(&quot;elitecore&quot;);

LoggingManager.getLoggerForClass().info(&quot;JSON Object To Be Sent Is : &quot;+ args);
// Here STATUS 1 is for &apos;Passed&apos; and &apos;5&apos; is for &apos;Failed&apos;
String STATUS_ID = &quot;status_id&quot;;
//Validations on results

Map data = new HashMap();
LoggingManager.getLoggerForClass().info(&quot;SampleResult.isStopThread : &quot;+ sampleResult.isStopThread());
LoggingManager.getLoggerForClass().info(&quot;SampleResult.isSuccessful : &quot;+ sampleResult.isSuccessful());

int status = 1;
// 1) This will be executed when all the samplers are executed succesffully.
String commit = &quot;All the Steps are executed Successfully&quot;
// 1) End

// 2) Exectuion failed on Sampler. i.e. Sampler ERROR &amp; Test Thread is stopped.
if(sampleResult.isStopThread()) {
	status = 5;
	Sampler sampler = ctx.getCurrentSampler();
	commit = &quot;\n&quot; + sampler.getName() + &quot; execution failed&quot;;
// 2) End

} else {
// 3) Execution failed on Assertion. i.e. Assertion failed / multiple Assertion failed.
	Sampler sampler = ctx.getCurrentSampler();
	String name = sampler.getName();

	if(name.equals(&quot;end sampler&quot;)){
		status = 1;
	} else if (sampleResult.isSuccessful() == false) {
		status = 5;

		if(sampleResult.getAssertionResults() == null || sampleResult.getAssertionResults().size() == 0) {
			commit = &quot;Execution failed of: &quot; + &quot;\n Thread Name: &quot; + sampler.getThreadName() + &quot;\n Sampler Name: &quot; + sampler.getName();
			LoggingManager.getLoggerForClass().info(&quot;SampleResult.isSuccessful : &quot;+ sampleResult.isSuccessful());
		} else {
			commit = &quot;Execution failed of: &quot; + &quot;\n Thread Name: &quot; + sampler.getThreadName() + &quot;\n Sampler Name: &quot; + sampler.getName() + &quot; on following Assertion:&quot;;
			for (AssertionResult assertionResult : sampleResult.getAssertionResults()) {

				if(assertionResult.isFailure() || assertionResult.isError()) {
commit = commit + &quot;\n Assertion Name: &quot; + assertionResult.getName() + &quot;\n Assertion Failure Message: &quot; + assertionResult.getFailureMessage();
				}
			}
		}
	} else {
		return;
	}
}
// 3) End

// Null Check for Elapsed Time.
String elapsedTime = vars.get(&quot;elapsed_time&quot;);
if (elapsedTime == null) {
	LoggingManager.getLoggerForClass().error(&quot;&lt;&lt; Elapsed Time is not defined in Global Variable Definition &gt;&gt;&quot;);
	return;
} else {
LoggingManager.getLoggerForClass().info(&quot;elapsed time is: &quot; + elapsedTime);
}

// Null Check for Checked Version.
String checkedVersion = vars.get(&quot;checked_version&quot;);
if (checkedVersion == null) {
	LoggingManager.getLoggerForClass().error(&quot;&lt;&lt; Checked Version is not defined in Global Variable Definition &gt;&gt;&quot;);
	return;
} else {
LoggingManager.getLoggerForClass().info(&quot;Checked Version is: &quot; + checkedVersion);
}

// Null Check for Checked Revision.
String checkedRevision = vars.get(&quot;checked_revision&quot;);
if (checkedRevision == null) {
	LoggingManager.getLoggerForClass().error(&quot;&lt;&lt; Checked Revision is not defined in Global Variable Definition &gt;&gt;&quot;);
	return;
} else {
LoggingManager.getLoggerForClass().info(&quot;Checked Revision is: &quot; + checkedRevision);
}

// Null Check for Test Run ID.
String testRunId = vars.get(&quot;test_run_id&quot;);
if (testRunId == null) {
	LoggingManager.getLoggerForClass().error(&quot;&lt;&lt; Test Run ID is not defined in Global Variable Definition &gt;&gt;&quot;);
	return;
} else {
LoggingManager.getLoggerForClass().info(&quot;Test Run ID is: &quot; + testRunId);
}

// Null Check for Test Case ID.
String testCaseId = vars.get(&quot;test_case_id&quot;);
if (testCaseId == null) {
	LoggingManager.getLoggerForClass().error(&quot;&lt;&lt; Test Case ID is not defined in TTS Parameterized Configuration &gt;&gt;&quot;);
	return;
} else {
LoggingManager.getLoggerForClass().info(&quot;Test Case ID is: &quot; + testCaseId);
}

data.put(STATUS_ID, status);
data.put(&quot;comment&quot;, commit);
// Elapsed time is in Minutes
data.put(&quot;elapsed&quot;, new Integer(elapsedTime));
data.put(&quot;custom_version&quot;, new Integer(checkedVersion));
data.put(&quot;custom_revision&quot;, new Integer(checkedRevision));
LoggingManager.getLoggerForClass().info(&quot;Add_result_for_case/&quot;+args[0]+&quot;/&quot;+args[1]);
JSONObject r = (JSONObject) client.sendPost(&quot;Add_result_for_case/&quot;+args[0]+&quot;/&quot;+args[1], data);
LoggingManager.getLoggerForClass().info(&quot;JSON Object To Be Sent Is : &quot;+ r);</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Common Functions" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1454995107000</longProp>
        <longProp name="ThreadGroup.end_time">1454995107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PCAP" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Pcap" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup  /usr/sbin/tcpdump -s 0 -i any port ${diameterport} or ${syport} -w ${logpath}/${pcapdir}/${pcapdir}.pcap  &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value reference="../../com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty/value"/>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of Tcpdump Command " enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PcapPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Pcap" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop PCAP On Server" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value reference="../../com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty/value"/>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PcapPID</stringProp>
              <stringProp name="DiameterLoadvalue">PcapPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start NV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-server.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value reference="../../com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty/value"/>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">LogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture PD log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start PD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${pdhome}/logs/*&gt;${logpath}/${pcapdir}/${pcapdir}-policy-designer.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">PDPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop NV log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopNV logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value reference="../../com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty/value"/>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">LogPID</stringProp>
              <stringProp name="DiameterLoadvalue">LogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop PD log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="StopPD logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${PDPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PDPID</stringProp>
              <stringProp name="DiameterLoadvalue">PDPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart (SSH)" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Restart (SSH)" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart " enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">abort</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Capture Tomcat log " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Start Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${nvhome}/logs/netvertex-server-${serverinstancename}.log&gt;/opt/${logpath}/${pcapdir}/${logfilename}.log &amp; echo $!</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>/bin/mkdir -p ${logpath}/${pcapdir}</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>nohup tail -f ${tomcat_home}/logs/catalina.out&gt;${logpath}/${pcapdir}/${tomcatlogs}.log &amp; echo $!</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.extractor.DiameterStore guiclass="com.computaris.jmeter.extractor.gui.DiameterStoreGui" testclass="com.computaris.jmeter.extractor.DiameterStore" testname="Store PID of log Command" enabled="true">
              <stringProp name="DiameterStoredefault"></stringProp>
              <stringProp name="DiameterStorerefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterStorevalue">${__telnetSSHGetResultLineByRegex(2,^\d+$)}</stringProp>
              <boolProp name="DiameterStoretolerant">true</boolProp>
            </com.computaris.jmeter.extractor.DiameterStore>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Tomcat log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Stop Tomcat logs" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${TomcatLogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">TomcatLogPID</stringProp>
              <stringProp name="DiameterLoadvalue">TomcatLogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="NV Restart (shut immediate)" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Shutdown REST" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="parameters" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">immediate</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">parameters</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/shutdown</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <com.computaris.jmeter.ext.timer.SimpleTimer guiclass="com.computaris.jmeter.ext.timer.SimpleTimerGui" testclass="com.computaris.jmeter.ext.timer.SimpleTimer" testname="Wait for 20 Sec" enabled="false">
            <stringProp name="SimpleTimer.TIMEOUT">20000</stringProp>
          </com.computaris.jmeter.ext.timer.SimpleTimer>
          <hashTree/>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="NV Start" enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>3000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>20000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear statistics usage" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics usage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070394255">Usage statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="show spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI show statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/show?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache Stats" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear statistics cache spr-cache REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=statistics cache spr-cache</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-737073625">SPR cache statistics successfully cleared</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="clear spr-cache" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI clear cache spr-cache -all REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/clear?parameters=cache spr-cache -all</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1923322074">spr cache flushed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Tomcat Restart " enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Tomcat Restart " enabled="false">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;shutdown\ abort&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>true</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; sh netvertex.sh&quot;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ; sleep 3</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh shutdown.sh&quot; ;</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; rm -rf ../work/*&quot; </__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${tomcat_home}/bin; sh startup.sh&quot; ; sleep 15</__commandText>
                  <__timeout>2000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = false/spr.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set spr.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set spr.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/spr.cache-enabled = true/spr.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="serverinitiated.destination-host = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="serverinitiated.destination-host = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set serverinitiated.destination-host = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/serverinitiated.destination-host = true/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/#serverinitiated.destination-host = false/serverinitiated.destination-host = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="set -Drevalidationtime.delta=0" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="-Drevalidationtime.delta=0" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/bin/netvertex.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/server.gcInterval=86400000 -Drevalidationtime.delta=0 -Drevalidationtime.delta=0/server.gcInterval=86400000 -Drevalidationtime.delta=0/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="End Sampler Simple Controller" enabled="true"/>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="end sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">false</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="PD: Reload Policy" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PD: Reload Policy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${pdcontextpath}/rest/restful/policy/reload/policy</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = true" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = true" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = true/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = true/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Set session.cache-enabled = false" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Set session.cache-enabled = false" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>sed -i &quot;161 i serverinitiated.destination-host=true&quot; ${nvhome}/system/misc-config.properties</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;cd ${nvhome}/bin; echo &quot;rconf&quot; | sh cli.sh&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>su - ${nvuser} -c &quot;vi ${nvhome}/system/misc-config.properties&quot;</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = false/session.cache-enabled = false/g</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:1,$s/session.cache-enabled = true/session.cache-enabled = false/g</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>:x</__commandText>
                  <__timeout>300</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Reload Conf Common Function" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1832949337">Global_Configurations</stringProp>
              <stringProp name="18059174">Common Functions</stringProp>
              <stringProp name="77834902">RConf</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="RConf" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI RConf REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout">20000</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/rconf</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1770785172">Server Configuration Successfully Reloaded for NetVertex</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify PCRF Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify PCRF Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2024504540">PCRF.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify OfflineRnC Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify OfflineRnC Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/services</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-399345633">OfflineRnC.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Diameter Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Diameter Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="533546614">DIAMETER.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Verify Radius Running" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CLI Verify Radius Running REST" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${server_rest_port}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${cli_rest_url}/globallisteners</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1062068207">RADIUS.*Running</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1473851955000</longProp>
        <longProp name="ThreadGroup.end_time">1473851955000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop Pcap" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Teardown_Stop PCAP On Server" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill  ${PcapPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill -9 `ps -ef | grep -w &apos;tcpdump&apos; | awk &apos;{print $2}&apos;`</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">PcapPID</stringProp>
              <stringProp name="DiameterLoadvalue">PcapPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Stop NV log" enabled="true"/>
        <hashTree>
          <com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler guiclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSamplerGui" testclass="com.computaris.jmeter_plugins.telnet_ssh.sampler.TelnetSSHSampler" testname="Teardown_StopNV logs" enabled="true">
            <stringProp name="TelnetSSHSampler.SERVER_ADDRESS">${serverip}</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PORT_NUMBER">22</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_USERNAME">root</stringProp>
            <stringProp name="TelnetSSHSampler.SSH_PASSWORD">${rootpassword}</stringProp>
            <boolProp name="TelnetSSHSampler.TELNET_BUTTON_STATUS">false</boolProp>
            <boolProp name="TelnetSSHSampler.SSH_BUTTON_STATUS">true</boolProp>
            <boolProp name="TelnetSSHSampler.LOGIN_REQUIRED">true</boolProp>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill ${LogPID}</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
            <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
              <name>TelnetSSHSampler.SSH_COMMANDS_TO_SENDS</name>
              <value>
                <com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
                  <__commandText>kill -9 `ps -ef | grep -w &apos;tail&apos; | awk &apos;{print $2}&apos;`</__commandText>
                  <__timeout>1000</__timeout>
                  <__waitFor></__waitFor>
                  <__checkResult>false</__checkResult>
                  <__executionStatus>0</__executionStatus>
                  <__results/>
                  <__expectedResults/>
                </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommand>
              </value>
            </com.computaris.jmeter__plugins.telnet__ssh.common.TelnetSSHCommandsArrayListProperty>
          </com.computaris.jmeter__plugins.telnet__ssh.sampler.TelnetSSHSampler>
          <hashTree>
            <com.computaris.jmeter.modifiers.DiameterLoad guiclass="com.computaris.jmeter.modifiers.gui.DiameterLoadGui" testclass="com.computaris.jmeter.modifiers.DiameterLoad" testname="TTS Load Variable" enabled="true">
              <stringProp name="DiameterLoaddefault"></stringProp>
              <stringProp name="DiameterLoadrefname">LogPID</stringProp>
              <stringProp name="DiameterLoadvalue">LogPID</stringProp>
              <boolProp name="DiameterLoadtolerant">false</boolProp>
            </com.computaris.jmeter.modifiers.DiameterLoad>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Delete GW &amp; GW Profile" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_21_Gateway_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1714736754">&quot;id&quot;:&quot;RTC_21_Gateway_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_21_GW_Profile_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="235127762">&quot;id&quot;:&quot;RTC_21_GW_Profile_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_22_Gateway_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="870264883">&quot;id&quot;:&quot;RTC_22_Gateway_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_22_GW_Profile_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1802928527">&quot;id&quot;:&quot;RTC_22_GW_Profile_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_23_Gateway_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="870264883">&quot;id&quot;:&quot;RTC_22_Gateway_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
            <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_23_GW_Profile_11111111.json</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1802928527">&quot;id&quot;:&quot;RTC_22_GW_Profile_11111111&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Delete GW &amp; GW Profile" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_14_AF_Gateway_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1469002434">&quot;id&quot;:&quot;RTC_14_AF_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_14_AF_GW_Profile_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-776224378">&quot;id&quot;:&quot;RTC_14_AF_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Delete GW &amp; GW Profile-29" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_29_AF_Gateway_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1824584806">&quot;id&quot;:&quot;RTC_29_AF_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_29_AF_GW_Profile_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1753650602">&quot;id&quot;:&quot;RTC_29_AF_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="com.computaris.jmeter.functions.FunctionHelperHook" testclass="GenericController" testname="Delete GW &amp; GW Profile-30" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gateway/diameter-gateway/RTC_30_AF_Gateway_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="582817092">&quot;id&quot;:&quot;RTC_30_AF_Gateway_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Diameter GW Profile for Rx" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${serverip}</stringProp>
              <stringProp name="HTTPSampler.port">${smserverport}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${smcontextpath}/${smapplicationname}/gatewayprofile/diameter-gateway-profile/RTC_30_AF_GW_Profile_11111111.json</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-995281984">&quot;id&quot;:&quot;RTC_30_AF_GW_Profile_11111111&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
