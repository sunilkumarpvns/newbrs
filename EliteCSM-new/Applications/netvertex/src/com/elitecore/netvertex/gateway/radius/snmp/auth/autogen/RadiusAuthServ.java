package com.elitecore.netvertex.gateway.radius.snmp.auth.autogen;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling RADIUS-AUTH-SERVER-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "RadiusAuthServ" group.
 * The group is defined with the following oid: 1.3.6.1.2.1.67.1.1.1.1.
 */
public class RadiusAuthServ implements RadiusAuthServMBean, Serializable {

    /**
     * Variable for storing the value of "RadiusAuthServTotalAccessRejects".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.9".
     *
     * "The number of RADIUS Access-Reject packets sent."
     *
     */
    protected Long RadiusAuthServTotalAccessRejects = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalAccessAccepts".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.8".
     *
     * "The number of RADIUS Access-Accept packets sent."
     *
     */
    protected Long RadiusAuthServTotalAccessAccepts = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalDupAccessRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.7".
     *
     * "The number of duplicate RADIUS Access-Request
     * packets received."
     *
     */
    protected Long RadiusAuthServTotalDupAccessRequests = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalInvalidRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.6".
     *
     * "The number of RADIUS Access-Request packets
     * received from unknown addresses."
     *
     */
    protected Long RadiusAuthServTotalInvalidRequests = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthClientTable".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.15".
     *
     * "The (conceptual) table listing the RADIUS authentication
     * clients with which the server shares a secret."
     *
     */
    protected TableRadiusAuthClientTable RadiusAuthClientTable;

    /**
     * Variable for storing the value of "RadiusAuthServTotalUnknownTypes".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.14".
     *
     * "The number of RADIUS packets of unknown type which
     * were received."
     *
     */
    protected Long RadiusAuthServTotalUnknownTypes = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalAccessRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.5".
     *
     * "The number of packets received on the
     * authentication port."
     *
     */
    protected Long RadiusAuthServTotalAccessRequests = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServConfigReset".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.4".
     *
     * "Status/action object to reinitialize any persistent
     * server state.  When set to reset(2), any persistent
     * server state (such as a process) is reinitialized as if
     * the server had just been started.  This value will
     * never be returned by a read operation.  When read, one of
     * the following values will be returned:
     * other(1) - server in some unknown state;
     * initializing(3) - server (re)initializing;
     * running(4) - server currently running."
     *
     */
    protected EnumRadiusAuthServConfigReset RadiusAuthServConfigReset = new EnumRadiusAuthServConfigReset();

    /**
     * Variable for storing the value of "RadiusAuthServTotalPacketsDropped".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.13".
     *
     * "The number of incoming packets
     * silently discarded for some reason other
     * than malformed, bad authenticators or
     * unknown types."
     *
     */
    protected Long RadiusAuthServTotalPacketsDropped = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServResetTime".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.3".
     *
     * "If the server has a persistent state (e.g., a process)
     * and supports a `reset' operation (e.g., can be told to
     * re-read configuration files), this value will be the
     * time elapsed (in hundredths of a second) since the
     * server was `reset.'  For software that does not
     * have persistence or does not support a `reset' operation,
     * this value will be zero."
     *
     */
    protected Long RadiusAuthServResetTime = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalBadAuthenticators".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.12".
     *
     * "The number of RADIUS Authentication-Request packets
     * which contained invalid Signature attributes received."
     *
     */
    protected Long RadiusAuthServTotalBadAuthenticators = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServTotalMalformedAccessRequests".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.11".
     *
     * "The number of malformed RADIUS Access-Request
     * packets received. Bad authenticators
     * and unknown types are not included as
     * malformed Access-Requests."
     *
     */
    protected Long RadiusAuthServTotalMalformedAccessRequests = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServUpTime".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.2".
     *
     * "If the server has a persistent state (e.g., a process),
     * this value will be the time elapsed (in hundredths of a
     * seco) since the server process was started.
     * For software without persistent state, this value will
     * be zero."
     *
     */
    protected Long RadiusAuthServUpTime = new Long(1);

    /**
     * Variable for storing the value of "RadiusAuthServIdent".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.1".
     *
     * "The implementation identification string for the
     * RADIUS authentication server software in use on the
     * system, for example; `FNS-2.1'"
     *
     */
    protected String RadiusAuthServIdent = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "RadiusAuthServTotalAccessChallenges".
     * The variable is identified by: "1.3.6.1.2.1.67.1.1.1.1.10".
     *
     * "The number of RADIUS Access-Challenge packets sent."
     *
     */
    protected Long RadiusAuthServTotalAccessChallenges = new Long(1);


    /**
     * Constructor for the "RadiusAuthServ" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public RadiusAuthServ(SnmpMib myMib) {
        RadiusAuthClientTable = new TableRadiusAuthClientTable (myMib);
    }


    /**
     * Constructor for the "RadiusAuthServ" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public RadiusAuthServ(SnmpMib myMib, MBeanServer server) {
        RadiusAuthClientTable = new TableRadiusAuthClientTable (myMib, server);
    }

    public RadiusAuthServ() {
	}


	/**
     * Getter for the "RadiusAuthServTotalAccessRejects" variable.
     */
    public Long getRadiusAuthServTotalAccessRejects() throws SnmpStatusException {
        return RadiusAuthServTotalAccessRejects;
    }

    /**
     * Getter for the "RadiusAuthServTotalAccessAccepts" variable.
     */
    public Long getRadiusAuthServTotalAccessAccepts() throws SnmpStatusException {
        return RadiusAuthServTotalAccessAccepts;
    }

    /**
     * Getter for the "RadiusAuthServTotalDupAccessRequests" variable.
     */
    public Long getRadiusAuthServTotalDupAccessRequests() throws SnmpStatusException {
        return RadiusAuthServTotalDupAccessRequests;
    }

    /**
     * Getter for the "RadiusAuthServTotalInvalidRequests" variable.
     */
    public Long getRadiusAuthServTotalInvalidRequests() throws SnmpStatusException {
        return RadiusAuthServTotalInvalidRequests;
    }

    /**
     * Access the "RadiusAuthClientTable" variable.
     */
    public TableRadiusAuthClientTable accessRadiusAuthClientTable() throws SnmpStatusException {
        return RadiusAuthClientTable;
    }

    /**
     * Access the "RadiusAuthClientTable" variable as a bean indexed property.
     */
    public RadiusAuthClientEntryMBean[] getRadiusAuthClientTable() throws SnmpStatusException {
        return RadiusAuthClientTable.getEntries();
    }

    /**
     * Getter for the "RadiusAuthServTotalUnknownTypes" variable.
     */
    public Long getRadiusAuthServTotalUnknownTypes() throws SnmpStatusException {
        return RadiusAuthServTotalUnknownTypes;
    }

    /**
     * Getter for the "RadiusAuthServTotalAccessRequests" variable.
     */
    public Long getRadiusAuthServTotalAccessRequests() throws SnmpStatusException {
        return RadiusAuthServTotalAccessRequests;
    }

    /**
     * Getter for the "RadiusAuthServConfigReset" variable.
     */
    public EnumRadiusAuthServConfigReset getRadiusAuthServConfigReset() throws SnmpStatusException {
        return RadiusAuthServConfigReset;
    }

    /**
     * Setter for the "RadiusAuthServConfigReset" variable.
     */
    public void setRadiusAuthServConfigReset(EnumRadiusAuthServConfigReset x) throws SnmpStatusException {
        RadiusAuthServConfigReset = x;
    }

    /**
     * Checker for the "RadiusAuthServConfigReset" variable.
     */
    public void checkRadiusAuthServConfigReset(EnumRadiusAuthServConfigReset x) throws SnmpStatusException {
        //
        // Add your own checking policy.
        //
    }

    /**
     * Getter for the "RadiusAuthServTotalPacketsDropped" variable.
     */
    public Long getRadiusAuthServTotalPacketsDropped() throws SnmpStatusException {
        return RadiusAuthServTotalPacketsDropped;
    }

    /**
     * Getter for the "RadiusAuthServResetTime" variable.
     */
    public Long getRadiusAuthServResetTime() throws SnmpStatusException {
        return RadiusAuthServResetTime;
    }

    /**
     * Getter for the "RadiusAuthServTotalBadAuthenticators" variable.
     */
    public Long getRadiusAuthServTotalBadAuthenticators() throws SnmpStatusException {
        return RadiusAuthServTotalBadAuthenticators;
    }

    /**
     * Getter for the "RadiusAuthServTotalMalformedAccessRequests" variable.
     */
    public Long getRadiusAuthServTotalMalformedAccessRequests() throws SnmpStatusException {
        return RadiusAuthServTotalMalformedAccessRequests;
    }

    /**
     * Getter for the "RadiusAuthServUpTime" variable.
     */
    public Long getRadiusAuthServUpTime() throws SnmpStatusException {
        return RadiusAuthServUpTime;
    }

    /**
     * Getter for the "RadiusAuthServIdent" variable.
     */
    public String getRadiusAuthServIdent() throws SnmpStatusException {
        return RadiusAuthServIdent;
    }

    /**
     * Getter for the "RadiusAuthServTotalAccessChallenges" variable.
     */
    public Long getRadiusAuthServTotalAccessChallenges() throws SnmpStatusException {
        return RadiusAuthServTotalAccessChallenges;
    }

}
