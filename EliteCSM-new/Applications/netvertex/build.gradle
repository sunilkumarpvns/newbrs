

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.3"
}

description = 'netvertex'
apply plugin: 'distribution'
apply plugin: 'groovy'
apply plugin: 'checkstyle'

def depPojects = ["core", "elitecommons", "corenetvertex", "diameterapi", "coreradius", "passwordutil", "exprlib", "license", "elitecommonsconfig"]


def releaseVersion = project.properties['release.version']
def releaseMinorVersion = project.properties['release.minor.version']
def svnRevision = project.properties['svn.rev']
def releaseName = project(":netvertex").name + "-${releaseVersion}.${releaseMinorVersion}";
def upgradeName = releaseName + "-upgrade-" + svnRevision  ;

ext {
    injectVersionInfo {
        packageName = "com.elitecore.netvertex"
        moduleName = "Netvertex"
        filepath = "src/com/elitecore/netvertex/Version.java"
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src']

        }
        resources {
            srcDirs = ['src/resources']
        }
    }

    e2e {
        java {
            srcDirs = ['e2etestsrc/reportgentool/src/main/java']
        }
        resources {
            srcDirs = ['e2etestsrc/reportgentool/src/main/resources']
        }
    }

    automationtools {
        java {
            srcDirs = ['e2etestsrc/automationtools/src/main/java']
        }
        resources {
            srcDirs = ['e2etestsrc/automationtools/src/main/resources']
        }
    }
    nvsamplersrc {
        java {
            srcDirs = ['e2etestsrc/nvsampler/src/main/java']
        }
    }

    test {
        java {
            srcDir 'testsrc'
            exclude 'resources/', '**/**groovy'
        }

        groovy {
            srcDir 'testsrc'
            exclude 'resources/'
            exclude "**/**java"
        }

        resources {
            srcDirs = ['testsrc/resources']
        }
    }
}

checkstyle {
    configFile file("${rootDir}/Build/netvertex/config/checkstyle/intellij-java-google-style.xml")
}
checkstyleMain {
    source ='src'
}
checkstyleE2e {
    source ='e2etestsrc/reportgentool/src/main/java'
}

checkstyleAutomationtools {
    source ='e2etestsrc/automationtools/src/main/java'
}

checkstyleNvsamplersrc {
    source ='e2etestsrc/nvsampler/src/main/java'
}
checkstyleTest {
    source ='testsrc'
}

task nvsamplerJar(type: Jar) {
    from sourceSets.nvsamplersrc.output
    baseName 'nvsampler'
}


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

task automationtoolsShadowJar(type: ShadowJar) {
    from sourceSets.automationtools.runtimeClasspath
    baseName 'automationtools'
}

task reportgentoolShadowJar(type: ShadowJar) {
    from sourceSets.e2e.runtimeClasspath
    baseName 'reportgentool'

    manifest {
        attributes(
                'Main-Class': 'ReadCSVFile'
        )
    }
}


distributions {
    main {
        baseName = releaseName

        contents {
            into('lib') {
                from jar
                from(project.configurations.runtime)

            }
            from("$projectDir") {
                include "bin/**", "system/**", "default/**", "dictionary/**"
            }
        }
    }

    upgradeWithLibs {
        baseName = upgradeName

        contents {
            into('lib') {
                from jar
                from(project.configurations.runtime)
            }
        }
        contents {
            from("$projectDir") {
                include "default/**"
            }

        }

    }

    upgradeWithoutLibs {
        baseName = upgradeName

        contents {
            into('lib') {
                from jar
                from(project.configurations.runtime) {

                    depPojects.each {
                        include it + ".jar"
                    }
                }
            }

            from(jar) {
                into('lib')
                include "**/"
            }

            from("$projectDir") {
                include "default/**"
            }
        }



    }
}

    upgradeWithoutLibsDistTar {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }

    upgradeWithLibsDistTar {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }

    distTar {
        extension = 'tar.gz'
        compression = Compression.GZIP
    }

/*task preInstallTar (type: Tar) {

    baseName = releaseName
    extension = 'tar.gz'
    compression = Compression.GZIP

    from(this.project.projectDir) {
        include 'bin/**', 'default/**', 'system/**'
    }

    into('lib') {
        from jar
        from(project.configurations.runtime)
    }
}*/

    jar {
        manifest {
            attributes(
                    'Main-Class': 'com.elitecore.netvertex.Version'
            )
        }
    }

    task fullsetUpTask(type: Tar) {

        from(project.parent.projectDir.path + "/Build/install.sh") {
            expand(projectName: 'netvertex', releaseVersion: releaseVersion, releaseMinorVersion: releaseMinorVersion)
        }

        from {
            project.buildDir.path + "/distributions/" + releaseName + ".tar.gz"

        }
/*        from (project.projectDir.path + "/docs/fullsetup"){
            include '/README.txt'
        }*/

        baseName = "Netvertex-V${releaseVersion}.${releaseMinorVersion}"
        destinationDir = file(project.buildDir.path)
        extension = 'tar.gz'
        compression = Compression.GZIP
        dependsOn distTar
    }

    task upgradeSetUpTask(type: Tar) {

        from(project.parent.projectDir.path + "/Build/upgrade.sh") {
            expand(projectName: 'netvertex', releaseVersion: releaseVersion, releaseMinorVersion: releaseMinorVersion, svnRevision: svnRevision)
        }

        from(this.buildDir.path + "/distributions/") {
            include "${releaseName}-upgrade-${svnRevision}.tar.gz"

        }

/*        from (project.projectDir.path + "/docs/upgrade"){
            include '/README.txt'
        }*/

        baseName = "Netvertex-V${releaseVersion}.${releaseMinorVersion}-upgrade-${svnRevision}"
        destinationDir = file(project.buildDir.path)
        extension = 'tar.gz'
        compression = Compression.GZIP
        dependsOn upgradeWithLibsDistTar
    }



    configurations {
        testCompile.exclude group: 'org.codehaus.groovy', module: 'groovy'
    }

    dependencies {

        runtime group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

        compile group: 'com.sun.mail', name: 'javax.mail', version: '1.5.6'


        compile group: 'org.apache.cxf', name: 'cxf-rt-frontend-jaxrs', version: '3.1.12'
        compile group: 'org.apache.cxf', name: 'cxf-rt-transports-http-jetty', version: '3.1.12'

        compile group: 'javax.mail', name: 'mail', version: '1.4.4'
        compile group: 'ojdbc6', name: 'ojdbc6', version: '11.0.2.0'


		compile group: 'com.googlecode.java-ipv6', name: 'java-ipv6', version: '0.16'
        testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
        testCompile group: 'org.apache.commons', name: 'commons-io', version: '1.3.2'
        testCompile group: 'com.h2database', name: 'h2', version: '1.4.196'
        testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'

        nvsamplersrcCompile(
                compileOnly(group: 'org.apache.jmeter', name: 'ApacheJMeter_java', version: '3.1'),
                compileOnly(group: 'org.apache.jmeter', name: 'ApacheJMeter_jdbc', version: '3.1'),
        )

        e2eCompile(
                // https://mvnrepository.com/artifact/org.apache.commons/commons-csv
                compile (group: 'org.apache.commons', name: 'commons-csv', version: '1.5'),
                // https://mvnrepository.com/artifact/com.google.code.gson/gson
                compile (group: 'com.google.code.gson', name: 'gson', version: '2.8.5'),

                compile(group: 'com.gurock', name: 'testrail', version: '1.0'),

                // https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple
                compile (group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'),


                // https://mvnrepository.com/artifact/com.j2html/j2html
                compile (group: 'com.j2html', name: 'j2html', version: '1.3.0'),


                compileOnly(group: 'commons-io', name: 'commons-io', version: '2.6') //Add dependencies that are required to compile
        )

        automationtoolsCompile (
                compile (group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.12.1'),
                compile (group: 'com.google.code.gson', name: 'gson', version: '2.8.5'),
        )

        testCompile fileTree(dir: '../../EliteLibraries/corenetvertex/lib/voltdb', include: ['*.jar'])

        // https://mvnrepository.com/artifact/cglib/cglib-nodep -- requied for spock
        testCompile group: 'cglib', name: 'cglib-nodep', version: '3.2.0'

        depPojects.each {
            compile project(":" + it)
            testCompile files(project(":" + it).sourceSets.test.output)
        }
    }
