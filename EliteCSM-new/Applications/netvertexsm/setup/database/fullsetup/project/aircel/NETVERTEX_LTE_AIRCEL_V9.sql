-- NETVERTEX-1069 Reset the Usage on Billing Date and Change of Billing Date for Postpaid Subscribers
-- Changes for Table - TBLMBILLINGCYCLE
CREATE TABLESPACE TBS_TBLMBILLINGCYCLE01 DATAFILE '&DATAFILE' SIZE 250M AUTOEXTEND ON NEXT 25M;

CREATE TABLE TBLMBILLINGCYCLE 
   (	BILLINGCYCLEID NUMBER(20,0), 
	SUBSCRIBERIDENTITY VARCHAR2(255 BYTE) NOT NULL ENABLE, 
	BILLINGCYCLEDATE TIMESTAMP (6), 
	CREATEDATE TIMESTAMP (6), 
	STATUS VARCHAR2(1 BYTE), 
	SERVERINSTANCEID VARCHAR2(8 BYTE), 
	PACKAGENAME VARCHAR2(256 BYTE), 
	RESETREASON VARCHAR2(256 BYTE), 
	PARAM1 VARCHAR2(256 BYTE), 
	PARAM2 VARCHAR2(256 BYTE), 
	PARAM3 VARCHAR2(256 BYTE), 
	 CONSTRAINT PK_MBILLINGCYCLE PRIMARY KEY (BILLINGCYCLEID)
   ) TABLESPACE TBS_TBLMBILLINGCYCLE01 INITRANS 200 NOLOGGING;   

CREATE INDEX IDX_BILLINGCYCLEDATE ON TBLMBILLINGCYCLE(BILLINGCYCLEDATE) INITRANS 200 NOLOGGING;

ALTER INDEX PK_MBILLINGCYCLE INITRANS 200 NOLOGGING;

ALTER SEQUENCE SEQ_MBILLINGCYCLE CACHE 1000;

create or replace PACKAGE PKG_PCRF_LTE_TRN
AS
  /*  ELITECSM NETVERTEX ADDON MODULE
  ELITECORE TECHNOLOGIES PVT. LTD. */
  PROCEDURE SP_TRAN_BILLINGCYCLE;
  PROCEDURE SP_FUPRESET_MONTHLY;
    
END PKG_PCRF_LTE_TRN;
/

create or replace PACKAGE BODY PKG_PCRF_LTE_TRN
AS
  /*  ELITECSM NETVERTEX ADDON MODULE
  ELITECORE TECHNOLOGIES PVT. LTD. */
PROCEDURE SP_TRAN_BILLINGCYCLE
AS
  V_PKG TBLNETVERTEXCUSTOMER.SUBSCRIBERPACKAGE%TYPE;
BEGIN
  /*  ELITECORE TECHNOLOGIES PVT. LTD. */
  FOR REC IN
  (SELECT BILLINGCYCLEID,
    SUBSCRIBERIDENTITY,
    PARAM1
  FROM TBLMBILLINGCYCLE
  WHERE BILLINGCYCLEDATE < SYSTIMESTAMP
  AND ROWNUM            <= 10000
  )
  LOOP
    IF REC.PARAM1 IS NULL THEN
      SELECT SUBSCRIBERPACKAGE
      INTO V_PKG
      FROM TBLNETVERTEXCUSTOMER C
      WHERE C.SUBSCRIBERIDENTITY = REC.SUBSCRIBERIDENTITY;
      FOR RC IN
      (SELECT U.USERID,
        U.MONITORINGKEY,
        U.USAGETIME,
        U.UPLOADOCTETS,
        U.DOWNLOADOCTETS,
        U.TOTALOCTETS,
        U.AGGREGATEKEY,
        U.LASTUPDATETIME,
        U.METERINGLEVEL,
        U.CUI
      FROM TBLMSESSIONUSAGESUMMARY U
      WHERE U.USERID     = REC.SUBSCRIBERIDENTITY
      AND U.AGGREGATEKEY = V_PKG
        ||'-BILLING_CYCLE'
      )
      LOOP
        INSERT
        INTO TBLMSESSIONUSAGECDR
          (
            CREATE_DATE,
            USERID,
            MONITORINGKEY,
            USAGETIME,
            UPLOADOCTETS,
            DOWNLOADOCTETS,
            TOTALOCTETS,
            AGGREGATEKEY,
            LASTUPDATETIME,
            METERINGLEVEL,
            CUI
          )
          VALUES
          (
            SYSDATE,
            RC.USERID,
            RC.MONITORINGKEY,
            RC.USAGETIME,
            RC.UPLOADOCTETS,
            RC.DOWNLOADOCTETS,
            RC.TOTALOCTETS,
            RC.AGGREGATEKEY,
            RC.LASTUPDATETIME,
            RC.METERINGLEVEL,
            RC.CUI
          );
        UPDATE TBLMSESSIONUSAGESUMMARY I
        SET I.TOTALOCTETS = 0,
          I.USAGETIME     =0
        WHERE I.USERID    = RC.USERID
        AND I.AGGREGATEKEY=RC.AGGREGATEKEY;
      END LOOP;
    ELSIF REC.PARAM1 IS NOT NULL THEN
      V_PKG          := REC.PARAM1;
      FOR RC IN
      (SELECT U.USERID,
        U.MONITORINGKEY,
        U.USAGETIME,
        U.UPLOADOCTETS,
        U.DOWNLOADOCTETS,
        U.TOTALOCTETS,
        U.AGGREGATEKEY,
        U.LASTUPDATETIME,
        U.METERINGLEVEL,
        U.CUI
      FROM TBLMSESSIONUSAGESUMMARY U
      WHERE U.USERID     = REC.SUBSCRIBERIDENTITY
      AND U.AGGREGATEKEY = V_PKG
        ||'-BILLING_CYCLE'
      )
      LOOP
        INSERT
        INTO TBLMSESSIONUSAGECDR
          (
            CREATE_DATE,
            USERID,
            MONITORINGKEY,
            USAGETIME,
            UPLOADOCTETS,
            DOWNLOADOCTETS,
            TOTALOCTETS,
            AGGREGATEKEY,
            LASTUPDATETIME,
            METERINGLEVEL,
            CUI
          )
          VALUES
          (
            SYSDATE,
            RC.USERID,
            RC.MONITORINGKEY,
            RC.USAGETIME,
            RC.UPLOADOCTETS,
            RC.DOWNLOADOCTETS,
            RC.TOTALOCTETS,
            RC.AGGREGATEKEY,
            RC.LASTUPDATETIME,
            RC.METERINGLEVEL,
            RC.CUI
          );
        DELETE TBLMSESSIONUSAGESUMMARY I
        WHERE I.USERID    = RC.USERID
        AND I.AGGREGATEKEY=RC.AGGREGATEKEY;
      END LOOP;
    END IF;
    DELETE
    FROM TBLMBILLINGCYCLE B
    WHERE B.BILLINGCYCLEID = REC.BILLINGCYCLEID;
    COMMIT;
  END LOOP;
END;
PROCEDURE SP_FUPRESET_MONTHLY
AS
  SYS_DATE       VARCHAR2(1000);
  LAST_DATE_TEMP VARCHAR2(1000);
BEGIN
  SYS_DATE       := TO_CHAR(SYSDATE+1, 'DD') ;
  LAST_DATE_TEMP := TO_CHAR (LAST_DAY (SYSDATE), 'DD') ;
  IF (SYS_DATE    = LAST_DATE_TEMP) THEN
    FOR REC IN
    (SELECT R.SUBSCRIBERIDENTITY,
      R.BILLINGDATE,
      R.SUBSCRIBERPACKAGE
    FROM TBLNETVERTEXCUSTOMER R
    WHERE UPPER(R.CUSTOMERTYPE) ='POSTPAID'
    AND R.BILLINGDATE           > = SYS_DATE
    )
    LOOP
      --Code Enhancement Dt 01-AUG-2014
      INSERT
      INTO TBLMBILLINGCYCLE
        (
          BILLINGCYCLEID ,
          SUBSCRIBERIDENTITY ,
          BILLINGCYCLEDATE ,
          CREATEDATE
        )
        VALUES
        (
          SEQ_MBILLINGCYCLE.NEXTVAL ,
          REC.SUBSCRIBERIDENTITY ,
          --TO_CHAR(TRUNC(SYSDATE+1) + 30/1440,'DD/MM/YYYY HH24:MI:SS'),
          TO_TIMESTAMP(TRUNC(SYSDATE + 1),'DD/MM/RRRR HH:MI:SS') + numtodsinterval(30,'MINUTE'),
          SYSDATE
        );
    END LOOP;
    COMMIT;
  ELSE
    FOR REC IN
    (SELECT R.SUBSCRIBERIDENTITY,
        R.BILLINGDATE,
        R.SUBSCRIBERPACKAGE
      FROM TBLNETVERTEXCUSTOMER R
      WHERE UPPER(R.CUSTOMERTYPE) ='POSTPAID'
      AND R.BILLINGDATE           = SYS_DATE
    )
    LOOP
      INSERT
      INTO TBLMBILLINGCYCLE
        (
          BILLINGCYCLEID ,
          SUBSCRIBERIDENTITY ,
          BILLINGCYCLEDATE ,
          CREATEDATE
        )
        VALUES
        (
          SEQ_MBILLINGCYCLE.NEXTVAL ,
          REC.SUBSCRIBERIDENTITY ,
          --TO_CHAR(TRUNC(SYSDATE+1) + 30/1440,'DD/MM/YYYY HH24:MI:SS'),
          TO_TIMESTAMP(TRUNC(SYSDATE + 1),'DD/MM/RRRR HH:MI:SS') + numtodsinterval(30,'MINUTE'),
          SYSDATE
        );
    END LOOP;
    COMMIT;
  END IF;
END;

END PKG_PCRF_LTE_TRN;
/

drop trigger addon_cust;

CREATE OR REPLACE TRIGGER TRG_ADDON_CUST_DEL BEFORE
  DELETE ON TBLNETVERTEXCUSTOMER FOR EACH ROW BEGIN
  
  /*
  UPDATE TBLMADDONSUBSCRIBERREL
  SET STATUS        =5
  WHERE SUBSCRIBERID=:OLD.SUBSCRIBERIDENTITY;
  */
  
  --Code Changed -- 04/08/2014 6:00 PM
  DELETE FROM TBLMADDONSUBSCRIBERREL R WHERE R.SUBSCRIBERID=:OLD.SUBSCRIBERIDENTITY;
  
  FOR RC IN (SELECT USERID,
        MONITORINGKEY,
        USAGETIME,
        UPLOADOCTETS,
        DOWNLOADOCTETS,
        TOTALOCTETS,
        AGGREGATEKEY,
        LASTUPDATETIME,
        METERINGLEVEL,
        CUI FROM TBLMSESSIONUSAGESUMMARY  WHERE USERID= :OLD.SUBSCRIBERIDENTITY)
  LOOP
  
  INSERT
      INTO TBLMSESSIONUSAGECDR
        (
          CREATE_DATE,
          USERID,
          MONITORINGKEY,
          USAGETIME,
          UPLOADOCTETS,
          DOWNLOADOCTETS,
          TOTALOCTETS,
          AGGREGATEKEY,
          LASTUPDATETIME,
          METERINGLEVEL,
          CUI
        )
        VALUES
        (
          SYSDATE,
          RC.USERID,
          RC.MONITORINGKEY,
          RC.USAGETIME,
          RC.UPLOADOCTETS,
          RC.DOWNLOADOCTETS,
          RC.TOTALOCTETS,
          RC.AGGREGATEKEY,
          RC.LASTUPDATETIME,
          RC.METERINGLEVEL,
          RC.CUI
        );
		
      DELETE
      FROM TBLMSESSIONUSAGESUMMARY U
      WHERE U.USERID     = RC.USERID
      AND U.AGGREGATEKEY = RC.AGGREGATEKEY;
  
  END LOOP;
  
END;
/

---Scheduler Code

 BEGIN
  DBMS_SCHEDULER.CREATE_JOB (
     JOB_NAME           =>  'JOB_LTE_SP_FUPRESET_MONTHLY',
     JOB_TYPE           =>  'STORED_PROCEDURE',
     JOB_ACTION         =>  'PKG_PCRF_LTE_TRN.SP_FUPRESET_MONTHLY',
     START_DATE         =>  SYSTIMESTAMP,
     REPEAT_INTERVAL    =>  'FREQ=DAILY;BYHOUR=23;BYMINUTE=14;',   
     END_DATE           =>   NULL,
     ENABLED           =>   TRUE,
     COMMENTS           =>  'JOB DEFINED FOR JOB_LTE_SP_FUPRESET_MONTHLY...');
  END;
  /

 BEGIN
   -- JOB DEFINED ENTIRELY BY THE CREATE JOB PROCEDURE.
   DBMS_SCHEDULER.CREATE_JOB (
    JOB_NAME => 'JOB_LTE_SP_TRAN_BILLINGCYCLE',
    JOB_TYPE => 'PLSQL_BLOCK',
    JOB_ACTION => 'begin PKG_PCRF_LTE_TRN.SP_TRAN_BILLINGCYCLE(); end;',
    START_DATE => SYSTIMESTAMP,
    REPEAT_INTERVAL => 'FREQ=MINUTELY;INTERVAL=6;',
    END_DATE => NULL,
    ENABLED => TRUE,
    COMMENTS => 'JOB DEFINED FOR JOB_LTE_SP_TRAN_BILLINGCYCLE');
  END;
/  

