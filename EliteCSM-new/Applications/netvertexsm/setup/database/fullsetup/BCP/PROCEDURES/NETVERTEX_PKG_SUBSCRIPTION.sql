spool NETVERTEX_PKG_SUBSCRIPTION.log

--create tablespaces for NETVERTEX_PROCEDURE_TBLMADDONSUBSCRIBERREL
DEFINE db_datafile="&&dbf_storage_directory"
prompt &db_datafile

CREATE TABLESPACE tbs_SUBSCRIPTION_EXPIRED01   DATAFILE '&&db_datafile/tbs_SUBSCRIPTION_EXPIRED01.dbf' size 100M AUTOEXTEND ON NEXT 25M; 
CREATE TABLESPACE tbs_SUBSCRIPTION_RESET01   DATAFILE '&&db_datafile/tbs_SUBSCRIPTION_RESET01.dbf' size 100M AUTOEXTEND ON NEXT 25M; 

connect &&username/&&password@&&NET_STR

CREATE TABLE TBLM_SUBSCRIPTION_EXPIRED
   (
	SUBSCRIPTION_ID      VARCHAR(36),
	ADDON_ID             VARCHAR(36) NOT NULL,
	SUBSCRIBER_ID        VARCHAR(256) NOT NULL,
	CONSTRAINT PK_ADDONEXPIRED PRIMARY KEY(SUBSCRIPTION_ID))
	INITRANS 25 NOLOGGING TABLESPACE tbs_SUBSCRIPTION_EXPIRED01;	

CREATE TABLE TBLM_SUBSCRIPTION_RESET
   (
	SUBSCRIPTION_ID     VARCHAR(36),
	ADDON_ID            VARCHAR(36) NOT NULL,
	SUBSCRIBER_ID       VARCHAR(256) NOT NULL,
	ENDTIME             TIMESTAMP,
	USAGERESETDATE      TIMESTAMP,
	CONSTRAINT PK_MADDONUSAGERESET PRIMARY KEY(SUBSCRIPTION_ID))
	INITRANS 25 NOLOGGING TABLESPACE tbs_SUBSCRIPTION_RESET01;
	
-- Addon Processing Logic
create or replace PACKAGE PKG_PCRF_ADDON_TRN AS
      /*  ELITECSM NETVERTEX ADDON MODULE
          ELITECORE TECHNOLOGIES PVT. LTD. */
PROCEDURE SP_ADDON_ENDING_POFF;
PROCEDURE SP_LOAD_ADDONEXPIRED;
PROCEDURE SP_ADDON_USAGE_RESET;
PROCEDURE SP_LOAD_ADDONUSAGERESET;
END PKG_PCRF_ADDON_TRN;
/

create or replace PACKAGE BODY PKG_PCRF_ADDON_TRN
AS -- BODY
  /*  ELITECSM NETVERTEX ADDON MODULE
  ELITECORE TECHNOLOGIES PVT. LTD. */
PROCEDURE SP_ADDON_ENDING_POFF
AS
  CNT       NUMBER := 0;
  SUC       NUMBER := 0;
  STIME     NUMBER := DBMS_UTILITY.GET_TIME;
  ETIME     NUMBER;
  TME_TAKEN NUMBER;
  INST      NUMBER := DBMS_UTILITY.CURRENT_INSTANCE;
  T_CNT     NUMBER := 1;
  V_ADDON_NM TBLM_PACKAGE.NAME%TYPE;
BEGIN
  /*
  ON ADDON EXPIRY OR UNSUBCRIPTION
  1) DELETE ADDON SUBSCRIPTION
  2) INSERT USAGE IN TBLMSESSIONUSAGECDR
  3) DELETE USAGE FROM TBLMSESSIONUSAGESUMMERY
  JIRA : NETVERTEX-2028
  */
  FOR REC IN
  (SELECT * FROM TBLM_SUBSCRIPTION_EXPIRED WHERE ROWNUM < 5000
  )
  LOOP
    CNT := CNT + 1;
    DELETE
    FROM TBLM_SUBSCRIPTION A
    WHERE A.SUBSCRIPTION_ID = REC.SUBSCRIPTION_ID;
    FOR RC IN
    (SELECT 
      U.ID,
      U.SUBSCRIBER_ID,
      U.PACKAGE_ID,
      U.SUBSCRIPTION_ID,
      U.QUOTA_PROFILE_ID,
      U.SERVICE_ID,
      U.DAILY_TOTAL,
      U.DAILY_UPLOAD,
      U.DAILY_DOWNLOAD,
      U.DAILY_TIME,
      U.WEEKLY_TOTAL,
      U.WEEKLY_UPLOAD,
      U.WEEKLY_DOWNLOAD,
      U.WEEKLY_TIME,
      U.BILLING_CYCLE_TOTAL,
      U.BILLING_CYCLE_UPLOAD,
      U.BILLING_CYCLE_DOWNLOAD,
      U.BILLING_CYCLE_TIME,
      U.CUSTOM_TOTAL,
      U.CUSTOM_UPLOAD,
      U.CUSTOM_DOWNLOAD,
      U.CUSTOM_TIME,
      U.DAILY_RESET_TIME,
      U.WEEKLY_RESET_TIME,
      U.CUSTOM_RESET_TIME,
      U.BILLING_CYCLE_RESET_TIME,
      U.LAST_UPDATE_TIME
    FROM TBLM_USAGE U
    WHERE U.SUBSCRIBER_ID =REC.SUBSCRIBER_ID
    AND U.SUBSCRIPTION_ID =REC.SUBSCRIPTION_ID
    )
    LOOP
      INSERT
      INTO TBLM_USAGE_HISTORY
        (
          CREATE_DATE,
          ID,
          SUBSCRIBER_ID,
          PACKAGE_ID,
          SUBSCRIPTION_ID,
          QUOTA_PROFILE_ID,
          SERVICE_ID,
          DAILY_TOTAL,
          DAILY_UPLOAD,
          DAILY_DOWNLOAD,
          DAILY_TIME,
          WEEKLY_TOTAL,
          WEEKLY_UPLOAD,
          WEEKLY_DOWNLOAD,
          WEEKLY_TIME,
          BILLING_CYCLE_TOTAL,
          BILLING_CYCLE_UPLOAD,
          BILLING_CYCLE_DOWNLOAD,
          BILLING_CYCLE_TIME,
          CUSTOM_TOTAL,
          CUSTOM_UPLOAD,
          CUSTOM_DOWNLOAD,
          CUSTOM_TIME,
          DAILY_RESET_TIME,
          WEEKLY_RESET_TIME,
          CUSTOM_RESET_TIME,
          BILLING_CYCLE_RESET_TIME,
          LAST_UPDATE_TIME
        )
        VALUES
        (
          SYSDATE,
          RC.ID,
          RC.SUBSCRIBER_ID,
          RC.PACKAGE_ID,
          RC.SUBSCRIPTION_ID,
          RC.QUOTA_PROFILE_ID,
          RC.SERVICE_ID,
          RC.DAILY_TOTAL,
          RC.DAILY_UPLOAD,
          RC.DAILY_DOWNLOAD,
          RC.DAILY_TIME,
          RC.WEEKLY_TOTAL,
          RC.WEEKLY_UPLOAD,
          RC.WEEKLY_DOWNLOAD,
          RC.WEEKLY_TIME,
          RC.BILLING_CYCLE_TOTAL,
          RC.BILLING_CYCLE_UPLOAD,
          RC.BILLING_CYCLE_DOWNLOAD,
          RC.BILLING_CYCLE_TIME,
          RC.CUSTOM_TOTAL,
          RC.CUSTOM_UPLOAD,
          RC.CUSTOM_DOWNLOAD,
          RC.CUSTOM_TIME,
          RC.DAILY_RESET_TIME,
          RC.WEEKLY_RESET_TIME,
          RC.CUSTOM_RESET_TIME,
          RC.BILLING_CYCLE_RESET_TIME,
          RC.LAST_UPDATE_TIME
        );
      DELETE
      FROM TBLM_USAGE U
      WHERE U.SUBSCRIBER_ID = RC.SUBSCRIBER_ID
      AND U.SUBSCRIPTION_ID = RC.SUBSCRIPTION_ID;
    END LOOP;
    DELETE
    FROM TBLM_SUBSCRIPTION_EXPIRED E
    WHERE E.SUBSCRIPTION_ID = REC.SUBSCRIPTION_ID;
    SUC := SUC + SQL%ROWCOUNT;
    COMMIT;
  END LOOP;
  ETIME := DBMS_UTILITY.GET_TIME;
  TME_TAKEN := ROUND((ETIME-STIME)/100,1);
  PKG_PCRF_SCHEDULER_KPI.SP_SCHEDULER_GENERAL(CNT,SUC,INST,'JOB_SP_ADDON_ENDING_POFF',TME_TAKEN,T_CNT);
END;
PROCEDURE SP_LOAD_ADDONEXPIRED
AS
  CNT       NUMBER := 0;
  SUC       NUMBER := 0;
  STIME     NUMBER := DBMS_UTILITY.GET_TIME;
  ETIME     NUMBER;
  TME_TAKEN NUMBER;
  INST      NUMBER := DBMS_UTILITY.CURRENT_INSTANCE;
  T_CNT     NUMBER := 1;
BEGIN
  /* DATA PROCESS ONCE A DAY 
  JIRA : NETVERTEX-2028 */
  FOR REC IN
  (SELECT SUBSCRIPTION_ID,
    ADDON_ID,
    SUBSCRIBER_ID
  FROM TBLM_SUBSCRIPTION
  WHERE END_TIME < SYSDATE
  OR STATUS     IN (5,7)
  )
  LOOP
    CNT := CNT +1;
    INSERT
    INTO TBLM_SUBSCRIPTION_EXPIRED
      (
        SUBSCRIPTION_ID,
        ADDON_ID,
        SUBSCRIBER_ID
      )
      VALUES
      (
        REC.SUBSCRIPTION_ID,
        REC.ADDON_ID,
        REC.SUBSCRIBER_ID
      );
    UPDATE TBLM_SUBSCRIPTION R
    SET R.SERVER_INSTANCE_ID = 9999
    WHERE R.SUBSCRIPTION_ID  = REC.SUBSCRIPTION_ID;
    SUC                     := SUC + SQL%ROWCOUNT;
  END LOOP;
  COMMIT;
  ETIME     := DBMS_UTILITY.GET_TIME;
  TME_TAKEN := ROUND((ETIME-STIME)/100,1);
  PKG_PCRF_SCHEDULER_KPI.SP_SCHEDULER_GENERAL(CNT,SUC,INST,'JOB_SP_LOAD_ADDONEXPIRED',TME_TAKEN,T_CNT);
END;
PROCEDURE SP_ADDON_USAGE_RESET
AS
  CNT       NUMBER := 0;
  SUC       NUMBER := 0;
  STIME     NUMBER := DBMS_UTILITY.GET_TIME;
  ETIME     NUMBER;
  TME_TAKEN NUMBER;
  INST      NUMBER := DBMS_UTILITY.CURRENT_INSTANCE;
  T_CNT     NUMBER := 1;
  V_ADDON_NM TBLM_PACKAGE.NAME%TYPE;
  V_USAGERESETINTERVAL TBLM_PACKAGE.USAGE_RESET_INTERVAL%TYPE;
  V_VALIDITYPERIODUNIT TBLM_PACKAGE.VALIDITY_PERIOD_UNIT%TYPE;
  V_RESETDATE TIMESTAMP;
BEGIN
  /*
  ON ADDON USAGE RESET
  1) UPDATE USAGERESETDATE IN TBLM_SUBSCRIPTION
  2) INSERT USAGE IN TBLMSESSIONUSAGECDR
  3) RESET USAGE IN TBLMSESSIONUSAGESUMMERY

  JIRA : NETVERTEX-2028
  */
  FOR REC IN
  (SELECT * FROM TBLM_SUBSCRIPTION_RESET WHERE ROWNUM < 5000
  )
  LOOP
  CNT := CNT + 1;
    BEGIN
      SELECT NAME,
        USAGE_RESET_INTERVAL,
        (
        CASE VALIDITY_PERIOD_UNIT
          WHEN 'MIDNIGHT'
          THEN 'DAY'
          WHEN 'DAY'
          THEN 'DAY'
          WHEN 'HOUR'
          THEN 'HOUR'
          WHEN 'MINUTE'
          THEN 'MINUTE'
        END)
      INTO V_ADDON_NM,
        V_USAGERESETINTERVAL,
        V_VALIDITYPERIODUNIT
      FROM TBLM_PACKAGE
      WHERE ID=REC.ADDON_ID
	  AND NVL(USAGE_RESET_INTERVAL,0) > 0;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
      V_RESETDATE := REC.ENDTIME;
      UPDATE TBLM_SUBSCRIPTION R
      SET R.USAGE_RESET_DATE  = V_RESETDATE,
        R.LAST_UPDATE_TIME    = CURRENT_TIMESTAMP
      WHERE R.SUBSCRIPTION_ID = REC.SUBSCRIPTION_ID;

      COMMIT;
      CONTINUE;
    END;
    /* ADD LOOP DT: 01-OCT-2014 */
    LOOP
      EXECUTE IMMEDIATE 'SELECT :1 + INTERVAL '''|| V_USAGERESETINTERVAL ||'''' || V_VALIDITYPERIODUNIT || ' FROM DUAL' INTO V_RESETDATE USING REC.USAGERESETDATE;
      EXIT
    WHEN REC.USAGERESETDATE <= SYSDATE;
    END LOOP;
    --DBMS_OUTPUT.PUT_LINE('ADDON NAME:-'|| V_ADDON_NM ||' | ' ||V_RESETDATE);
    IF REC.ENDTIME < V_RESETDATE THEN
      V_RESETDATE := REC.ENDTIME;
    END IF;
    UPDATE TBLM_SUBSCRIPTION R
    SET R.USAGE_RESET_DATE  = V_RESETDATE,
      R.LAST_UPDATE_TIME    = CURRENT_TIMESTAMP
    WHERE R.SUBSCRIPTION_ID = REC.SUBSCRIPTION_ID;
    FOR RC IN
    (SELECT 
      U.ID,
      U.SUBSCRIBER_ID,
      U.PACKAGE_ID,
      U.SUBSCRIPTION_ID,
      U.QUOTA_PROFILE_ID,
      U.SERVICE_ID,
      U.DAILY_TOTAL,
      U.DAILY_UPLOAD,
      U.DAILY_DOWNLOAD,
      U.DAILY_TIME,
      U.WEEKLY_TOTAL,
      U.WEEKLY_UPLOAD,
      U.WEEKLY_DOWNLOAD,
      U.WEEKLY_TIME,
      U.BILLING_CYCLE_TOTAL,
      U.BILLING_CYCLE_UPLOAD,
      U.BILLING_CYCLE_DOWNLOAD,
      U.BILLING_CYCLE_TIME,
      U.CUSTOM_TOTAL,
      U.CUSTOM_UPLOAD,
      U.CUSTOM_DOWNLOAD,
      U.CUSTOM_TIME,
      U.DAILY_RESET_TIME,
      U.WEEKLY_RESET_TIME,
      U.CUSTOM_RESET_TIME,
      U.BILLING_CYCLE_RESET_TIME,
      U.LAST_UPDATE_TIME
    FROM TBLM_USAGE U
    WHERE U.SUBSCRIBER_ID     =REC.SUBSCRIBER_ID
    AND U.SUBSCRIPTION_ID     =REC.SUBSCRIPTION_ID
    AND (U.DAILY_TOTAL       != 0
    OR U.DAILY_TIME          != 0
    OR U.WEEKLY_TOTAL        != 0
    OR U.WEEKLY_TIME         != 0
    OR U.BILLING_CYCLE_TOTAL != 0
    OR U.BILLING_CYCLE_TIME  != 0
    OR U.CUSTOM_TOTAL        != 0
    OR U.CUSTOM_TIME         != 0 )
    )
    /*
    AND (TOTALOCTETS!=0
    OR USAGETIME!    =0)
    */
    LOOP
      INSERT
      INTO TBLM_USAGE_HISTORY
        (
          CREATE_DATE,
          ID,
          SUBSCRIBER_ID,
          PACKAGE_ID,
          SUBSCRIPTION_ID,
          QUOTA_PROFILE_ID,
          SERVICE_ID,
          DAILY_TOTAL,
          DAILY_UPLOAD,
          DAILY_DOWNLOAD,
          DAILY_TIME,
          WEEKLY_TOTAL,
          WEEKLY_UPLOAD,
          WEEKLY_DOWNLOAD,
          WEEKLY_TIME,
          BILLING_CYCLE_TOTAL,
          BILLING_CYCLE_UPLOAD,
          BILLING_CYCLE_DOWNLOAD,
          BILLING_CYCLE_TIME,
          CUSTOM_TOTAL,
          CUSTOM_UPLOAD,
          CUSTOM_DOWNLOAD,
          CUSTOM_TIME,
          DAILY_RESET_TIME,
          WEEKLY_RESET_TIME,
          CUSTOM_RESET_TIME,
          BILLING_CYCLE_RESET_TIME,
          LAST_UPDATE_TIME
        )
        VALUES
        (
          SYSDATE,
          RC.ID,
          RC.SUBSCRIBER_ID,
          RC.PACKAGE_ID,
          RC.SUBSCRIPTION_ID,
          RC.QUOTA_PROFILE_ID,
          RC.SERVICE_ID,
          RC.DAILY_TOTAL,
          RC.DAILY_UPLOAD,
          RC.DAILY_DOWNLOAD,
          RC.DAILY_TIME,
          RC.WEEKLY_TOTAL,
          RC.WEEKLY_UPLOAD,
          RC.WEEKLY_DOWNLOAD,
          RC.WEEKLY_TIME,
          RC.BILLING_CYCLE_TOTAL,
          RC.BILLING_CYCLE_UPLOAD,
          RC.BILLING_CYCLE_DOWNLOAD,
          RC.BILLING_CYCLE_TIME,
          RC.CUSTOM_TOTAL,
          RC.CUSTOM_UPLOAD,
          RC.CUSTOM_DOWNLOAD,
          RC.CUSTOM_TIME,
          RC.DAILY_RESET_TIME,
          RC.WEEKLY_RESET_TIME,
          RC.CUSTOM_RESET_TIME,
          RC.BILLING_CYCLE_RESET_TIME,
          RC.LAST_UPDATE_TIME
        );
      UPDATE TBLM_USAGE U
      SET U.DAILY_TOTAL          = 0,
        U.DAILY_UPLOAD           = 0,
        U.DAILY_DOWNLOAD         = 0,
        U.DAILY_TIME             = 0,
        U.WEEKLY_TOTAL           = 0,
        U.WEEKLY_UPLOAD          = 0,
        U.WEEKLY_DOWNLOAD        = 0,
        U.WEEKLY_TIME            = 0,
        U.BILLING_CYCLE_TOTAL    = 0,
        U.BILLING_CYCLE_UPLOAD   = 0,
        U.BILLING_CYCLE_DOWNLOAD = 0,
        U.BILLING_CYCLE_TIME     = 0,
        U.CUSTOM_TOTAL           = 0,
        U.CUSTOM_UPLOAD          = 0,
        U.CUSTOM_DOWNLOAD        = 0,
        U.LAST_UPDATE_TIME       =CURRENT_TIMESTAMP
      WHERE U.SUBSCRIBER_ID      = RC.SUBSCRIBER_ID
      AND U.SUBSCRIPTION_ID      = RC.SUBSCRIPTION_ID;
    END LOOP;
    DELETE
    FROM TBLM_SUBSCRIPTION_RESET U
    WHERE U.SUBSCRIPTION_ID = REC.SUBSCRIPTION_ID;
    SUC                    := SUC + SQL%ROWCOUNT;
    COMMIT;
  END LOOP;
  ETIME     := DBMS_UTILITY.GET_TIME;
  TME_TAKEN := ROUND((ETIME-STIME)/100,1);
  PKG_PCRF_SCHEDULER_KPI.SP_SCHEDULER_GENERAL(CNT,SUC,INST,'JOB_SP_ADDON_USAGE_RESET',TME_TAKEN,T_CNT);
END;
PROCEDURE SP_LOAD_ADDONUSAGERESET
AS
  CNT       NUMBER := 0;
  SUC       NUMBER := 0;
  STIME     NUMBER := DBMS_UTILITY.GET_TIME;
  ETIME     NUMBER;
  TME_TAKEN NUMBER;
  INST      NUMBER := DBMS_UTILITY.CURRENT_INSTANCE;
  T_CNT     NUMBER := 1;
BEGIN
  /* DATA PROCESS ONCE A DAY 

  JIRA : NETVERTEX-2028 */
  FOR REC IN
  (SELECT U.SUBSCRIBER_ID,
    U.ADDON_ID,
    U.SUBSCRIPTION_ID,
    U.END_TIME,
    U.USAGE_RESET_DATE
  FROM TBLM_SUBSCRIPTION U
  WHERE U.USAGE_RESET_DATE <= SYSDATE
  AND U.USAGE_RESET_DATE    < U.END_TIME
  )
  LOOP
  CNT := CNT + 1;
    INSERT
    INTO TBLM_SUBSCRIPTION_RESET
      (
        SUBSCRIPTION_ID,
        ADDON_ID,
        SUBSCRIBER_ID,
        ENDTIME,
        USAGERESETDATE
      )
      VALUES
      (
        REC.SUBSCRIPTION_ID,
        REC.ADDON_ID,
        REC.SUBSCRIBER_ID,
        REC.END_TIME,
        REC.USAGE_RESET_DATE
      );
    SUC := SUC + SQL%ROWCOUNT;
  END LOOP;
  COMMIT;
  ETIME     := DBMS_UTILITY.GET_TIME;
  TME_TAKEN := ROUND((ETIME-STIME)/100,1);
  PKG_PCRF_SCHEDULER_KPI.SP_SCHEDULER_GENERAL(CNT,SUC,INST,'JOB_SP_LOAD_ADDONUSAGERESET',TME_TAKEN,T_CNT);
END;
END PKG_PCRF_ADDON_TRN;
/
-- Schedule the Database JOB to Addon Process

---Changed Time 
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   JOB_NAME           =>  'JOB_SP_LOAD_ADDONEXPIRED',
   JOB_TYPE           =>  'STORED_PROCEDURE',
   JOB_ACTION         =>  'PKG_PCRF_ADDON_TRN.SP_LOAD_ADDONEXPIRED',
   START_DATE         =>  SYSTIMESTAMP,
   REPEAT_INTERVAL    =>  'FREQ=DAILY; BYHOUR=03; BYMINUTE=1;',   
   END_DATE           =>   NULL,
    ENABLED           =>   TRUE,
   COMMENTS           =>  'JOB_SP_LOAD_ADDONEXPIRED....');
END;
/

---Changed Time 
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   JOB_NAME           =>  'JOB_SP_LOAD_ADDONUSAGERESET',
   JOB_TYPE           =>  'STORED_PROCEDURE',
   JOB_ACTION         =>  'PKG_PCRF_ADDON_TRN.SP_LOAD_ADDONUSAGERESET',
   START_DATE         =>  SYSTIMESTAMP,
   REPEAT_INTERVAL    =>  'FREQ=DAILY; BYHOUR=02; BYMINUTE=45;',   
   END_DATE           =>   NULL,
    ENABLED           =>   TRUE,
   COMMENTS           =>  'JOB_SP_LOAD_ADDONUSAGERESET....');
END;
/

---3 Minutes  (5000)
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   JOB_NAME           =>  'JOB_SP_ADDON_ENDING_POFF',
   JOB_TYPE           =>  'STORED_PROCEDURE',
   JOB_ACTION         =>  'PKG_PCRF_ADDON_TRN.SP_ADDON_ENDING_POFF',
   START_DATE         =>  SYSTIMESTAMP,
   REPEAT_INTERVAL    =>  'FREQ=MINUTELY;INTERVAL=3;',   
   END_DATE           =>   NULL,
    ENABLED           =>   TRUE,
   COMMENTS           =>  'SP_ADDON_ENDING_POFF....');
END;
/

--5 Minutes (5000) 
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   JOB_NAME           =>  'JOB_SP_ADDON_USAGE_RESET',
   JOB_TYPE           =>  'STORED_PROCEDURE',
   JOB_ACTION         =>  'PKG_PCRF_ADDON_TRN.SP_ADDON_USAGE_RESET',
   START_DATE         =>  SYSTIMESTAMP,
   REPEAT_INTERVAL    =>  'FREQ=MINUTELY;INTERVAL=5;',   
   END_DATE           =>   NULL,
    ENABLED           =>   TRUE,
   COMMENTS           =>  'JOB_SP_ADDON_USAGE_RESET....');
END;
/


spool off;
