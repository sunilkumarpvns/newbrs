create or replace PROCEDURE SP_RESET_BILLCYCLE_USAGE
AS

/*
ETPL | CSM Dept
NETVERTEX-1614 : DB scheduler for Re-set billing cycle usage
*/
  CNT       NUMBER := 0;
  SUC       NUMBER := 0;
  STIME     NUMBER := DBMS_UTILITY.GET_TIME;
  ETIME     NUMBER;
  TME_TAKEN NUMBER;
  INST      NUMBER := DBMS_UTILITY.CURRENT_INSTANCE;
  P_CNT1    NUMBER := 0;
  P_CNT2    NUMBER := 0;
BEGIN
  -- JIRA : NETVERTEX-2028 
  select PKG_PCRF_SCHEDULER_KPI.FUNC_CHECK_PARTITION('TBLM_USAGE_HISTORY') INTO P_CNT1 from dual;
  select PKG_PCRF_SCHEDULER_KPI.FUNC_CHECK_PARTITION('TBLM_USAGE') INTO P_CNT2 from dual;
  FOR REC_B IN
  (SELECT    *
  FROM TBLM_RESET_USAGE_REQ B
  WHERE B.BILLING_CYCLE_DATE <= CURRENT_TIMESTAMP
  AND B.STATUS                ='P'
  )
  LOOP
  CNT := CNT + 1;
    FOR REC_U IN
    (SELECT    *
    FROM TBLM_USAGE U
    WHERE U.SUBSCRIBER_ID =REC_B.SUBSCRIBER_IDENTITY
    AND U.PACKAGE_ID=REC_B.PACKAGE_ID
    )
    LOOP
      INSERT
      INTO TBLM_USAGE_HISTORY VALUES
        (
          CURRENT_TIMESTAMP,
          REC_U.ID ,
          REC_U.SUBSCRIBER_ID ,
          REC_U.PACKAGE_ID ,
          REC_U.SUBSCRIPTION_ID ,
          REC_U.QUOTA_PROFILE_ID ,
          REC_U.SERVICE_ID ,
          REC_U.DAILY_TOTAL ,
          REC_U.DAILY_UPLOAD ,
          REC_U.DAILY_DOWNLOAD ,
          REC_U.DAILY_TIME ,
          REC_U.WEEKLY_TOTAL ,
          REC_U.WEEKLY_UPLOAD ,
          REC_U.WEEKLY_DOWNLOAD ,
          REC_U.WEEKLY_TIME ,
          REC_U.BILLING_CYCLE_TOTAL ,
          REC_U.BILLING_CYCLE_UPLOAD ,
          REC_U.BILLING_CYCLE_DOWNLOAD ,
          REC_U.BILLING_CYCLE_TIME ,
          REC_U.CUSTOM_TOTAL ,
          REC_U.CUSTOM_UPLOAD ,
          REC_U.CUSTOM_DOWNLOAD ,
          REC_U.CUSTOM_TIME ,
          REC_U.DAILY_RESET_TIME ,
          REC_U.WEEKLY_RESET_TIME ,
          REC_U.CUSTOM_RESET_TIME ,
          REC_U.BILLING_CYCLE_RESET_TIME,
          REC_U.LAST_UPDATE_TIME
        );
       IF REC_B.BILLING_CYCLE_DATE <= CURRENT_TIMESTAMP THEN
      UPDATE TBLM_USAGE I
      SET I.BILLING_CYCLE_TOTAL  = 0,
        I.BILLING_CYCLE_UPLOAD   = 0,
        I.BILLING_CYCLE_DOWNLOAD = 0,
        I.BILLING_CYCLE_TIME     = 0,
		I.LAST_UPDATE_TIME = CURRENT_TIMESTAMP 
      WHERE I.SUBSCRIBER_ID        = REC_U.SUBSCRIBER_ID
      AND I.PACKAGE_ID             = REC_U.PACKAGE_ID;	 
      
    ELSIF REC_B.BILLING_CYCLE_DATE IS NULL THEN 
    DELETE TBLM_USAGE D
    WHERE D.SUBSCRIBER_ID        = REC_U.SUBSCRIBER_ID
      AND D.PACKAGE_ID             = REC_U.PACKAGE_ID;   
    
    END IF;
    END LOOP;
    UPDATE TBLM_RESET_USAGE_REQ B 
	SET B.STATUS  ='S' 
	WHERE B.BILLING_CYCLE_ID = REC_B.BILLING_CYCLE_ID
	AND B.STATUS             ='P';
	SUC := SUC + SQL%ROWCOUNT;
  COMMIT;
  END LOOP;
  ETIME := DBMS_UTILITY.GET_TIME;
  TME_TAKEN := ROUND((ETIME-STIME)/100,1);
  IF P_CNT1 = 1 AND P_CNT2 = 1 THEN
    P_CNT1 := 1;
  ELSE
    P_CNT1 := 0;
  END IF;
  PKG_PCRF_SCHEDULER_KPI.SP_SCHEDULER_GENERAL(CNT,SUC,INST,'JOB_SP_RESET_BILLCYCLE_USAGE',TME_TAKEN,P_CNT1);
END;
/

---DB scheduler Configuration
BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   JOB_NAME           =>  'JOB_SP_RESET_BILLCYCLE_USAGE',
   JOB_TYPE           =>  'STORED_PROCEDURE',
   JOB_ACTION         =>  'SP_RESET_BILLCYCLE_USAGE',
   START_DATE         =>  SYSTIMESTAMP,
   REPEAT_INTERVAL    =>  'FREQ=DAILY; BYHOUR=23; BYMINUTE=45;',   
   END_DATE           =>   NULL,
   ENABLED            =>   TRUE,
   COMMENTS           =>  'JOB_SP_RESET_BILLCYCLE_USAGE....');
END;
/